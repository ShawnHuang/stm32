
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 91 55 00 00 dd 55 00 00 dd 55 00 00     .P. .U...U...U..
      10:	dd 55 00 00 dd 55 00 00 dd 55 00 00 00 00 00 00     .U...U...U......
	...
      2c:	dd 55 00 00 dd 55 00 00 00 00 00 00 dd 55 00 00     .U...U.......U..
      3c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      4c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      5c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      6c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      7c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      8c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      9c:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      ac:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      bc:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      cc:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
      dc:	dd 55 00 00 dd 55 00 00 dd 55 00 00 dd 55 00 00     .U...U...U...U..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     110:	f3ef 8409 	mrs	r4, PSP
     114:	4620      	mov	r0, r4
     116:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     128:	f3ef 8408 	mrs	r4, MSP
     12c:	4620      	mov	r0, r4
     12e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b490      	push	{r4, r7}
     13e:	b082      	sub	sp, #8
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	f04f 0300 	mov.w	r3, #0
     146:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     148:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     14c:	607c      	str	r4, [r7, #4]
  return(result);
     14e:	687b      	ldr	r3, [r7, #4]
}
     150:	4618      	mov	r0, r3
     152:	f107 0708 	add.w	r7, r7, #8
     156:	46bd      	mov	sp, r7
     158:	bc90      	pop	{r4, r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	f107 070c 	add.w	r7, r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b490      	push	{r4, r7}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8410 	mrs	r4, PRIMASK
     184:	607c      	str	r4, [r7, #4]
  return(result);
     186:	687b      	ldr	r3, [r7, #4]
}
     188:	4618      	mov	r0, r3
     18a:	f107 0708 	add.w	r7, r7, #8
     18e:	46bd      	mov	sp, r7
     190:	bc90      	pop	{r4, r7}
     192:	4770      	bx	lr

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	f107 070c 	add.w	r7, r7, #12
     1a6:	46bd      	mov	sp, r7
     1a8:	bc80      	pop	{r7}
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b490      	push	{r4, r7}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	f04f 0300 	mov.w	r3, #0
     1b6:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b8:	f3ef 8413 	mrs	r4, FAULTMASK
     1bc:	607c      	str	r4, [r7, #4]
  return(result);
     1be:	687b      	ldr	r3, [r7, #4]
}
     1c0:	4618      	mov	r0, r3
     1c2:	f107 0708 	add.w	r7, r7, #8
     1c6:	46bd      	mov	sp, r7
     1c8:	bc90      	pop	{r4, r7}
     1ca:	4770      	bx	lr

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	f107 070c 	add.w	r7, r7, #12
     1de:	46bd      	mov	sp, r7
     1e0:	bc80      	pop	{r7}
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b490      	push	{r4, r7}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1f0:	f3ef 8414 	mrs	r4, CONTROL
     1f4:	607c      	str	r4, [r7, #4]
  return(result);
     1f6:	687b      	ldr	r3, [r7, #4]
}
     1f8:	4618      	mov	r0, r3
     1fa:	f107 0708 	add.w	r7, r7, #8
     1fe:	46bd      	mov	sp, r7
     200:	bc90      	pop	{r4, r7}
     202:	4770      	bx	lr

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	f107 070c 	add.w	r7, r7, #12
     216:	46bd      	mov	sp, r7
     218:	bc80      	pop	{r7}
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b490      	push	{r4, r7}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	f04f 0300 	mov.w	r3, #0
     228:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	ba1c      	rev	r4, r3
     22e:	60fc      	str	r4, [r7, #12]
  return(result);
     230:	68fb      	ldr	r3, [r7, #12]
}
     232:	4618      	mov	r0, r3
     234:	f107 0710 	add.w	r7, r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bc90      	pop	{r4, r7}
     23c:	4770      	bx	lr
     23e:	bf00      	nop

00000240 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     240:	b490      	push	{r4, r7}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	4603      	mov	r3, r0
     248:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     24a:	f04f 0300 	mov.w	r3, #0
     24e:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     250:	88fb      	ldrh	r3, [r7, #6]
     252:	ba5c      	rev16	r4, r3
     254:	60fc      	str	r4, [r7, #12]
  return(result);
     256:	68fb      	ldr	r3, [r7, #12]
}
     258:	4618      	mov	r0, r3
     25a:	f107 0710 	add.w	r7, r7, #16
     25e:	46bd      	mov	sp, r7
     260:	bc90      	pop	{r4, r7}
     262:	4770      	bx	lr

00000264 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     264:	b490      	push	{r4, r7}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26e:	f04f 0300 	mov.w	r3, #0
     272:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     274:	88fb      	ldrh	r3, [r7, #6]
     276:	badc      	revsh	r4, r3
     278:	60fc      	str	r4, [r7, #12]
  return(result);
     27a:	68fb      	ldr	r3, [r7, #12]
}
     27c:	4618      	mov	r0, r3
     27e:	f107 0710 	add.w	r7, r7, #16
     282:	46bd      	mov	sp, r7
     284:	bc90      	pop	{r4, r7}
     286:	4770      	bx	lr

00000288 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     288:	b490      	push	{r4, r7}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     290:	f04f 0300 	mov.w	r3, #0
     294:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	fa93 f4a3 	rbit	r4, r3
     29c:	60fc      	str	r4, [r7, #12]
   return(result);
     29e:	68fb      	ldr	r3, [r7, #12]
}
     2a0:	4618      	mov	r0, r3
     2a2:	f107 0710 	add.w	r7, r7, #16
     2a6:	46bd      	mov	sp, r7
     2a8:	bc90      	pop	{r4, r7}
     2aa:	4770      	bx	lr

000002ac <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2ac:	b490      	push	{r4, r7}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b4:	f04f 0300 	mov.w	r3, #0
     2b8:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 4f4f 	ldrexb	r4, [r3]
     2c0:	73fc      	strb	r4, [r7, #15]
   return(result);
     2c2:	7bfb      	ldrb	r3, [r7, #15]
}
     2c4:	4618      	mov	r0, r3
     2c6:	f107 0710 	add.w	r7, r7, #16
     2ca:	46bd      	mov	sp, r7
     2cc:	bc90      	pop	{r4, r7}
     2ce:	4770      	bx	lr

000002d0 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2d0:	b490      	push	{r4, r7}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d8:	f04f 0300 	mov.w	r3, #0
     2dc:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	e8d3 4f5f 	ldrexh	r4, [r3]
     2e4:	81fc      	strh	r4, [r7, #14]
   return(result);
     2e6:	89fb      	ldrh	r3, [r7, #14]
}
     2e8:	4618      	mov	r0, r3
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bc90      	pop	{r4, r7}
     2f2:	4770      	bx	lr

000002f4 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f4:	b490      	push	{r4, r7}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2fc:	f04f 0300 	mov.w	r3, #0
     300:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     302:	687b      	ldr	r3, [r7, #4]
     304:	e853 4f00 	ldrex	r4, [r3]
     308:	60fc      	str	r4, [r7, #12]
   return(result);
     30a:	68fb      	ldr	r3, [r7, #12]
}
     30c:	4618      	mov	r0, r3
     30e:	f107 0710 	add.w	r7, r7, #16
     312:	46bd      	mov	sp, r7
     314:	bc90      	pop	{r4, r7}
     316:	4770      	bx	lr

00000318 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     318:	b490      	push	{r4, r7}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	4603      	mov	r3, r0
     320:	6039      	str	r1, [r7, #0]
     322:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     324:	f04f 0300 	mov.w	r3, #0
     328:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     32a:	683b      	ldr	r3, [r7, #0]
     32c:	79fa      	ldrb	r2, [r7, #7]
     32e:	e8c3 2f44 	strexb	r4, r2, [r3]
     332:	60fc      	str	r4, [r7, #12]
   return(result);
     334:	68fb      	ldr	r3, [r7, #12]
}
     336:	4618      	mov	r0, r3
     338:	f107 0710 	add.w	r7, r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bc90      	pop	{r4, r7}
     340:	4770      	bx	lr
     342:	bf00      	nop

00000344 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     344:	b490      	push	{r4, r7}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	4603      	mov	r3, r0
     34c:	6039      	str	r1, [r7, #0]
     34e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     350:	f04f 0300 	mov.w	r3, #0
     354:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     356:	683b      	ldr	r3, [r7, #0]
     358:	88fa      	ldrh	r2, [r7, #6]
     35a:	e8c3 2f54 	strexh	r4, r2, [r3]
     35e:	60fc      	str	r4, [r7, #12]
   return(result);
     360:	68fb      	ldr	r3, [r7, #12]
}
     362:	4618      	mov	r0, r3
     364:	f107 0710 	add.w	r7, r7, #16
     368:	46bd      	mov	sp, r7
     36a:	bc90      	pop	{r4, r7}
     36c:	4770      	bx	lr
     36e:	bf00      	nop

00000370 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     370:	b490      	push	{r4, r7}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
     378:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     37a:	f04f 0300 	mov.w	r3, #0
     37e:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     380:	683b      	ldr	r3, [r7, #0]
     382:	687a      	ldr	r2, [r7, #4]
     384:	e843 2400 	strex	r4, r2, [r3]
     388:	60fc      	str	r4, [r7, #12]
   return(result);
     38a:	68fb      	ldr	r3, [r7, #12]
}
     38c:	4618      	mov	r0, r3
     38e:	f107 0710 	add.w	r7, r7, #16
     392:	46bd      	mov	sp, r7
     394:	bc90      	pop	{r4, r7}
     396:	4770      	bx	lr

00000398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	f042 0201 	orr.w	r2, r2, #1
     3b2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c4:	6859      	ldr	r1, [r3, #4]
     3c6:	f04f 0300 	mov.w	r3, #0
     3ca:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3ce:	400b      	ands	r3, r1
     3d0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3de:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3e2:	6812      	ldr	r2, [r2, #0]
     3e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3fe:	6812      	ldr	r2, [r2, #0]
     400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     412:	f2c4 0202 	movt	r2, #16386	; 0x4002
     416:	6852      	ldr	r2, [r2, #4]
     418:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     41c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     422:	f2c4 0302 	movt	r3, #16386	; 0x4002
     426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     42a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     42c:	f000 f8ac 	bl	588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     430:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     434:	f2ce 0300 	movt	r3, #57344	; 0xe000
     438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     43c:	609a      	str	r2, [r3, #8]
#endif 
}
     43e:	bd80      	pop	{r7, pc}

00000440 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     440:	b480      	push	{r7}
     442:	b085      	sub	sp, #20
     444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     446:	f04f 0300 	mov.w	r3, #0
     44a:	60fb      	str	r3, [r7, #12]
     44c:	f04f 0300 	mov.w	r3, #0
     450:	60bb      	str	r3, [r7, #8]
     452:	f04f 0300 	mov.w	r3, #0
     456:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     45c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     460:	685b      	ldr	r3, [r3, #4]
     462:	f003 030c 	and.w	r3, r3, #12
     466:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	2b04      	cmp	r3, #4
     46c:	d00d      	beq.n	48a <SystemCoreClockUpdate+0x4a>
     46e:	2b08      	cmp	r3, #8
     470:	d015      	beq.n	49e <SystemCoreClockUpdate+0x5e>
     472:	2b00      	cmp	r3, #0
     474:	d15c      	bne.n	530 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     476:	f240 0300 	movw	r3, #0
     47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     47e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     482:	f2c0 027a 	movt	r2, #122	; 0x7a
     486:	601a      	str	r2, [r3, #0]
      break;
     488:	e05c      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     48a:	f240 0300 	movw	r3, #0
     48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     492:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     496:	f2c0 027a 	movt	r2, #122	; 0x7a
     49a:	601a      	str	r2, [r3, #0]
      break;
     49c:	e052      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a6:	685b      	ldr	r3, [r3, #4]
     4a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     4ac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4b6:	685b      	ldr	r3, [r3, #4]
     4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4bc:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
     4c4:	f103 0302 	add.w	r3, r3, #2
     4c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d10c      	bne.n	4ea <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4d0:	68ba      	ldr	r2, [r7, #8]
     4d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4d6:	f2c0 033d 	movt	r3, #61	; 0x3d
     4da:	fb03 f202 	mul.w	r2, r3, r2
     4de:	f240 0300 	movw	r3, #0
     4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4e6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     4e8:	e02c      	b.n	544 <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f8:	2b00      	cmp	r3, #0
     4fa:	d00c      	beq.n	516 <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4fc:	68ba      	ldr	r2, [r7, #8]
     4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
     502:	f2c0 033d 	movt	r3, #61	; 0x3d
     506:	fb03 f202 	mul.w	r2, r3, r2
     50a:	f240 0300 	movw	r3, #0
     50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     512:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     514:	e016      	b.n	544 <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     516:	68ba      	ldr	r2, [r7, #8]
     518:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     51c:	f2c0 037a 	movt	r3, #122	; 0x7a
     520:	fb03 f202 	mul.w	r2, r3, r2
     524:	f240 0300 	movw	r3, #0
     528:	f2c2 0300 	movt	r3, #8192	; 0x2000
     52c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     52e:	e009      	b.n	544 <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
     530:	f240 0300 	movw	r3, #0
     534:	f2c2 0300 	movt	r3, #8192	; 0x2000
     538:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     53c:	f2c0 027a 	movt	r2, #122	; 0x7a
     540:	601a      	str	r2, [r3, #0]
      break;
     542:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     548:	f2c4 0302 	movt	r3, #16386	; 0x4002
     54c:	685b      	ldr	r3, [r3, #4]
     54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     552:	ea4f 1213 	mov.w	r2, r3, lsr #4
     556:	f240 0304 	movw	r3, #4
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	5c9b      	ldrb	r3, [r3, r2]
     560:	b2db      	uxtb	r3, r3
     562:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     564:	f240 0300 	movw	r3, #0
     568:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	fa22 f203 	lsr.w	r2, r2, r3
     574:	f240 0300 	movw	r3, #0
     578:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	f107 0714 	add.w	r7, r7, #20
     582:	46bd      	mov	sp, r7
     584:	bc80      	pop	{r7}
     586:	4770      	bx	lr

00000588 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     588:	b580      	push	{r7, lr}
     58a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     58c:	f000 f802 	bl	594 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop

00000594 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     594:	b480      	push	{r7}
     596:	b083      	sub	sp, #12
     598:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     59a:	f04f 0300 	mov.w	r3, #0
     59e:	607b      	str	r3, [r7, #4]
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5bc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5cc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f103 0301 	add.w	r3, r3, #1
     5d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	d103      	bne.n	5e4 <SetSysClockTo72+0x50>
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5e2:	d1ec      	bne.n	5be <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     5f6:	f04f 0301 	mov.w	r3, #1
     5fa:	603b      	str	r3, [r7, #0]
     5fc:	e002      	b.n	604 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     604:	683b      	ldr	r3, [r7, #0]
     606:	2b01      	cmp	r3, #1
     608:	f040 8094 	bne.w	734 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     610:	f2c4 0302 	movt	r3, #16386	; 0x4002
     614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     618:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61c:	6812      	ldr	r2, [r2, #0]
     61e:	f042 0210 	orr.w	r2, r2, #16
     622:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     628:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     630:	f2c4 0202 	movt	r2, #16386	; 0x4002
     634:	6812      	ldr	r2, [r2, #0]
     636:	f022 0203 	bic.w	r2, r2, #3
     63a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     640:	f2c4 0302 	movt	r3, #16386	; 0x4002
     644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     648:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64c:	6812      	ldr	r2, [r2, #0]
     64e:	f042 0202 	orr.w	r2, r2, #2
     652:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     658:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     660:	f2c4 0202 	movt	r2, #16386	; 0x4002
     664:	6852      	ldr	r2, [r2, #4]
     666:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     66c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     674:	f2c4 0202 	movt	r2, #16386	; 0x4002
     678:	6852      	ldr	r2, [r2, #4]
     67a:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 0302 	movt	r3, #16386	; 0x4002
     684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     688:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68c:	6852      	ldr	r2, [r2, #4]
     68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     692:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     698:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a4:	6852      	ldr	r2, [r2, #4]
     6a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     6aa:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6bc:	6852      	ldr	r2, [r2, #4]
     6be:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6d4:	6812      	ldr	r2, [r2, #0]
     6d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6da:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6dc:	bf00      	nop
     6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ec:	2b00      	cmp	r3, #0
     6ee:	d0f6      	beq.n	6de <SetSysClockTo72+0x14a>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     700:	6852      	ldr	r2, [r2, #4]
     702:	f022 0203 	bic.w	r2, r2, #3
     706:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     70c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     714:	f2c4 0202 	movt	r2, #16386	; 0x4002
     718:	6852      	ldr	r2, [r2, #4]
     71a:	f042 0202 	orr.w	r2, r2, #2
     71e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     720:	bf00      	nop
     722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     726:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	f003 030c 	and.w	r3, r3, #12
     730:	2b08      	cmp	r3, #8
     732:	d1f6      	bne.n	722 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     734:	f107 070c 	add.w	r7, r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	000055e0 	.word	0x000055e0
     744:	20000000 	.word	0x20000000
     748:	20000028 	.word	0x20000028
     74c:	20000028 	.word	0x20000028
     750:	20000028 	.word	0x20000028

00000754 <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     754:	b580      	push	{r7, lr}
     756:	b082      	sub	sp, #8
     758:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     75a:	f04f 0010 	mov.w	r0, #16
     75e:	f04f 0101 	mov.w	r1, #1
     762:	f000 fd51 	bl	1208 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
     766:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     76a:	f2c4 0001 	movt	r0, #16385	; 0x4001
     76e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     772:	f04f 0201 	mov.w	r2, #1
     776:	f001 f8af 	bl	18d8 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     77a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     77e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     780:	f04f 0310 	mov.w	r3, #16
     784:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     786:	f04f 0303 	mov.w	r3, #3
     78a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     78c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     790:	f2c4 0001 	movt	r0, #16385	; 0x4001
     794:	f107 0304 	add.w	r3, r7, #4
     798:	4619      	mov	r1, r3
     79a:	f000 ff3b 	bl	1614 <GPIO_Init>
}
     79e:	f107 0708 	add.w	r7, r7, #8
     7a2:	46bd      	mov	sp, r7
     7a4:	bd80      	pop	{r7, pc}
     7a6:	bf00      	nop

000007a8 <init_button>:

void init_button(void)
{
     7a8:	b580      	push	{r7, lr}
     7aa:	b082      	sub	sp, #8
     7ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     7ae:	f04f 0004 	mov.w	r0, #4
     7b2:	f04f 0101 	mov.w	r1, #1
     7b6:	f000 fd27 	bl	1208 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     7ba:	f04f 0301 	mov.w	r3, #1
     7be:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     7c0:	f04f 0304 	mov.w	r3, #4
     7c4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     7c6:	f04f 0303 	mov.w	r3, #3
     7ca:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     7cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     7d0:	f2c4 0001 	movt	r0, #16385	; 0x4001
     7d4:	f107 0304 	add.w	r3, r7, #4
     7d8:	4619      	mov	r1, r3
     7da:	f000 ff1b 	bl	1614 <GPIO_Init>
}
     7de:	f107 0708 	add.w	r7, r7, #8
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}
     7e6:	bf00      	nop

000007e8 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b084      	sub	sp, #16
     7ec:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     7ee:	f04f 0001 	mov.w	r0, #1
     7f2:	f04f 0101 	mov.w	r1, #1
     7f6:	f000 fd07 	bl	1208 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     7fa:	f04f 0000 	mov.w	r0, #0
     7fe:	f04f 0100 	mov.w	r1, #0
     802:	f001 f97b 	bl	1afc <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     806:	f04f 0301 	mov.w	r3, #1
     80a:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     80c:	f04f 0300 	mov.w	r3, #0
     810:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     812:	f04f 0308 	mov.w	r3, #8
     816:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     818:	f04f 0301 	mov.w	r3, #1
     81c:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     81e:	f107 0308 	add.w	r3, r7, #8
     822:	4618      	mov	r0, r3
     824:	f001 fed8 	bl	25d8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     828:	f04f 0306 	mov.w	r3, #6
     82c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     82e:	f04f 030f 	mov.w	r3, #15
     832:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     834:	f04f 030f 	mov.w	r3, #15
     838:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     83a:	f04f 0301 	mov.w	r3, #1
     83e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     840:	f107 0304 	add.w	r3, r7, #4
     844:	4618      	mov	r0, r3
     846:	f004 fd89 	bl	535c <NVIC_Init>
}
     84a:	f107 0710 	add.w	r7, r7, #16
     84e:	46bd      	mov	sp, r7
     850:	bd80      	pop	{r7, pc}
     852:	bf00      	nop

00000854 <init_rs232>:

void init_rs232(void)
{
     854:	b580      	push	{r7, lr}
     856:	b086      	sub	sp, #24
     858:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
     85a:	f04f 0005 	mov.w	r0, #5
     85e:	f04f 0101 	mov.w	r1, #1
     862:	f000 fcd1 	bl	1208 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
     866:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     86a:	f04f 0101 	mov.w	r1, #1
     86e:	f000 fcf5 	bl	125c <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
     872:	f04f 0308 	mov.w	r3, #8
     876:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     878:	f04f 0304 	mov.w	r3, #4
     87c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     87e:	f44f 6000 	mov.w	r0, #2048	; 0x800
     882:	f2c4 0001 	movt	r0, #16385	; 0x4001
     886:	f107 0304 	add.w	r3, r7, #4
     88a:	4619      	mov	r1, r3
     88c:	f000 fec2 	bl	1614 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     890:	f04f 0304 	mov.w	r3, #4
     894:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     896:	f04f 0303 	mov.w	r3, #3
     89a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     89c:	f04f 0318 	mov.w	r3, #24
     8a0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     8a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
     8a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
     8aa:	f107 0304 	add.w	r3, r7, #4
     8ae:	4619      	mov	r1, r3
     8b0:	f000 feb0 	bl	1614 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
     8b4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     8b8:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     8ba:	f04f 0300 	mov.w	r3, #0
     8be:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     8c0:	f04f 0300 	mov.w	r3, #0
     8c4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     8c6:	f04f 0300 	mov.w	r3, #0
     8ca:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     8cc:	f04f 0300 	mov.w	r3, #0
     8d0:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     8d2:	f04f 030c 	mov.w	r3, #12
     8d6:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
     8d8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     8dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
     8e0:	f107 0308 	add.w	r3, r7, #8
     8e4:	4619      	mov	r1, r3
     8e6:	f001 f9dd 	bl	1ca4 <USART_Init>
    USART_Cmd(USART2, ENABLE);
     8ea:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     8ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
     8f2:	f04f 0101 	mov.w	r1, #1
     8f6:	f001 fb13 	bl	1f20 <USART_Cmd>
}
     8fa:	f107 0718 	add.w	r7, r7, #24
     8fe:	46bd      	mov	sp, r7
     900:	bd80      	pop	{r7, pc}
     902:	bf00      	nop

00000904 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     90a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     90e:	f2c4 0000 	movt	r0, #16384	; 0x4000
     912:	f240 7127 	movw	r1, #1831	; 0x727
     916:	f04f 0200 	mov.w	r2, #0
     91a:	f001 fb21 	bl	1f60 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
     91e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     922:	f2c4 0000 	movt	r0, #16384	; 0x4000
     926:	f240 5125 	movw	r1, #1317	; 0x525
     92a:	f04f 0201 	mov.w	r2, #1
     92e:	f001 fb17 	bl	1f60 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
     932:	f04f 0326 	mov.w	r3, #38	; 0x26
     936:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     938:	f04f 0300 	mov.w	r3, #0
     93c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     93e:	f04f 0301 	mov.w	r3, #1
     942:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     944:	f107 0304 	add.w	r3, r7, #4
     948:	4618      	mov	r0, r3
     94a:	f004 fd07 	bl	535c <NVIC_Init>
}
     94e:	f107 0708 	add.w	r7, r7, #8
     952:	46bd      	mov	sp, r7
     954:	bd80      	pop	{r7, pc}
     956:	bf00      	nop

00000958 <enable_rs232>:

void enable_rs232(void)
{
     958:	b580      	push	{r7, lr}
     95a:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
     95c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     960:	f2c4 0000 	movt	r0, #16384	; 0x4000
     964:	f04f 0101 	mov.w	r1, #1
     968:	f001 fada 	bl	1f20 <USART_Cmd>
}
     96c:	bd80      	pop	{r7, pc}
     96e:	bf00      	nop

00000970 <rs232_print_str>:

void rs232_print_str(const char *str)
{
     970:	b580      	push	{r7, lr}
     972:	b084      	sub	sp, #16
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     97c:	e018      	b.n	9b0 <rs232_print_str+0x40>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     97e:	bf00      	nop
     980:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     984:	f2c4 0000 	movt	r0, #16384	; 0x4000
     988:	f04f 0180 	mov.w	r1, #128	; 0x80
     98c:	f001 fd44 	bl	2418 <USART_GetFlagStatus>
     990:	4603      	mov	r3, r0
     992:	2b00      	cmp	r3, #0
     994:	d0f4      	beq.n	980 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
     996:	68fb      	ldr	r3, [r7, #12]
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     99e:	f2c4 0000 	movt	r0, #16384	; 0x4000
     9a2:	4619      	mov	r1, r3
     9a4:	f001 fbe6 	bl	2174 <USART_SendData>
        curr_char++;
     9a8:	68fb      	ldr	r3, [r7, #12]
     9aa:	f103 0301 	add.w	r3, r3, #1
     9ae:	60fb      	str	r3, [r7, #12]

void rs232_print_str(const char *str)
{
    const char *curr_char = str;

    while(*curr_char != '\0') {
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1e2      	bne.n	97e <rs232_print_str+0xe>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, *curr_char);
        curr_char++;
    }
}
     9b8:	f107 0710 	add.w	r7, r7, #16
     9bc:	46bd      	mov	sp, r7
     9be:	bd80      	pop	{r7, pc}

000009c0 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     9c0:	b480      	push	{r7}
     9c2:	b083      	sub	sp, #12
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	2b09      	cmp	r3, #9
     9cc:	d805      	bhi.n	9da <hex_to_char+0x1a>
        return hex_number + '0';
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	b2db      	uxtb	r3, r3
     9d2:	f103 0330 	add.w	r3, r3, #48	; 0x30
     9d6:	b2db      	uxtb	r3, r3
     9d8:	e004      	b.n	9e4 <hex_to_char+0x24>
    } else {
        return hex_number - 0xA + 'A';
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	b2db      	uxtb	r3, r3
     9de:	f103 0337 	add.w	r3, r3, #55	; 0x37
     9e2:	b2db      	uxtb	r3, r3
    }
}
     9e4:	4618      	mov	r0, r3
     9e6:	f107 070c 	add.w	r7, r7, #12
     9ea:	46bd      	mov	sp, r7
     9ec:	bc80      	pop	{r7}
     9ee:	4770      	bx	lr

000009f0 <send_byte>:

void send_byte(uint8_t b)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b082      	sub	sp, #8
     9f4:	af00      	add	r7, sp, #0
     9f6:	4603      	mov	r3, r0
     9f8:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     9fa:	bf00      	nop
     9fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     a00:	f2c4 0000 	movt	r0, #16384	; 0x4000
     a04:	f04f 0180 	mov.w	r1, #128	; 0x80
     a08:	f001 fd06 	bl	2418 <USART_GetFlagStatus>
     a0c:	4603      	mov	r3, r0
     a0e:	2b00      	cmp	r3, #0
     a10:	d0f4      	beq.n	9fc <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a16:	f2c4 0301 	movt	r3, #16385	; 0x4001
     a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a1e:	f2c4 0201 	movt	r2, #16385	; 0x4001
     a22:	68d2      	ldr	r2, [r2, #12]
     a24:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
     a28:	60da      	str	r2, [r3, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
     a2a:	79fb      	ldrb	r3, [r7, #7]
     a2c:	b29b      	uxth	r3, r3
     a2e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     a32:	f2c4 0000 	movt	r0, #16384	; 0x4000
     a36:	4619      	mov	r1, r3
     a38:	f001 fb9c 	bl	2174 <USART_SendData>
}
     a3c:	f107 0708 	add.w	r7, r7, #8
     a40:	46bd      	mov	sp, r7
     a42:	bd80      	pop	{r7, pc}

00000a44 <send_number>:

void send_number(unsigned long sample, int radix)
{
     a44:	b580      	push	{r7, lr}
     a46:	b09e      	sub	sp, #120	; 0x78
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
     a4e:	f04f 0300 	mov.w	r3, #0
     a52:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
     a54:	683a      	ldr	r2, [r7, #0]
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	fbb3 f1f2 	udiv	r1, r3, r2
     a5c:	fb02 f201 	mul.w	r2, r2, r1
     a60:	1a9b      	subs	r3, r3, r2
     a62:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
     a64:	6f38      	ldr	r0, [r7, #112]	; 0x70
     a66:	f7ff ffab 	bl	9c0 <hex_to_char>
     a6a:	4603      	mov	r3, r0
     a6c:	461a      	mov	r2, r3
     a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a70:	f107 010c 	add.w	r1, r7, #12
     a74:	18cb      	adds	r3, r1, r3
     a76:	701a      	strb	r2, [r3, #0]
        sample /= radix;
     a78:	683b      	ldr	r3, [r7, #0]
     a7a:	687a      	ldr	r2, [r7, #4]
     a7c:	fbb2 f3f3 	udiv	r3, r2, r3
     a80:	607b      	str	r3, [r7, #4]
        digit++;
     a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a84:	f103 0301 	add.w	r3, r3, #1
     a88:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d1e1      	bne.n	a54 <send_number+0x10>

    while(digit != 0) {
     a90:	e01b      	b.n	aca <send_number+0x86>
        digit--;
     a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a94:	f103 33ff 	add.w	r3, r3, #4294967295
     a98:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     a9a:	bf00      	nop
     a9c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     aa0:	f2c4 0000 	movt	r0, #16384	; 0x4000
     aa4:	f04f 0180 	mov.w	r1, #128	; 0x80
     aa8:	f001 fcb6 	bl	2418 <USART_GetFlagStatus>
     aac:	4603      	mov	r3, r0
     aae:	2b00      	cmp	r3, #0
     ab0:	d0f4      	beq.n	a9c <send_number+0x58>
        USART_SendData(USART2, str[digit]);
     ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     ab4:	f107 020c 	add.w	r2, r7, #12
     ab8:	18d3      	adds	r3, r2, r3
     aba:	781b      	ldrb	r3, [r3, #0]
     abc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     ac0:	f2c4 0000 	movt	r0, #16384	; 0x4000
     ac4:	4619      	mov	r1, r3
     ac6:	f001 fb55 	bl	2174 <USART_SendData>
        str[digit] = hex_to_char(mod);
        sample /= radix;
        digit++;
    } while(sample != 0);

    while(digit != 0) {
     aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     acc:	2b00      	cmp	r3, #0
     ace:	d1e0      	bne.n	a92 <send_number+0x4e>
        digit--;
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, str[digit]);
    }
}
     ad0:	f107 0778 	add.w	r7, r7, #120	; 0x78
     ad4:	46bd      	mov	sp, r7
     ad6:	bd80      	pop	{r7, pc}

00000ad8 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     ad8:	b480      	push	{r7}
     ada:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ae8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     aec:	6812      	ldr	r2, [r2, #0]
     aee:	f042 0201 	orr.w	r2, r2, #1
     af2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     af8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b04:	6859      	ldr	r1, [r3, #4]
     b06:	f04f 0300 	mov.w	r3, #0
     b0a:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     b0e:	400b      	ands	r3, r1
     b10:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b16:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b22:	6812      	ldr	r2, [r2, #0]
     b24:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     b28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     b2c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b3e:	6812      	ldr	r2, [r2, #0]
     b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     b44:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b52:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b56:	6852      	ldr	r2, [r2, #4]
     b58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     b5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     b6a:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     b6c:	46bd      	mov	sp, r7
     b6e:	bc80      	pop	{r7}
     b70:	4770      	bx	lr
     b72:	bf00      	nop

00000b74 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     b74:	b480      	push	{r7}
     b76:	b083      	sub	sp, #12
     b78:	af00      	add	r7, sp, #0
     b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b88:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b8c:	6812      	ldr	r2, [r2, #0]
     b8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     b92:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b98:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ba0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ba4:	6812      	ldr	r2, [r2, #0]
     ba6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     baa:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     bb2:	d003      	beq.n	bbc <RCC_HSEConfig+0x48>
     bb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     bb8:	d00d      	beq.n	bd6 <RCC_HSEConfig+0x62>
     bba:	e019      	b.n	bf0 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     bc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bcc:	6812      	ldr	r2, [r2, #0]
     bce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     bd2:	601a      	str	r2, [r3, #0]
      break;
     bd4:	e00d      	b.n	bf2 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bda:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     be2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     be6:	6812      	ldr	r2, [r2, #0]
     be8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     bec:	601a      	str	r2, [r3, #0]
      break;
     bee:	e000      	b.n	bf2 <RCC_HSEConfig+0x7e>
      
    default:
      break;
     bf0:	bf00      	nop
  }
}
     bf2:	f107 070c 	add.w	r7, r7, #12
     bf6:	46bd      	mov	sp, r7
     bf8:	bc80      	pop	{r7}
     bfa:	4770      	bx	lr

00000bfc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     bfc:	b580      	push	{r7, lr}
     bfe:	b082      	sub	sp, #8
     c00:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     c02:	f04f 0300 	mov.w	r3, #0
     c06:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     c08:	f04f 0300 	mov.w	r3, #0
     c0c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     c0e:	f04f 0300 	mov.w	r3, #0
     c12:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     c14:	f04f 0031 	mov.w	r0, #49	; 0x31
     c18:	f000 fbce 	bl	13b8 <RCC_GetFlagStatus>
     c1c:	4603      	mov	r3, r0
     c1e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
     c20:	683b      	ldr	r3, [r7, #0]
     c22:	f103 0301 	add.w	r3, r3, #1
     c26:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     c28:	683b      	ldr	r3, [r7, #0]
     c2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     c2e:	d002      	beq.n	c36 <RCC_WaitForHSEStartUp+0x3a>
     c30:	79bb      	ldrb	r3, [r7, #6]
     c32:	2b00      	cmp	r3, #0
     c34:	d0ee      	beq.n	c14 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     c36:	f04f 0031 	mov.w	r0, #49	; 0x31
     c3a:	f000 fbbd 	bl	13b8 <RCC_GetFlagStatus>
     c3e:	4603      	mov	r3, r0
     c40:	2b00      	cmp	r3, #0
     c42:	d003      	beq.n	c4c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     c44:	f04f 0301 	mov.w	r3, #1
     c48:	71fb      	strb	r3, [r7, #7]
     c4a:	e002      	b.n	c52 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     c4c:	f04f 0300 	mov.w	r3, #0
     c50:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
     c52:	79fb      	ldrb	r3, [r7, #7]
}
     c54:	4618      	mov	r0, r3
     c56:	f107 0708 	add.w	r7, r7, #8
     c5a:	46bd      	mov	sp, r7
     c5c:	bd80      	pop	{r7, pc}
     c5e:	bf00      	nop

00000c60 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     c60:	b480      	push	{r7}
     c62:	b085      	sub	sp, #20
     c64:	af00      	add	r7, sp, #0
     c66:	4603      	mov	r3, r0
     c68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     c6a:	f04f 0300 	mov.w	r3, #0
     c6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     c82:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     c84:	79fb      	ldrb	r3, [r7, #7]
     c86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     c8a:	68fa      	ldr	r2, [r7, #12]
     c8c:	4313      	orrs	r3, r2
     c8e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c98:	68fa      	ldr	r2, [r7, #12]
     c9a:	601a      	str	r2, [r3, #0]
}
     c9c:	f107 0714 	add.w	r7, r7, #20
     ca0:	46bd      	mov	sp, r7
     ca2:	bc80      	pop	{r7}
     ca4:	4770      	bx	lr
     ca6:	bf00      	nop

00000ca8 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     ca8:	b480      	push	{r7}
     caa:	b083      	sub	sp, #12
     cac:	af00      	add	r7, sp, #0
     cae:	4603      	mov	r3, r0
     cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     cb2:	f04f 0300 	mov.w	r3, #0
     cb6:	f2c4 2342 	movt	r3, #16962	; 0x4242
     cba:	79fa      	ldrb	r2, [r7, #7]
     cbc:	601a      	str	r2, [r3, #0]
}
     cbe:	f107 070c 	add.w	r7, r7, #12
     cc2:	46bd      	mov	sp, r7
     cc4:	bc80      	pop	{r7}
     cc6:	4770      	bx	lr

00000cc8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     cc8:	b480      	push	{r7}
     cca:	b085      	sub	sp, #20
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
     cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     cd2:	f04f 0300 	mov.w	r3, #0
     cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ce0:	685b      	ldr	r3, [r3, #4]
     ce2:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     ce4:	68fb      	ldr	r3, [r7, #12]
     ce6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     cea:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     cec:	687a      	ldr	r2, [r7, #4]
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	4313      	orrs	r3, r2
     cf2:	68fa      	ldr	r2, [r7, #12]
     cf4:	4313      	orrs	r3, r2
     cf6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d00:	68fa      	ldr	r2, [r7, #12]
     d02:	605a      	str	r2, [r3, #4]
}
     d04:	f107 0714 	add.w	r7, r7, #20
     d08:	46bd      	mov	sp, r7
     d0a:	bc80      	pop	{r7}
     d0c:	4770      	bx	lr
     d0e:	bf00      	nop

00000d10 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     d10:	b480      	push	{r7}
     d12:	b083      	sub	sp, #12
     d14:	af00      	add	r7, sp, #0
     d16:	4603      	mov	r3, r0
     d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     d1a:	f04f 0360 	mov.w	r3, #96	; 0x60
     d1e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     d22:	79fa      	ldrb	r2, [r7, #7]
     d24:	601a      	str	r2, [r3, #0]
}
     d26:	f107 070c 	add.w	r7, r7, #12
     d2a:	46bd      	mov	sp, r7
     d2c:	bc80      	pop	{r7}
     d2e:	4770      	bx	lr

00000d30 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     d30:	b480      	push	{r7}
     d32:	b085      	sub	sp, #20
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     d38:	f04f 0300 	mov.w	r3, #0
     d3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d46:	685b      	ldr	r3, [r3, #4]
     d48:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     d4a:	68fb      	ldr	r3, [r7, #12]
     d4c:	f023 0303 	bic.w	r3, r3, #3
     d50:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     d52:	68fa      	ldr	r2, [r7, #12]
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	4313      	orrs	r3, r2
     d58:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d62:	68fa      	ldr	r2, [r7, #12]
     d64:	605a      	str	r2, [r3, #4]
}
     d66:	f107 0714 	add.w	r7, r7, #20
     d6a:	46bd      	mov	sp, r7
     d6c:	bc80      	pop	{r7}
     d6e:	4770      	bx	lr

00000d70 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     d70:	b480      	push	{r7}
     d72:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d7c:	685b      	ldr	r3, [r3, #4]
     d7e:	b2db      	uxtb	r3, r3
     d80:	f003 030c 	and.w	r3, r3, #12
     d84:	b2db      	uxtb	r3, r3
}
     d86:	4618      	mov	r0, r3
     d88:	46bd      	mov	sp, r7
     d8a:	bc80      	pop	{r7}
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     d90:	b480      	push	{r7}
     d92:	b085      	sub	sp, #20
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da6:	685b      	ldr	r3, [r3, #4]
     da8:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     db0:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     db2:	68fa      	ldr	r2, [r7, #12]
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	4313      	orrs	r3, r2
     db8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dc2:	68fa      	ldr	r2, [r7, #12]
     dc4:	605a      	str	r2, [r3, #4]
}
     dc6:	f107 0714 	add.w	r7, r7, #20
     dca:	46bd      	mov	sp, r7
     dcc:	bc80      	pop	{r7}
     dce:	4770      	bx	lr

00000dd0 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     dd0:	b480      	push	{r7}
     dd2:	b085      	sub	sp, #20
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     dd8:	f04f 0300 	mov.w	r3, #0
     ddc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     de2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     de6:	685b      	ldr	r3, [r3, #4]
     de8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     df0:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     df2:	68fa      	ldr	r2, [r7, #12]
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	4313      	orrs	r3, r2
     df8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e02:	68fa      	ldr	r2, [r7, #12]
     e04:	605a      	str	r2, [r3, #4]
}
     e06:	f107 0714 	add.w	r7, r7, #20
     e0a:	46bd      	mov	sp, r7
     e0c:	bc80      	pop	{r7}
     e0e:	4770      	bx	lr

00000e10 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     e10:	b480      	push	{r7}
     e12:	b085      	sub	sp, #20
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     e18:	f04f 0300 	mov.w	r3, #0
     e1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e26:	685b      	ldr	r3, [r3, #4]
     e28:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     e30:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e38:	68fa      	ldr	r2, [r7, #12]
     e3a:	4313      	orrs	r3, r2
     e3c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e46:	68fa      	ldr	r2, [r7, #12]
     e48:	605a      	str	r2, [r3, #4]
}
     e4a:	f107 0714 	add.w	r7, r7, #20
     e4e:	46bd      	mov	sp, r7
     e50:	bc80      	pop	{r7}
     e52:	4770      	bx	lr

00000e54 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     e54:	b480      	push	{r7}
     e56:	b083      	sub	sp, #12
     e58:	af00      	add	r7, sp, #0
     e5a:	4602      	mov	r2, r0
     e5c:	460b      	mov	r3, r1
     e5e:	71fa      	strb	r2, [r7, #7]
     e60:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e62:	79bb      	ldrb	r3, [r7, #6]
     e64:	2b00      	cmp	r3, #0
     e66:	d00e      	beq.n	e86 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     e68:	f241 0309 	movw	r3, #4105	; 0x1009
     e6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e70:	f241 0209 	movw	r2, #4105	; 0x1009
     e74:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e78:	7812      	ldrb	r2, [r2, #0]
     e7a:	b2d1      	uxtb	r1, r2
     e7c:	79fa      	ldrb	r2, [r7, #7]
     e7e:	430a      	orrs	r2, r1
     e80:	b2d2      	uxtb	r2, r2
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e010      	b.n	ea8 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     e86:	f241 0309 	movw	r3, #4105	; 0x1009
     e8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e8e:	f241 0209 	movw	r2, #4105	; 0x1009
     e92:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e96:	7812      	ldrb	r2, [r2, #0]
     e98:	b2d1      	uxtb	r1, r2
     e9a:	79fa      	ldrb	r2, [r7, #7]
     e9c:	ea6f 0202 	mvn.w	r2, r2
     ea0:	b2d2      	uxtb	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	b2d2      	uxtb	r2, r2
     ea6:	701a      	strb	r2, [r3, #0]
  }
}
     ea8:	f107 070c 	add.w	r7, r7, #12
     eac:	46bd      	mov	sp, r7
     eae:	bc80      	pop	{r7}
     eb0:	4770      	bx	lr
     eb2:	bf00      	nop

00000eb4 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     eb4:	b480      	push	{r7}
     eb6:	b083      	sub	sp, #12
     eb8:	af00      	add	r7, sp, #0
     eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     ebc:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     ec0:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ec4:	687a      	ldr	r2, [r7, #4]
     ec6:	601a      	str	r2, [r3, #0]
}
     ec8:	f107 070c 	add.w	r7, r7, #12
     ecc:	46bd      	mov	sp, r7
     ece:	bc80      	pop	{r7}
     ed0:	4770      	bx	lr
     ed2:	bf00      	nop

00000ed4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ed4:	b480      	push	{r7}
     ed6:	b085      	sub	sp, #20
     ed8:	af00      	add	r7, sp, #0
     eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     edc:	f04f 0300 	mov.w	r3, #0
     ee0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eea:	685b      	ldr	r3, [r3, #4]
     eec:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     eee:	68fb      	ldr	r3, [r7, #12]
     ef0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ef4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ef6:	68fa      	ldr	r2, [r7, #12]
     ef8:	687b      	ldr	r3, [r7, #4]
     efa:	4313      	orrs	r3, r2
     efc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f06:	68fa      	ldr	r2, [r7, #12]
     f08:	605a      	str	r2, [r3, #4]
}
     f0a:	f107 0714 	add.w	r7, r7, #20
     f0e:	46bd      	mov	sp, r7
     f10:	bc80      	pop	{r7}
     f12:	4770      	bx	lr

00000f14 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     f14:	b480      	push	{r7}
     f16:	b083      	sub	sp, #12
     f18:	af00      	add	r7, sp, #0
     f1a:	4603      	mov	r3, r0
     f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     f1e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     f22:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f26:	f04f 0200 	mov.w	r2, #0
     f2a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     f2c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f34:	f04f 0200 	mov.w	r2, #0
     f38:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     f3a:	79fb      	ldrb	r3, [r7, #7]
     f3c:	2b01      	cmp	r3, #1
     f3e:	d002      	beq.n	f46 <RCC_LSEConfig+0x32>
     f40:	2b04      	cmp	r3, #4
     f42:	d008      	beq.n	f56 <RCC_LSEConfig+0x42>
     f44:	e00f      	b.n	f66 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     f46:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     f4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f4e:	f04f 0201 	mov.w	r2, #1
     f52:	701a      	strb	r2, [r3, #0]
      break;
     f54:	e008      	b.n	f68 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     f56:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f5e:	f04f 0205 	mov.w	r2, #5
     f62:	701a      	strb	r2, [r3, #0]
      break;            
     f64:	e000      	b.n	f68 <RCC_LSEConfig+0x54>
      
    default:
      break;      
     f66:	bf00      	nop
  }
}
     f68:	f107 070c 	add.w	r7, r7, #12
     f6c:	46bd      	mov	sp, r7
     f6e:	bc80      	pop	{r7}
     f70:	4770      	bx	lr
     f72:	bf00      	nop

00000f74 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     f74:	b480      	push	{r7}
     f76:	b083      	sub	sp, #12
     f78:	af00      	add	r7, sp, #0
     f7a:	4603      	mov	r3, r0
     f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     f7e:	f44f 6390 	mov.w	r3, #1152	; 0x480
     f82:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f86:	79fa      	ldrb	r2, [r7, #7]
     f88:	601a      	str	r2, [r3, #0]
}
     f8a:	f107 070c 	add.w	r7, r7, #12
     f8e:	46bd      	mov	sp, r7
     f90:	bc80      	pop	{r7}
     f92:	4770      	bx	lr

00000f94 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     f94:	b480      	push	{r7}
     f96:	b083      	sub	sp, #12
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fa8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fac:	6a11      	ldr	r1, [r2, #32]
     fae:	687a      	ldr	r2, [r7, #4]
     fb0:	430a      	orrs	r2, r1
     fb2:	621a      	str	r2, [r3, #32]
}
     fb4:	f107 070c 	add.w	r7, r7, #12
     fb8:	46bd      	mov	sp, r7
     fba:	bc80      	pop	{r7}
     fbc:	4770      	bx	lr
     fbe:	bf00      	nop

00000fc0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     fc0:	b480      	push	{r7}
     fc2:	b083      	sub	sp, #12
     fc4:	af00      	add	r7, sp, #0
     fc6:	4603      	mov	r3, r0
     fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     fca:	f240 433c 	movw	r3, #1084	; 0x43c
     fce:	f2c4 2342 	movt	r3, #16962	; 0x4242
     fd2:	79fa      	ldrb	r2, [r7, #7]
     fd4:	601a      	str	r2, [r3, #0]
}
     fd6:	f107 070c 	add.w	r7, r7, #12
     fda:	46bd      	mov	sp, r7
     fdc:	bc80      	pop	{r7}
     fde:	4770      	bx	lr

00000fe0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     fe0:	b480      	push	{r7}
     fe2:	b087      	sub	sp, #28
     fe4:	af00      	add	r7, sp, #0
     fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     fe8:	f04f 0300 	mov.w	r3, #0
     fec:	617b      	str	r3, [r7, #20]
     fee:	f04f 0300 	mov.w	r3, #0
     ff2:	613b      	str	r3, [r7, #16]
     ff4:	f04f 0300 	mov.w	r3, #0
     ff8:	60fb      	str	r3, [r7, #12]
     ffa:	f04f 0300 	mov.w	r3, #0
     ffe:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    1000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1004:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1008:	685b      	ldr	r3, [r3, #4]
    100a:	f003 030c 	and.w	r3, r3, #12
    100e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    1010:	697b      	ldr	r3, [r7, #20]
    1012:	2b04      	cmp	r3, #4
    1014:	d00a      	beq.n	102c <RCC_GetClocksFreq+0x4c>
    1016:	2b08      	cmp	r3, #8
    1018:	d00f      	beq.n	103a <RCC_GetClocksFreq+0x5a>
    101a:	2b00      	cmp	r3, #0
    101c:	d14d      	bne.n	10ba <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    101e:	687a      	ldr	r2, [r7, #4]
    1020:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    1024:	f2c0 037a 	movt	r3, #122	; 0x7a
    1028:	6013      	str	r3, [r2, #0]
      break;
    102a:	e04d      	b.n	10c8 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    102c:	687a      	ldr	r2, [r7, #4]
    102e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    1032:	f2c0 037a 	movt	r3, #122	; 0x7a
    1036:	6013      	str	r3, [r2, #0]
      break;
    1038:	e046      	b.n	10c8 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    103e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1042:	685b      	ldr	r3, [r3, #4]
    1044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    1048:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    1058:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    105a:	693b      	ldr	r3, [r7, #16]
    105c:	ea4f 4393 	mov.w	r3, r3, lsr #18
    1060:	f103 0302 	add.w	r3, r3, #2
    1064:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    1066:	68fb      	ldr	r3, [r7, #12]
    1068:	2b00      	cmp	r3, #0
    106a:	d109      	bne.n	1080 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    106c:	693a      	ldr	r2, [r7, #16]
    106e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    1072:	f2c0 033d 	movt	r3, #61	; 0x3d
    1076:	fb03 f202 	mul.w	r2, r3, r2
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    107e:	e023      	b.n	10c8 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    1080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1084:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1088:	685b      	ldr	r3, [r3, #4]
    108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    108e:	2b00      	cmp	r3, #0
    1090:	d009      	beq.n	10a6 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    1092:	693a      	ldr	r2, [r7, #16]
    1094:	f44f 6310 	mov.w	r3, #2304	; 0x900
    1098:	f2c0 033d 	movt	r3, #61	; 0x3d
    109c:	fb03 f202 	mul.w	r2, r3, r2
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    10a4:	e010      	b.n	10c8 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    10a6:	693a      	ldr	r2, [r7, #16]
    10a8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    10ac:	f2c0 037a 	movt	r3, #122	; 0x7a
    10b0:	fb03 f202 	mul.w	r2, r3, r2
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    10b8:	e006      	b.n	10c8 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    10ba:	687a      	ldr	r2, [r7, #4]
    10bc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    10c0:	f2c0 037a 	movt	r3, #122	; 0x7a
    10c4:	6013      	str	r3, [r2, #0]
      break;
    10c6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    10c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d0:	685b      	ldr	r3, [r3, #4]
    10d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    10d6:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    10d8:	697b      	ldr	r3, [r7, #20]
    10da:	ea4f 1313 	mov.w	r3, r3, lsr #4
    10de:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    10e0:	f240 0314 	movw	r3, #20
    10e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10e8:	697a      	ldr	r2, [r7, #20]
    10ea:	189b      	adds	r3, r3, r2
    10ec:	781b      	ldrb	r3, [r3, #0]
    10ee:	b2db      	uxtb	r3, r3
    10f0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	681a      	ldr	r2, [r3, #0]
    10f6:	68bb      	ldr	r3, [r7, #8]
    10f8:	fa22 f203 	lsr.w	r2, r2, r3
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    1100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1104:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1108:	685b      	ldr	r3, [r3, #4]
    110a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    110e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    1110:	697b      	ldr	r3, [r7, #20]
    1112:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1116:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1118:	f240 0314 	movw	r3, #20
    111c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1120:	697a      	ldr	r2, [r7, #20]
    1122:	189b      	adds	r3, r3, r2
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	b2db      	uxtb	r3, r3
    1128:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	685a      	ldr	r2, [r3, #4]
    112e:	68bb      	ldr	r3, [r7, #8]
    1130:	fa22 f203 	lsr.w	r2, r2, r3
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    1138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    113c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1140:	685b      	ldr	r3, [r3, #4]
    1142:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    1146:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    1148:	697b      	ldr	r3, [r7, #20]
    114a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    114e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1150:	f240 0314 	movw	r3, #20
    1154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1158:	697a      	ldr	r2, [r7, #20]
    115a:	189b      	adds	r3, r3, r2
    115c:	781b      	ldrb	r3, [r3, #0]
    115e:	b2db      	uxtb	r3, r3
    1160:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	685a      	ldr	r2, [r3, #4]
    1166:	68bb      	ldr	r3, [r7, #8]
    1168:	fa22 f203 	lsr.w	r2, r2, r3
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    1170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1174:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1178:	685b      	ldr	r3, [r3, #4]
    117a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    117e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    1180:	697b      	ldr	r3, [r7, #20]
    1182:	ea4f 3393 	mov.w	r3, r3, lsr #14
    1186:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    1188:	f240 0324 	movw	r3, #36	; 0x24
    118c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1190:	697a      	ldr	r2, [r7, #20]
    1192:	189b      	adds	r3, r3, r2
    1194:	781b      	ldrb	r3, [r3, #0]
    1196:	b2db      	uxtb	r3, r3
    1198:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	68da      	ldr	r2, [r3, #12]
    119e:	68bb      	ldr	r3, [r7, #8]
    11a0:	fbb2 f2f3 	udiv	r2, r2, r3
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	611a      	str	r2, [r3, #16]
}
    11a8:	f107 071c 	add.w	r7, r7, #28
    11ac:	46bd      	mov	sp, r7
    11ae:	bc80      	pop	{r7}
    11b0:	4770      	bx	lr
    11b2:	bf00      	nop

000011b4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    11b4:	b480      	push	{r7}
    11b6:	b083      	sub	sp, #12
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
    11bc:	460b      	mov	r3, r1
    11be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    11c0:	78fb      	ldrb	r3, [r7, #3]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d00c      	beq.n	11e0 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    11c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
    11ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    11d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    11d6:	6951      	ldr	r1, [r2, #20]
    11d8:	687a      	ldr	r2, [r7, #4]
    11da:	430a      	orrs	r2, r1
    11dc:	615a      	str	r2, [r3, #20]
    11de:	e00d      	b.n	11fc <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    11e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    11e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    11ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
    11f0:	6951      	ldr	r1, [r2, #20]
    11f2:	687a      	ldr	r2, [r7, #4]
    11f4:	ea6f 0202 	mvn.w	r2, r2
    11f8:	400a      	ands	r2, r1
    11fa:	615a      	str	r2, [r3, #20]
  }
}
    11fc:	f107 070c 	add.w	r7, r7, #12
    1200:	46bd      	mov	sp, r7
    1202:	bc80      	pop	{r7}
    1204:	4770      	bx	lr
    1206:	bf00      	nop

00001208 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1208:	b480      	push	{r7}
    120a:	b083      	sub	sp, #12
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
    1210:	460b      	mov	r3, r1
    1212:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1214:	78fb      	ldrb	r3, [r7, #3]
    1216:	2b00      	cmp	r3, #0
    1218:	d00c      	beq.n	1234 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    121e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1226:	f2c4 0202 	movt	r2, #16386	; 0x4002
    122a:	6991      	ldr	r1, [r2, #24]
    122c:	687a      	ldr	r2, [r7, #4]
    122e:	430a      	orrs	r2, r1
    1230:	619a      	str	r2, [r3, #24]
    1232:	e00d      	b.n	1250 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    1234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1238:	f2c4 0302 	movt	r3, #16386	; 0x4002
    123c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1240:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1244:	6991      	ldr	r1, [r2, #24]
    1246:	687a      	ldr	r2, [r7, #4]
    1248:	ea6f 0202 	mvn.w	r2, r2
    124c:	400a      	ands	r2, r1
    124e:	619a      	str	r2, [r3, #24]
  }
}
    1250:	f107 070c 	add.w	r7, r7, #12
    1254:	46bd      	mov	sp, r7
    1256:	bc80      	pop	{r7}
    1258:	4770      	bx	lr
    125a:	bf00      	nop

0000125c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
    1264:	460b      	mov	r3, r1
    1266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1268:	78fb      	ldrb	r3, [r7, #3]
    126a:	2b00      	cmp	r3, #0
    126c:	d00c      	beq.n	1288 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1272:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    127a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    127e:	69d1      	ldr	r1, [r2, #28]
    1280:	687a      	ldr	r2, [r7, #4]
    1282:	430a      	orrs	r2, r1
    1284:	61da      	str	r2, [r3, #28]
    1286:	e00d      	b.n	12a4 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    1288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    128c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1294:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1298:	69d1      	ldr	r1, [r2, #28]
    129a:	687a      	ldr	r2, [r7, #4]
    129c:	ea6f 0202 	mvn.w	r2, r2
    12a0:	400a      	ands	r2, r1
    12a2:	61da      	str	r2, [r3, #28]
  }
}
    12a4:	f107 070c 	add.w	r7, r7, #12
    12a8:	46bd      	mov	sp, r7
    12aa:	bc80      	pop	{r7}
    12ac:	4770      	bx	lr
    12ae:	bf00      	nop

000012b0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    12b0:	b480      	push	{r7}
    12b2:	b083      	sub	sp, #12
    12b4:	af00      	add	r7, sp, #0
    12b6:	6078      	str	r0, [r7, #4]
    12b8:	460b      	mov	r3, r1
    12ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    12bc:	78fb      	ldrb	r3, [r7, #3]
    12be:	2b00      	cmp	r3, #0
    12c0:	d00c      	beq.n	12dc <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    12c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    12c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    12ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    12ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
    12d2:	68d1      	ldr	r1, [r2, #12]
    12d4:	687a      	ldr	r2, [r7, #4]
    12d6:	430a      	orrs	r2, r1
    12d8:	60da      	str	r2, [r3, #12]
    12da:	e00d      	b.n	12f8 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    12dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    12e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    12e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    12e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    12ec:	68d1      	ldr	r1, [r2, #12]
    12ee:	687a      	ldr	r2, [r7, #4]
    12f0:	ea6f 0202 	mvn.w	r2, r2
    12f4:	400a      	ands	r2, r1
    12f6:	60da      	str	r2, [r3, #12]
  }
}
    12f8:	f107 070c 	add.w	r7, r7, #12
    12fc:	46bd      	mov	sp, r7
    12fe:	bc80      	pop	{r7}
    1300:	4770      	bx	lr
    1302:	bf00      	nop

00001304 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    1304:	b480      	push	{r7}
    1306:	b083      	sub	sp, #12
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
    130c:	460b      	mov	r3, r1
    130e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1310:	78fb      	ldrb	r3, [r7, #3]
    1312:	2b00      	cmp	r3, #0
    1314:	d00c      	beq.n	1330 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    1316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    131e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1322:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1326:	6911      	ldr	r1, [r2, #16]
    1328:	687a      	ldr	r2, [r7, #4]
    132a:	430a      	orrs	r2, r1
    132c:	611a      	str	r2, [r3, #16]
    132e:	e00d      	b.n	134c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    1330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1334:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    133c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1340:	6911      	ldr	r1, [r2, #16]
    1342:	687a      	ldr	r2, [r7, #4]
    1344:	ea6f 0202 	mvn.w	r2, r2
    1348:	400a      	ands	r2, r1
    134a:	611a      	str	r2, [r3, #16]
  }
}
    134c:	f107 070c 	add.w	r7, r7, #12
    1350:	46bd      	mov	sp, r7
    1352:	bc80      	pop	{r7}
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    1358:	b480      	push	{r7}
    135a:	b083      	sub	sp, #12
    135c:	af00      	add	r7, sp, #0
    135e:	4603      	mov	r3, r0
    1360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    1362:	f44f 6388 	mov.w	r3, #1088	; 0x440
    1366:	f2c4 2342 	movt	r3, #16962	; 0x4242
    136a:	79fa      	ldrb	r2, [r7, #7]
    136c:	601a      	str	r2, [r3, #0]
}
    136e:	f107 070c 	add.w	r7, r7, #12
    1372:	46bd      	mov	sp, r7
    1374:	bc80      	pop	{r7}
    1376:	4770      	bx	lr

00001378 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    1378:	b480      	push	{r7}
    137a:	b083      	sub	sp, #12
    137c:	af00      	add	r7, sp, #0
    137e:	4603      	mov	r3, r0
    1380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    1382:	f04f 034c 	mov.w	r3, #76	; 0x4c
    1386:	f2c4 2342 	movt	r3, #16962	; 0x4242
    138a:	79fa      	ldrb	r2, [r7, #7]
    138c:	601a      	str	r2, [r3, #0]
}
    138e:	f107 070c 	add.w	r7, r7, #12
    1392:	46bd      	mov	sp, r7
    1394:	bc80      	pop	{r7}
    1396:	4770      	bx	lr

00001398 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1398:	b480      	push	{r7}
    139a:	b083      	sub	sp, #12
    139c:	af00      	add	r7, sp, #0
    139e:	4603      	mov	r3, r0
    13a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    13a2:	f241 0307 	movw	r3, #4103	; 0x1007
    13a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    13aa:	79fa      	ldrb	r2, [r7, #7]
    13ac:	701a      	strb	r2, [r3, #0]
}
    13ae:	f107 070c 	add.w	r7, r7, #12
    13b2:	46bd      	mov	sp, r7
    13b4:	bc80      	pop	{r7}
    13b6:	4770      	bx	lr

000013b8 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    13b8:	b480      	push	{r7}
    13ba:	b087      	sub	sp, #28
    13bc:	af00      	add	r7, sp, #0
    13be:	4603      	mov	r3, r0
    13c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    13c2:	f04f 0300 	mov.w	r3, #0
    13c6:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    13c8:	f04f 0300 	mov.w	r3, #0
    13cc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    13ce:	f04f 0300 	mov.w	r3, #0
    13d2:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    13d4:	79fb      	ldrb	r3, [r7, #7]
    13d6:	ea4f 1353 	mov.w	r3, r3, lsr #5
    13da:	b2db      	uxtb	r3, r3
    13dc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	2b01      	cmp	r3, #1
    13e2:	d106      	bne.n	13f2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    13e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    13e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    13ec:	681b      	ldr	r3, [r3, #0]
    13ee:	617b      	str	r3, [r7, #20]
    13f0:	e00f      	b.n	1412 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    13f2:	68fb      	ldr	r3, [r7, #12]
    13f4:	2b02      	cmp	r3, #2
    13f6:	d106      	bne.n	1406 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    13f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    13fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1400:	6a1b      	ldr	r3, [r3, #32]
    1402:	617b      	str	r3, [r7, #20]
    1404:	e005      	b.n	1412 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    140a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1410:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    1412:	79fb      	ldrb	r3, [r7, #7]
    1414:	f003 031f 	and.w	r3, r3, #31
    1418:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	697a      	ldr	r2, [r7, #20]
    141e:	fa22 f303 	lsr.w	r3, r2, r3
    1422:	f003 0301 	and.w	r3, r3, #1
    1426:	b2db      	uxtb	r3, r3
    1428:	2b00      	cmp	r3, #0
    142a:	d003      	beq.n	1434 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    142c:	f04f 0301 	mov.w	r3, #1
    1430:	74fb      	strb	r3, [r7, #19]
    1432:	e002      	b.n	143a <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    1434:	f04f 0300 	mov.w	r3, #0
    1438:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    143a:	7cfb      	ldrb	r3, [r7, #19]
}
    143c:	4618      	mov	r0, r3
    143e:	f107 071c 	add.w	r7, r7, #28
    1442:	46bd      	mov	sp, r7
    1444:	bc80      	pop	{r7}
    1446:	4770      	bx	lr

00001448 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1448:	b480      	push	{r7}
    144a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1450:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1458:	f2c4 0202 	movt	r2, #16386	; 0x4002
    145c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    145e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1462:	625a      	str	r2, [r3, #36]	; 0x24
}
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    146c:	b480      	push	{r7}
    146e:	b085      	sub	sp, #20
    1470:	af00      	add	r7, sp, #0
    1472:	4603      	mov	r3, r0
    1474:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1476:	f04f 0300 	mov.w	r3, #0
    147a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1480:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1484:	689a      	ldr	r2, [r3, #8]
    1486:	79fb      	ldrb	r3, [r7, #7]
    1488:	4013      	ands	r3, r2
    148a:	2b00      	cmp	r3, #0
    148c:	d003      	beq.n	1496 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    148e:	f04f 0301 	mov.w	r3, #1
    1492:	73fb      	strb	r3, [r7, #15]
    1494:	e002      	b.n	149c <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1496:	f04f 0300 	mov.w	r3, #0
    149a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    149c:	7bfb      	ldrb	r3, [r7, #15]
}
    149e:	4618      	mov	r0, r3
    14a0:	f107 0714 	add.w	r7, r7, #20
    14a4:	46bd      	mov	sp, r7
    14a6:	bc80      	pop	{r7}
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop

000014ac <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    14ac:	b480      	push	{r7}
    14ae:	b083      	sub	sp, #12
    14b0:	af00      	add	r7, sp, #0
    14b2:	4603      	mov	r3, r0
    14b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    14b6:	f241 030a 	movw	r3, #4106	; 0x100a
    14ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
    14be:	79fa      	ldrb	r2, [r7, #7]
    14c0:	701a      	strb	r2, [r3, #0]
}
    14c2:	f107 070c 	add.w	r7, r7, #12
    14c6:	46bd      	mov	sp, r7
    14c8:	bc80      	pop	{r7}
    14ca:	4770      	bx	lr

000014cc <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b082      	sub	sp, #8
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    14d4:	687a      	ldr	r2, [r7, #4]
    14d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    14da:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14de:	429a      	cmp	r2, r3
    14e0:	d10c      	bne.n	14fc <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    14e2:	f04f 0004 	mov.w	r0, #4
    14e6:	f04f 0101 	mov.w	r1, #1
    14ea:	f7ff fee1 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    14ee:	f04f 0004 	mov.w	r0, #4
    14f2:	f04f 0100 	mov.w	r1, #0
    14f6:	f7ff fedb 	bl	12b0 <RCC_APB2PeriphResetCmd>
    14fa:	e076      	b.n	15ea <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    14fc:	687a      	ldr	r2, [r7, #4]
    14fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    1502:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1506:	429a      	cmp	r2, r3
    1508:	d10c      	bne.n	1524 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    150a:	f04f 0008 	mov.w	r0, #8
    150e:	f04f 0101 	mov.w	r1, #1
    1512:	f7ff fecd 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1516:	f04f 0008 	mov.w	r0, #8
    151a:	f04f 0100 	mov.w	r1, #0
    151e:	f7ff fec7 	bl	12b0 <RCC_APB2PeriphResetCmd>
    1522:	e062      	b.n	15ea <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    1524:	687a      	ldr	r2, [r7, #4]
    1526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    152a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    152e:	429a      	cmp	r2, r3
    1530:	d10c      	bne.n	154c <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1532:	f04f 0010 	mov.w	r0, #16
    1536:	f04f 0101 	mov.w	r1, #1
    153a:	f7ff feb9 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    153e:	f04f 0010 	mov.w	r0, #16
    1542:	f04f 0100 	mov.w	r1, #0
    1546:	f7ff feb3 	bl	12b0 <RCC_APB2PeriphResetCmd>
    154a:	e04e      	b.n	15ea <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    154c:	687a      	ldr	r2, [r7, #4]
    154e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1552:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1556:	429a      	cmp	r2, r3
    1558:	d10c      	bne.n	1574 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    155a:	f04f 0020 	mov.w	r0, #32
    155e:	f04f 0101 	mov.w	r1, #1
    1562:	f7ff fea5 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    1566:	f04f 0020 	mov.w	r0, #32
    156a:	f04f 0100 	mov.w	r1, #0
    156e:	f7ff fe9f 	bl	12b0 <RCC_APB2PeriphResetCmd>
    1572:	e03a      	b.n	15ea <GPIO_DeInit+0x11e>
  }    
  else if (GPIOx == GPIOE)
    1574:	687a      	ldr	r2, [r7, #4]
    1576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    157a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    157e:	429a      	cmp	r2, r3
    1580:	d10c      	bne.n	159c <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1582:	f04f 0040 	mov.w	r0, #64	; 0x40
    1586:	f04f 0101 	mov.w	r1, #1
    158a:	f7ff fe91 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    158e:	f04f 0040 	mov.w	r0, #64	; 0x40
    1592:	f04f 0100 	mov.w	r1, #0
    1596:	f7ff fe8b 	bl	12b0 <RCC_APB2PeriphResetCmd>
    159a:	e026      	b.n	15ea <GPIO_DeInit+0x11e>
  } 
  else if (GPIOx == GPIOF)
    159c:	687a      	ldr	r2, [r7, #4]
    159e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    15a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    15aa:	f04f 0080 	mov.w	r0, #128	; 0x80
    15ae:	f04f 0101 	mov.w	r1, #1
    15b2:	f7ff fe7d 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    15b6:	f04f 0080 	mov.w	r0, #128	; 0x80
    15ba:	f04f 0100 	mov.w	r1, #0
    15be:	f7ff fe77 	bl	12b0 <RCC_APB2PeriphResetCmd>
    15c2:	e012      	b.n	15ea <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    15ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15ce:	429a      	cmp	r2, r3
    15d0:	d10b      	bne.n	15ea <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    15d2:	f44f 7080 	mov.w	r0, #256	; 0x100
    15d6:	f04f 0101 	mov.w	r1, #1
    15da:	f7ff fe69 	bl	12b0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    15de:	f44f 7080 	mov.w	r0, #256	; 0x100
    15e2:	f04f 0100 	mov.w	r1, #0
    15e6:	f7ff fe63 	bl	12b0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    15ea:	f107 0708 	add.w	r7, r7, #8
    15ee:	46bd      	mov	sp, r7
    15f0:	bd80      	pop	{r7, pc}
    15f2:	bf00      	nop

000015f4 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    15f8:	f04f 0001 	mov.w	r0, #1
    15fc:	f04f 0101 	mov.w	r1, #1
    1600:	f7ff fe56 	bl	12b0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1604:	f04f 0001 	mov.w	r0, #1
    1608:	f04f 0100 	mov.w	r1, #0
    160c:	f7ff fe50 	bl	12b0 <RCC_APB2PeriphResetCmd>
}
    1610:	bd80      	pop	{r7, pc}
    1612:	bf00      	nop

00001614 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1614:	b480      	push	{r7}
    1616:	b089      	sub	sp, #36	; 0x24
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
    161c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    161e:	f04f 0300 	mov.w	r3, #0
    1622:	61fb      	str	r3, [r7, #28]
    1624:	f04f 0300 	mov.w	r3, #0
    1628:	613b      	str	r3, [r7, #16]
    162a:	f04f 0300 	mov.w	r3, #0
    162e:	61bb      	str	r3, [r7, #24]
    1630:	f04f 0300 	mov.w	r3, #0
    1634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1636:	f04f 0300 	mov.w	r3, #0
    163a:	617b      	str	r3, [r7, #20]
    163c:	f04f 0300 	mov.w	r3, #0
    1640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	78db      	ldrb	r3, [r3, #3]
    1646:	f003 030f 	and.w	r3, r3, #15
    164a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    164c:	683b      	ldr	r3, [r7, #0]
    164e:	78db      	ldrb	r3, [r3, #3]
    1650:	f003 0310 	and.w	r3, r3, #16
    1654:	2b00      	cmp	r3, #0
    1656:	d004      	beq.n	1662 <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    1658:	683b      	ldr	r3, [r7, #0]
    165a:	789b      	ldrb	r3, [r3, #2]
    165c:	69fa      	ldr	r2, [r7, #28]
    165e:	4313      	orrs	r3, r2
    1660:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1662:	683b      	ldr	r3, [r7, #0]
    1664:	881b      	ldrh	r3, [r3, #0]
    1666:	b2db      	uxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	d04e      	beq.n	170a <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	681b      	ldr	r3, [r3, #0]
    1670:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1672:	f04f 0300 	mov.w	r3, #0
    1676:	61bb      	str	r3, [r7, #24]
    1678:	e041      	b.n	16fe <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    167a:	69bb      	ldr	r3, [r7, #24]
    167c:	f04f 0201 	mov.w	r2, #1
    1680:	fa02 f303 	lsl.w	r3, r2, r3
    1684:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	881b      	ldrh	r3, [r3, #0]
    168a:	461a      	mov	r2, r3
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	4013      	ands	r3, r2
    1690:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1692:	693a      	ldr	r2, [r7, #16]
    1694:	68fb      	ldr	r3, [r7, #12]
    1696:	429a      	cmp	r2, r3
    1698:	d12d      	bne.n	16f6 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    169a:	69bb      	ldr	r3, [r7, #24]
    169c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    16a0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    16a2:	68fb      	ldr	r3, [r7, #12]
    16a4:	f04f 020f 	mov.w	r2, #15
    16a8:	fa02 f303 	lsl.w	r3, r2, r3
    16ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    16ae:	68bb      	ldr	r3, [r7, #8]
    16b0:	ea6f 0303 	mvn.w	r3, r3
    16b4:	697a      	ldr	r2, [r7, #20]
    16b6:	4013      	ands	r3, r2
    16b8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    16ba:	68fb      	ldr	r3, [r7, #12]
    16bc:	69fa      	ldr	r2, [r7, #28]
    16be:	fa02 f303 	lsl.w	r3, r2, r3
    16c2:	697a      	ldr	r2, [r7, #20]
    16c4:	4313      	orrs	r3, r2
    16c6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    16c8:	683b      	ldr	r3, [r7, #0]
    16ca:	78db      	ldrb	r3, [r3, #3]
    16cc:	2b28      	cmp	r3, #40	; 0x28
    16ce:	d107      	bne.n	16e0 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    16d0:	69bb      	ldr	r3, [r7, #24]
    16d2:	f04f 0201 	mov.w	r2, #1
    16d6:	fa02 f203 	lsl.w	r2, r2, r3
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	615a      	str	r2, [r3, #20]
    16de:	e00a      	b.n	16f6 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    16e0:	683b      	ldr	r3, [r7, #0]
    16e2:	78db      	ldrb	r3, [r3, #3]
    16e4:	2b48      	cmp	r3, #72	; 0x48
    16e6:	d106      	bne.n	16f6 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    16e8:	69bb      	ldr	r3, [r7, #24]
    16ea:	f04f 0201 	mov.w	r2, #1
    16ee:	fa02 f203 	lsl.w	r2, r2, r3
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    16f6:	69bb      	ldr	r3, [r7, #24]
    16f8:	f103 0301 	add.w	r3, r3, #1
    16fc:	61bb      	str	r3, [r7, #24]
    16fe:	69bb      	ldr	r3, [r7, #24]
    1700:	2b07      	cmp	r3, #7
    1702:	d9ba      	bls.n	167a <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	697a      	ldr	r2, [r7, #20]
    1708:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    170a:	683b      	ldr	r3, [r7, #0]
    170c:	881b      	ldrh	r3, [r3, #0]
    170e:	2bff      	cmp	r3, #255	; 0xff
    1710:	d953      	bls.n	17ba <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	685b      	ldr	r3, [r3, #4]
    1716:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1718:	f04f 0300 	mov.w	r3, #0
    171c:	61bb      	str	r3, [r7, #24]
    171e:	e046      	b.n	17ae <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1720:	69bb      	ldr	r3, [r7, #24]
    1722:	f103 0308 	add.w	r3, r3, #8
    1726:	f04f 0201 	mov.w	r2, #1
    172a:	fa02 f303 	lsl.w	r3, r2, r3
    172e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	461a      	mov	r2, r3
    1736:	68fb      	ldr	r3, [r7, #12]
    1738:	4013      	ands	r3, r2
    173a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    173c:	693a      	ldr	r2, [r7, #16]
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	429a      	cmp	r2, r3
    1742:	d130      	bne.n	17a6 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    1744:	69bb      	ldr	r3, [r7, #24]
    1746:	ea4f 0383 	mov.w	r3, r3, lsl #2
    174a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	f04f 020f 	mov.w	r2, #15
    1752:	fa02 f303 	lsl.w	r3, r2, r3
    1756:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1758:	68bb      	ldr	r3, [r7, #8]
    175a:	ea6f 0303 	mvn.w	r3, r3
    175e:	697a      	ldr	r2, [r7, #20]
    1760:	4013      	ands	r3, r2
    1762:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	69fa      	ldr	r2, [r7, #28]
    1768:	fa02 f303 	lsl.w	r3, r2, r3
    176c:	697a      	ldr	r2, [r7, #20]
    176e:	4313      	orrs	r3, r2
    1770:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1772:	683b      	ldr	r3, [r7, #0]
    1774:	78db      	ldrb	r3, [r3, #3]
    1776:	2b28      	cmp	r3, #40	; 0x28
    1778:	d108      	bne.n	178c <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    177a:	69bb      	ldr	r3, [r7, #24]
    177c:	f103 0308 	add.w	r3, r3, #8
    1780:	f04f 0201 	mov.w	r2, #1
    1784:	fa02 f203 	lsl.w	r2, r2, r3
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    178c:	683b      	ldr	r3, [r7, #0]
    178e:	78db      	ldrb	r3, [r3, #3]
    1790:	2b48      	cmp	r3, #72	; 0x48
    1792:	d108      	bne.n	17a6 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1794:	69bb      	ldr	r3, [r7, #24]
    1796:	f103 0308 	add.w	r3, r3, #8
    179a:	f04f 0201 	mov.w	r2, #1
    179e:	fa02 f203 	lsl.w	r2, r2, r3
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17a6:	69bb      	ldr	r3, [r7, #24]
    17a8:	f103 0301 	add.w	r3, r3, #1
    17ac:	61bb      	str	r3, [r7, #24]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	2b07      	cmp	r3, #7
    17b2:	d9b5      	bls.n	1720 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	697a      	ldr	r2, [r7, #20]
    17b8:	605a      	str	r2, [r3, #4]
  }
}
    17ba:	f107 0724 	add.w	r7, r7, #36	; 0x24
    17be:	46bd      	mov	sp, r7
    17c0:	bc80      	pop	{r7}
    17c2:	4770      	bx	lr

000017c4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    17c4:	b480      	push	{r7}
    17c6:	b083      	sub	sp, #12
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17d2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	f04f 0202 	mov.w	r2, #2
    17da:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	f04f 0204 	mov.w	r2, #4
    17e2:	70da      	strb	r2, [r3, #3]
}
    17e4:	f107 070c 	add.w	r7, r7, #12
    17e8:	46bd      	mov	sp, r7
    17ea:	bc80      	pop	{r7}
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop

000017f0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    17f0:	b480      	push	{r7}
    17f2:	b085      	sub	sp, #20
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    17f8:	460b      	mov	r3, r1
    17fa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    17fc:	f04f 0300 	mov.w	r3, #0
    1800:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	689a      	ldr	r2, [r3, #8]
    1806:	887b      	ldrh	r3, [r7, #2]
    1808:	4013      	ands	r3, r2
    180a:	2b00      	cmp	r3, #0
    180c:	d003      	beq.n	1816 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    180e:	f04f 0301 	mov.w	r3, #1
    1812:	73fb      	strb	r3, [r7, #15]
    1814:	e002      	b.n	181c <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1816:	f04f 0300 	mov.w	r3, #0
    181a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    181c:	7bfb      	ldrb	r3, [r7, #15]
}
    181e:	4618      	mov	r0, r3
    1820:	f107 0714 	add.w	r7, r7, #20
    1824:	46bd      	mov	sp, r7
    1826:	bc80      	pop	{r7}
    1828:	4770      	bx	lr
    182a:	bf00      	nop

0000182c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    182c:	b480      	push	{r7}
    182e:	b083      	sub	sp, #12
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	689b      	ldr	r3, [r3, #8]
    1838:	b29b      	uxth	r3, r3
}
    183a:	4618      	mov	r0, r3
    183c:	f107 070c 	add.w	r7, r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	bc80      	pop	{r7}
    1844:	4770      	bx	lr
    1846:	bf00      	nop

00001848 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1848:	b480      	push	{r7}
    184a:	b085      	sub	sp, #20
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
    1850:	460b      	mov	r3, r1
    1852:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1854:	f04f 0300 	mov.w	r3, #0
    1858:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	68da      	ldr	r2, [r3, #12]
    185e:	887b      	ldrh	r3, [r7, #2]
    1860:	4013      	ands	r3, r2
    1862:	2b00      	cmp	r3, #0
    1864:	d003      	beq.n	186e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    1866:	f04f 0301 	mov.w	r3, #1
    186a:	73fb      	strb	r3, [r7, #15]
    186c:	e002      	b.n	1874 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    186e:	f04f 0300 	mov.w	r3, #0
    1872:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1874:	7bfb      	ldrb	r3, [r7, #15]
}
    1876:	4618      	mov	r0, r3
    1878:	f107 0714 	add.w	r7, r7, #20
    187c:	46bd      	mov	sp, r7
    187e:	bc80      	pop	{r7}
    1880:	4770      	bx	lr
    1882:	bf00      	nop

00001884 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1884:	b480      	push	{r7}
    1886:	b083      	sub	sp, #12
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	68db      	ldr	r3, [r3, #12]
    1890:	b29b      	uxth	r3, r3
}
    1892:	4618      	mov	r0, r3
    1894:	f107 070c 	add.w	r7, r7, #12
    1898:	46bd      	mov	sp, r7
    189a:	bc80      	pop	{r7}
    189c:	4770      	bx	lr
    189e:	bf00      	nop

000018a0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a0:	b480      	push	{r7}
    18a2:	b083      	sub	sp, #12
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
    18a8:	460b      	mov	r3, r1
    18aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    18ac:	887a      	ldrh	r2, [r7, #2]
    18ae:	687b      	ldr	r3, [r7, #4]
    18b0:	611a      	str	r2, [r3, #16]
}
    18b2:	f107 070c 	add.w	r7, r7, #12
    18b6:	46bd      	mov	sp, r7
    18b8:	bc80      	pop	{r7}
    18ba:	4770      	bx	lr

000018bc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
    18c4:	460b      	mov	r3, r1
    18c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    18c8:	887a      	ldrh	r2, [r7, #2]
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	615a      	str	r2, [r3, #20]
}
    18ce:	f107 070c 	add.w	r7, r7, #12
    18d2:	46bd      	mov	sp, r7
    18d4:	bc80      	pop	{r7}
    18d6:	4770      	bx	lr

000018d8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    18d8:	b480      	push	{r7}
    18da:	b083      	sub	sp, #12
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
    18e0:	4613      	mov	r3, r2
    18e2:	460a      	mov	r2, r1
    18e4:	807a      	strh	r2, [r7, #2]
    18e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    18e8:	787b      	ldrb	r3, [r7, #1]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d003      	beq.n	18f6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    18ee:	887a      	ldrh	r2, [r7, #2]
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	611a      	str	r2, [r3, #16]
    18f4:	e002      	b.n	18fc <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    18f6:	887a      	ldrh	r2, [r7, #2]
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	615a      	str	r2, [r3, #20]
  }
}
    18fc:	f107 070c 	add.w	r7, r7, #12
    1900:	46bd      	mov	sp, r7
    1902:	bc80      	pop	{r7}
    1904:	4770      	bx	lr
    1906:	bf00      	nop

00001908 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1908:	b480      	push	{r7}
    190a:	b083      	sub	sp, #12
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
    1910:	460b      	mov	r3, r1
    1912:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1914:	887a      	ldrh	r2, [r7, #2]
    1916:	687b      	ldr	r3, [r7, #4]
    1918:	60da      	str	r2, [r3, #12]
}
    191a:	f107 070c 	add.w	r7, r7, #12
    191e:	46bd      	mov	sp, r7
    1920:	bc80      	pop	{r7}
    1922:	4770      	bx	lr

00001924 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1924:	b480      	push	{r7}
    1926:	b085      	sub	sp, #20
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
    192c:	460b      	mov	r3, r1
    192e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1934:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1936:	887b      	ldrh	r3, [r7, #2]
    1938:	68fa      	ldr	r2, [r7, #12]
    193a:	4313      	orrs	r3, r2
    193c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	68fa      	ldr	r2, [r7, #12]
    1942:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1944:	887a      	ldrh	r2, [r7, #2]
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	68fa      	ldr	r2, [r7, #12]
    194e:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	699b      	ldr	r3, [r3, #24]
    1954:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	699b      	ldr	r3, [r3, #24]
    195a:	60fb      	str	r3, [r7, #12]
}
    195c:	f107 0714 	add.w	r7, r7, #20
    1960:	46bd      	mov	sp, r7
    1962:	bc80      	pop	{r7}
    1964:	4770      	bx	lr
    1966:	bf00      	nop

00001968 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1968:	b480      	push	{r7}
    196a:	b085      	sub	sp, #20
    196c:	af00      	add	r7, sp, #0
    196e:	4602      	mov	r2, r0
    1970:	460b      	mov	r3, r1
    1972:	71fa      	strb	r2, [r7, #7]
    1974:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1976:	f04f 0300 	mov.w	r3, #0
    197a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    197c:	f04f 0300 	mov.w	r3, #0
    1980:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1988:	68fa      	ldr	r2, [r7, #12]
    198a:	f64f 7380 	movw	r3, #65408	; 0xff80
    198e:	4013      	ands	r3, r2
    1990:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1992:	79fb      	ldrb	r3, [r7, #7]
    1994:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1998:	68fa      	ldr	r2, [r7, #12]
    199a:	4313      	orrs	r3, r2
    199c:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    199e:	79bb      	ldrb	r3, [r7, #6]
    19a0:	68fa      	ldr	r2, [r7, #12]
    19a2:	4313      	orrs	r3, r2
    19a4:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    19a6:	f04f 0300 	mov.w	r3, #0
    19aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19ae:	68fa      	ldr	r2, [r7, #12]
    19b0:	601a      	str	r2, [r3, #0]
}
    19b2:	f107 0714 	add.w	r7, r7, #20
    19b6:	46bd      	mov	sp, r7
    19b8:	bc80      	pop	{r7}
    19ba:	4770      	bx	lr

000019bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	4603      	mov	r3, r0
    19c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    19c6:	f04f 031c 	mov.w	r3, #28
    19ca:	f2c4 2320 	movt	r3, #16928	; 0x4220
    19ce:	79fa      	ldrb	r2, [r7, #7]
    19d0:	601a      	str	r2, [r3, #0]
}
    19d2:	f107 070c 	add.w	r7, r7, #12
    19d6:	46bd      	mov	sp, r7
    19d8:	bc80      	pop	{r7}
    19da:	4770      	bx	lr

000019dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    19dc:	b480      	push	{r7}
    19de:	b087      	sub	sp, #28
    19e0:	af00      	add	r7, sp, #0
    19e2:	6078      	str	r0, [r7, #4]
    19e4:	460b      	mov	r3, r1
    19e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    19e8:	f04f 0300 	mov.w	r3, #0
    19ec:	613b      	str	r3, [r7, #16]
    19ee:	f04f 0300 	mov.w	r3, #0
    19f2:	60fb      	str	r3, [r7, #12]
    19f4:	f04f 0300 	mov.w	r3, #0
    19f8:	617b      	str	r3, [r7, #20]
    19fa:	f04f 0300 	mov.w	r3, #0
    19fe:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	2b00      	cmp	r3, #0
    1a04:	da06      	bge.n	1a14 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1a06:	f04f 0300 	mov.w	r3, #0
    1a0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1a0e:	69db      	ldr	r3, [r3, #28]
    1a10:	617b      	str	r3, [r7, #20]
    1a12:	e005      	b.n	1a20 <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1a14:	f04f 0300 	mov.w	r3, #0
    1a18:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1a1c:	685b      	ldr	r3, [r3, #4]
    1a1e:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1a26:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1a2a:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1a32:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1a36:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1a42:	d110      	bne.n	1a66 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1a44:	697b      	ldr	r3, [r7, #20]
    1a46:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1a4a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1a4c:	f04f 0300 	mov.w	r3, #0
    1a50:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1a54:	f04f 0200 	mov.w	r2, #0
    1a58:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1a5c:	6852      	ldr	r2, [r2, #4]
    1a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    1a62:	605a      	str	r2, [r3, #4]
    1a64:	e026      	b.n	1ab4 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d010      	beq.n	1a92 <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1a70:	68bb      	ldr	r3, [r7, #8]
    1a72:	f04f 0203 	mov.w	r2, #3
    1a76:	fa02 f303 	lsl.w	r3, r2, r3
    1a7a:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	ea6f 0303 	mvn.w	r3, r3
    1a82:	697a      	ldr	r2, [r7, #20]
    1a84:	4013      	ands	r3, r2
    1a86:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1a88:	697b      	ldr	r3, [r7, #20]
    1a8a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1a8e:	617b      	str	r3, [r7, #20]
    1a90:	e010      	b.n	1ab4 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a9c:	693a      	ldr	r2, [r7, #16]
    1a9e:	fa02 f303 	lsl.w	r3, r2, r3
    1aa2:	ea6f 0303 	mvn.w	r3, r3
    1aa6:	697a      	ldr	r2, [r7, #20]
    1aa8:	4013      	ands	r3, r2
    1aaa:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1aac:	697b      	ldr	r3, [r7, #20]
    1aae:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1ab2:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1ab4:	78fb      	ldrb	r3, [r7, #3]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d00a      	beq.n	1ad0 <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1ac0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1ac4:	693a      	ldr	r2, [r7, #16]
    1ac6:	fa02 f303 	lsl.w	r3, r2, r3
    1aca:	697a      	ldr	r2, [r7, #20]
    1acc:	4313      	orrs	r3, r2
    1ace:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	da06      	bge.n	1ae4 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    1ad6:	f04f 0300 	mov.w	r3, #0
    1ada:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ade:	697a      	ldr	r2, [r7, #20]
    1ae0:	61da      	str	r2, [r3, #28]
    1ae2:	e005      	b.n	1af0 <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    1ae4:	f04f 0300 	mov.w	r3, #0
    1ae8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1aec:	697a      	ldr	r2, [r7, #20]
    1aee:	605a      	str	r2, [r3, #4]
  }  
}
    1af0:	f107 071c 	add.w	r7, r7, #28
    1af4:	46bd      	mov	sp, r7
    1af6:	bc80      	pop	{r7}
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1afc:	b490      	push	{r4, r7}
    1afe:	b084      	sub	sp, #16
    1b00:	af00      	add	r7, sp, #0
    1b02:	4602      	mov	r2, r0
    1b04:	460b      	mov	r3, r1
    1b06:	71fa      	strb	r2, [r7, #7]
    1b08:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b0a:	f04f 0300 	mov.w	r3, #0
    1b0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b10:	79bb      	ldrb	r3, [r7, #6]
    1b12:	f003 0303 	and.w	r3, r3, #3
    1b16:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b1a:	f04f 020f 	mov.w	r2, #15
    1b1e:	fa02 f303 	lsl.w	r3, r2, r3
    1b22:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1b24:	f04f 0300 	mov.w	r3, #0
    1b28:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b2c:	79ba      	ldrb	r2, [r7, #6]
    1b2e:	ea4f 0292 	mov.w	r2, r2, lsr #2
    1b32:	b2d2      	uxtb	r2, r2
    1b34:	4610      	mov	r0, r2
    1b36:	f04f 0200 	mov.w	r2, #0
    1b3a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b3e:	79b9      	ldrb	r1, [r7, #6]
    1b40:	ea4f 0191 	mov.w	r1, r1, lsr #2
    1b44:	b2c9      	uxtb	r1, r1
    1b46:	f101 0102 	add.w	r1, r1, #2
    1b4a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	ea6f 0202 	mvn.w	r2, r2
    1b54:	4011      	ands	r1, r2
    1b56:	f100 0202 	add.w	r2, r0, #2
    1b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1b5e:	f04f 0300 	mov.w	r3, #0
    1b62:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b66:	79ba      	ldrb	r2, [r7, #6]
    1b68:	ea4f 0292 	mov.w	r2, r2, lsr #2
    1b6c:	b2d2      	uxtb	r2, r2
    1b6e:	4610      	mov	r0, r2
    1b70:	f04f 0200 	mov.w	r2, #0
    1b74:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1b78:	79b9      	ldrb	r1, [r7, #6]
    1b7a:	ea4f 0191 	mov.w	r1, r1, lsr #2
    1b7e:	b2c9      	uxtb	r1, r1
    1b80:	f101 0102 	add.w	r1, r1, #2
    1b84:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1b88:	79fc      	ldrb	r4, [r7, #7]
    1b8a:	79ba      	ldrb	r2, [r7, #6]
    1b8c:	f002 0203 	and.w	r2, r2, #3
    1b90:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1b94:	fa04 f202 	lsl.w	r2, r4, r2
    1b98:	4311      	orrs	r1, r2
    1b9a:	f100 0202 	add.w	r2, r0, #2
    1b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1ba2:	f107 0710 	add.w	r7, r7, #16
    1ba6:	46bd      	mov	sp, r7
    1ba8:	bc90      	pop	{r4, r7}
    1baa:	4770      	bx	lr

00001bac <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    1bac:	b480      	push	{r7}
    1bae:	b083      	sub	sp, #12
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    1bb4:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    1bb8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1bbc:	687a      	ldr	r2, [r7, #4]
    1bbe:	601a      	str	r2, [r3, #0]
}
    1bc0:	f107 070c 	add.w	r7, r7, #12
    1bc4:	46bd      	mov	sp, r7
    1bc6:	bc80      	pop	{r7}
    1bc8:	4770      	bx	lr
    1bca:	bf00      	nop

00001bcc <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b082      	sub	sp, #8
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1bd4:	687a      	ldr	r2, [r7, #4]
    1bd6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1bda:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1bde:	429a      	cmp	r2, r3
    1be0:	d10c      	bne.n	1bfc <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    1be2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1be6:	f04f 0101 	mov.w	r1, #1
    1bea:	f7ff fb61 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1bee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1bf2:	f04f 0100 	mov.w	r1, #0
    1bf6:	f7ff fb5b 	bl	12b0 <RCC_APB2PeriphResetCmd>
    1bfa:	e04e      	b.n	1c9a <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    1bfc:	687a      	ldr	r2, [r7, #4]
    1bfe:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    1c02:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c06:	429a      	cmp	r2, r3
    1c08:	d10c      	bne.n	1c24 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1c0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1c0e:	f04f 0101 	mov.w	r1, #1
    1c12:	f7ff fb77 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1c16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1c1a:	f04f 0100 	mov.w	r1, #0
    1c1e:	f7ff fb71 	bl	1304 <RCC_APB1PeriphResetCmd>
    1c22:	e03a      	b.n	1c9a <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    1c24:	687a      	ldr	r2, [r7, #4]
    1c26:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    1c2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c2e:	429a      	cmp	r2, r3
    1c30:	d10c      	bne.n	1c4c <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    1c32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1c36:	f04f 0101 	mov.w	r1, #1
    1c3a:	f7ff fb63 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    1c3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1c42:	f04f 0100 	mov.w	r1, #0
    1c46:	f7ff fb5d 	bl	1304 <RCC_APB1PeriphResetCmd>
    1c4a:	e026      	b.n	1c9a <USART_DeInit+0xce>
  }    
  else if (USARTx == UART4)
    1c4c:	687a      	ldr	r2, [r7, #4]
    1c4e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    1c52:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c56:	429a      	cmp	r2, r3
    1c58:	d10c      	bne.n	1c74 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    1c5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1c5e:	f04f 0101 	mov.w	r1, #1
    1c62:	f7ff fb4f 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1c66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1c6a:	f04f 0100 	mov.w	r1, #0
    1c6e:	f7ff fb49 	bl	1304 <RCC_APB1PeriphResetCmd>
    1c72:	e012      	b.n	1c9a <USART_DeInit+0xce>
  }    
  else
  {
    if (USARTx == UART5)
    1c74:	687a      	ldr	r2, [r7, #4]
    1c76:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1c7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1c7e:	429a      	cmp	r2, r3
    1c80:	d10b      	bne.n	1c9a <USART_DeInit+0xce>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    1c82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1c86:	f04f 0101 	mov.w	r1, #1
    1c8a:	f7ff fb3b 	bl	1304 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1c8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1c92:	f04f 0100 	mov.w	r1, #0
    1c96:	f7ff fb35 	bl	1304 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1c9a:	f107 0708 	add.w	r7, r7, #8
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	bf00      	nop

00001ca4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	b08c      	sub	sp, #48	; 0x30
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
    1cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1cae:	f04f 0300 	mov.w	r3, #0
    1cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    1cb4:	f04f 0300 	mov.w	r3, #0
    1cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1cba:	f04f 0300 	mov.w	r3, #0
    1cbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    1cc0:	f04f 0300 	mov.w	r3, #0
    1cc4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1cc6:	f04f 0300 	mov.w	r3, #0
    1cca:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	8a1b      	ldrh	r3, [r3, #16]
    1cd4:	b29b      	uxth	r3, r3
    1cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1cda:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1cde:	4013      	ands	r3, r2
    1ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    1ce2:	683b      	ldr	r3, [r7, #0]
    1ce4:	88db      	ldrh	r3, [r3, #6]
    1ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ce8:	4313      	orrs	r3, r2
    1cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cee:	b29a      	uxth	r2, r3
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	899b      	ldrh	r3, [r3, #12]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1cfe:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    1d02:	4013      	ands	r3, r2
    1d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1d06:	683b      	ldr	r3, [r7, #0]
    1d08:	889a      	ldrh	r2, [r3, #4]
    1d0a:	683b      	ldr	r3, [r7, #0]
    1d0c:	891b      	ldrh	r3, [r3, #8]
    1d0e:	4313      	orrs	r3, r2
    1d10:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    1d12:	683b      	ldr	r3, [r7, #0]
    1d14:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1d16:	4313      	orrs	r3, r2
    1d18:	b29b      	uxth	r3, r3
    1d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d1c:	4313      	orrs	r3, r2
    1d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    1d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d22:	b29a      	uxth	r2, r3
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	8a9b      	ldrh	r3, [r3, #20]
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    1d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d32:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    1d36:	4013      	ands	r3, r2
    1d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    1d3a:	683b      	ldr	r3, [r7, #0]
    1d3c:	899b      	ldrh	r3, [r3, #12]
    1d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1d40:	4313      	orrs	r3, r2
    1d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    1d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d46:	b29a      	uxth	r2, r3
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    1d4c:	f107 0308 	add.w	r3, r7, #8
    1d50:	4618      	mov	r0, r3
    1d52:	f7ff f945 	bl	fe0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    1d56:	69fa      	ldr	r2, [r7, #28]
    1d58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1d5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1d60:	429a      	cmp	r2, r3
    1d62:	d102      	bne.n	1d6a <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    1d64:	697b      	ldr	r3, [r7, #20]
    1d66:	62bb      	str	r3, [r7, #40]	; 0x28
    1d68:	e001      	b.n	1d6e <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    1d6a:	693b      	ldr	r3, [r7, #16]
    1d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	899b      	ldrh	r3, [r3, #12]
    1d72:	b29b      	uxth	r3, r3
    1d74:	b29b      	uxth	r3, r3
    1d76:	b21b      	sxth	r3, r3
    1d78:	2b00      	cmp	r3, #0
    1d7a:	da0f      	bge.n	1d9c <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    1d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d7e:	4613      	mov	r3, r2
    1d80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1d84:	189b      	adds	r3, r3, r2
    1d86:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1d8a:	189a      	adds	r2, r3, r2
    1d8c:	683b      	ldr	r3, [r7, #0]
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1d94:	fbb2 f3f3 	udiv	r3, r2, r3
    1d98:	627b      	str	r3, [r7, #36]	; 0x24
    1d9a:	e00e      	b.n	1dba <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    1d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d9e:	4613      	mov	r3, r2
    1da0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1da4:	189b      	adds	r3, r3, r2
    1da6:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1daa:	189a      	adds	r2, r3, r2
    1dac:	683b      	ldr	r3, [r7, #0]
    1dae:	681b      	ldr	r3, [r3, #0]
    1db0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1db4:	fbb2 f3f3 	udiv	r3, r2, r3
    1db8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1dbc:	f248 531f 	movw	r3, #34079	; 0x851f
    1dc0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1dc4:	fba3 1302 	umull	r1, r3, r3, r2
    1dc8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1dcc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1dd4:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1dd8:	f04f 0264 	mov.w	r2, #100	; 0x64
    1ddc:	fb02 f303 	mul.w	r3, r2, r3
    1de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1de2:	1ad3      	subs	r3, r2, r3
    1de4:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	899b      	ldrh	r3, [r3, #12]
    1dea:	b29b      	uxth	r3, r3
    1dec:	b29b      	uxth	r3, r3
    1dee:	b21b      	sxth	r3, r3
    1df0:	2b00      	cmp	r3, #0
    1df2:	da12      	bge.n	1e1a <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1df4:	6a3b      	ldr	r3, [r7, #32]
    1df6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1dfe:	f248 531f 	movw	r3, #34079	; 0x851f
    1e02:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1e06:	fba3 1302 	umull	r1, r3, r3, r2
    1e0a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1e0e:	f003 0307 	and.w	r3, r3, #7
    1e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e14:	4313      	orrs	r3, r2
    1e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    1e18:	e011      	b.n	1e3e <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1e1a:	6a3b      	ldr	r3, [r7, #32]
    1e1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1e20:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1e24:	f248 531f 	movw	r3, #34079	; 0x851f
    1e28:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1e2c:	fba3 1302 	umull	r1, r3, r3, r2
    1e30:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1e34:	f003 030f 	and.w	r3, r3, #15
    1e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e3a:	4313      	orrs	r3, r2
    1e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e40:	b29a      	uxth	r2, r3
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	811a      	strh	r2, [r3, #8]
}
    1e46:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1e4a:	46bd      	mov	sp, r7
    1e4c:	bd80      	pop	{r7, pc}
    1e4e:	bf00      	nop

00001e50 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1e50:	b480      	push	{r7}
    1e52:	b083      	sub	sp, #12
    1e54:	af00      	add	r7, sp, #0
    1e56:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1e5e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1e60:	687b      	ldr	r3, [r7, #4]
    1e62:	f04f 0200 	mov.w	r2, #0
    1e66:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	f04f 0200 	mov.w	r2, #0
    1e6e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	f04f 0200 	mov.w	r2, #0
    1e76:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	f04f 020c 	mov.w	r2, #12
    1e7e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	f04f 0200 	mov.w	r2, #0
    1e86:	819a      	strh	r2, [r3, #12]
}
    1e88:	f107 070c 	add.w	r7, r7, #12
    1e8c:	46bd      	mov	sp, r7
    1e8e:	bc80      	pop	{r7}
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop

00001e94 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1e94:	b480      	push	{r7}
    1e96:	b085      	sub	sp, #20
    1e98:	af00      	add	r7, sp, #0
    1e9a:	6078      	str	r0, [r7, #4]
    1e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1e9e:	f04f 0300 	mov.w	r3, #0
    1ea2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	8a1b      	ldrh	r3, [r3, #16]
    1ea8:	b29b      	uxth	r3, r3
    1eaa:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1eac:	68fa      	ldr	r2, [r7, #12]
    1eae:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1eb2:	4013      	ands	r3, r2
    1eb4:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1eb6:	683b      	ldr	r3, [r7, #0]
    1eb8:	881a      	ldrh	r2, [r3, #0]
    1eba:	683b      	ldr	r3, [r7, #0]
    1ebc:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1ebe:	4313      	orrs	r3, r2
    1ec0:	b29a      	uxth	r2, r3
    1ec2:	683b      	ldr	r3, [r7, #0]
    1ec4:	889b      	ldrh	r3, [r3, #4]
    1ec6:	4313      	orrs	r3, r2
    1ec8:	b29a      	uxth	r2, r3
    1eca:	683b      	ldr	r3, [r7, #0]
    1ecc:	88db      	ldrh	r3, [r3, #6]
    1ece:	4313      	orrs	r3, r2
    1ed0:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1ed2:	68fa      	ldr	r2, [r7, #12]
    1ed4:	4313      	orrs	r3, r2
    1ed6:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	b29a      	uxth	r2, r3
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	821a      	strh	r2, [r3, #16]
}
    1ee0:	f107 0714 	add.w	r7, r7, #20
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bc80      	pop	{r7}
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop

00001eec <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1eec:	b480      	push	{r7}
    1eee:	b083      	sub	sp, #12
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	f04f 0200 	mov.w	r2, #0
    1efa:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	f04f 0200 	mov.w	r2, #0
    1f02:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	f04f 0200 	mov.w	r2, #0
    1f0a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	f04f 0200 	mov.w	r2, #0
    1f12:	80da      	strh	r2, [r3, #6]
}
    1f14:	f107 070c 	add.w	r7, r7, #12
    1f18:	46bd      	mov	sp, r7
    1f1a:	bc80      	pop	{r7}
    1f1c:	4770      	bx	lr
    1f1e:	bf00      	nop

00001f20 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f20:	b480      	push	{r7}
    1f22:	b083      	sub	sp, #12
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
    1f28:	460b      	mov	r3, r1
    1f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1f2c:	78fb      	ldrb	r3, [r7, #3]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d008      	beq.n	1f44 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	899b      	ldrh	r3, [r3, #12]
    1f36:	b29b      	uxth	r3, r3
    1f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1f3c:	b29a      	uxth	r2, r3
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	819a      	strh	r2, [r3, #12]
    1f42:	e007      	b.n	1f54 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	899b      	ldrh	r3, [r3, #12]
    1f48:	b29b      	uxth	r3, r3
    1f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1f4e:	b29a      	uxth	r2, r3
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	819a      	strh	r2, [r3, #12]
  }
}
    1f54:	f107 070c 	add.w	r7, r7, #12
    1f58:	46bd      	mov	sp, r7
    1f5a:	bc80      	pop	{r7}
    1f5c:	4770      	bx	lr
    1f5e:	bf00      	nop

00001f60 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1f60:	b480      	push	{r7}
    1f62:	b087      	sub	sp, #28
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
    1f68:	4613      	mov	r3, r2
    1f6a:	460a      	mov	r2, r1
    1f6c:	807a      	strh	r2, [r7, #2]
    1f6e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1f70:	f04f 0300 	mov.w	r3, #0
    1f74:	613b      	str	r3, [r7, #16]
    1f76:	f04f 0300 	mov.w	r3, #0
    1f7a:	60fb      	str	r3, [r7, #12]
    1f7c:	f04f 0300 	mov.w	r3, #0
    1f80:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1f82:	f04f 0300 	mov.w	r3, #0
    1f86:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1f8c:	887b      	ldrh	r3, [r7, #2]
    1f8e:	b2db      	uxtb	r3, r3
    1f90:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1f94:	b2db      	uxtb	r3, r3
    1f96:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1f98:	887b      	ldrh	r3, [r7, #2]
    1f9a:	f003 031f 	and.w	r3, r3, #31
    1f9e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1fa0:	68fb      	ldr	r3, [r7, #12]
    1fa2:	f04f 0201 	mov.w	r2, #1
    1fa6:	fa02 f303 	lsl.w	r3, r2, r3
    1faa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    1fac:	693b      	ldr	r3, [r7, #16]
    1fae:	2b01      	cmp	r3, #1
    1fb0:	d104      	bne.n	1fbc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1fb2:	697b      	ldr	r3, [r7, #20]
    1fb4:	f103 030c 	add.w	r3, r3, #12
    1fb8:	617b      	str	r3, [r7, #20]
    1fba:	e00b      	b.n	1fd4 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1fbc:	693b      	ldr	r3, [r7, #16]
    1fbe:	2b02      	cmp	r3, #2
    1fc0:	d104      	bne.n	1fcc <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1fc2:	697b      	ldr	r3, [r7, #20]
    1fc4:	f103 0310 	add.w	r3, r3, #16
    1fc8:	617b      	str	r3, [r7, #20]
    1fca:	e003      	b.n	1fd4 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    1fcc:	697b      	ldr	r3, [r7, #20]
    1fce:	f103 0314 	add.w	r3, r3, #20
    1fd2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1fd4:	787b      	ldrb	r3, [r7, #1]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d006      	beq.n	1fe8 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1fda:	697b      	ldr	r3, [r7, #20]
    1fdc:	697a      	ldr	r2, [r7, #20]
    1fde:	6811      	ldr	r1, [r2, #0]
    1fe0:	68ba      	ldr	r2, [r7, #8]
    1fe2:	430a      	orrs	r2, r1
    1fe4:	601a      	str	r2, [r3, #0]
    1fe6:	e007      	b.n	1ff8 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1fe8:	697b      	ldr	r3, [r7, #20]
    1fea:	697a      	ldr	r2, [r7, #20]
    1fec:	6811      	ldr	r1, [r2, #0]
    1fee:	68ba      	ldr	r2, [r7, #8]
    1ff0:	ea6f 0202 	mvn.w	r2, r2
    1ff4:	400a      	ands	r2, r1
    1ff6:	601a      	str	r2, [r3, #0]
  }
}
    1ff8:	f107 071c 	add.w	r7, r7, #28
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bc80      	pop	{r7}
    2000:	4770      	bx	lr
    2002:	bf00      	nop

00002004 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    2004:	b480      	push	{r7}
    2006:	b083      	sub	sp, #12
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
    200c:	4613      	mov	r3, r2
    200e:	460a      	mov	r2, r1
    2010:	807a      	strh	r2, [r7, #2]
    2012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    2014:	787b      	ldrb	r3, [r7, #1]
    2016:	2b00      	cmp	r3, #0
    2018:	d008      	beq.n	202c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	8a9b      	ldrh	r3, [r3, #20]
    201e:	b29a      	uxth	r2, r3
    2020:	887b      	ldrh	r3, [r7, #2]
    2022:	4313      	orrs	r3, r2
    2024:	b29a      	uxth	r2, r3
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	829a      	strh	r2, [r3, #20]
    202a:	e00a      	b.n	2042 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	8a9b      	ldrh	r3, [r3, #20]
    2030:	b29a      	uxth	r2, r3
    2032:	887b      	ldrh	r3, [r7, #2]
    2034:	ea6f 0303 	mvn.w	r3, r3
    2038:	b29b      	uxth	r3, r3
    203a:	4013      	ands	r3, r2
    203c:	b29a      	uxth	r2, r3
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	829a      	strh	r2, [r3, #20]
  }
}
    2042:	f107 070c 	add.w	r7, r7, #12
    2046:	46bd      	mov	sp, r7
    2048:	bc80      	pop	{r7}
    204a:	4770      	bx	lr

0000204c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    204c:	b480      	push	{r7}
    204e:	b083      	sub	sp, #12
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
    2054:	460b      	mov	r3, r1
    2056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	8a1b      	ldrh	r3, [r3, #16]
    205c:	b29b      	uxth	r3, r3
    205e:	f023 030f 	bic.w	r3, r3, #15
    2062:	b29a      	uxth	r2, r3
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	8a1b      	ldrh	r3, [r3, #16]
    206c:	b29a      	uxth	r2, r3
    206e:	78fb      	ldrb	r3, [r7, #3]
    2070:	b29b      	uxth	r3, r3
    2072:	4313      	orrs	r3, r2
    2074:	b29a      	uxth	r2, r3
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	821a      	strh	r2, [r3, #16]
}
    207a:	f107 070c 	add.w	r7, r7, #12
    207e:	46bd      	mov	sp, r7
    2080:	bc80      	pop	{r7}
    2082:	4770      	bx	lr

00002084 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    2084:	b480      	push	{r7}
    2086:	b083      	sub	sp, #12
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	460b      	mov	r3, r1
    208e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	899b      	ldrh	r3, [r3, #12]
    2094:	b29b      	uxth	r3, r3
    2096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    209a:	b29a      	uxth	r2, r3
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	899b      	ldrh	r3, [r3, #12]
    20a4:	b29a      	uxth	r2, r3
    20a6:	887b      	ldrh	r3, [r7, #2]
    20a8:	4313      	orrs	r3, r2
    20aa:	b29a      	uxth	r2, r3
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	819a      	strh	r2, [r3, #12]
}
    20b0:	f107 070c 	add.w	r7, r7, #12
    20b4:	46bd      	mov	sp, r7
    20b6:	bc80      	pop	{r7}
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop

000020bc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    20bc:	b480      	push	{r7}
    20be:	b083      	sub	sp, #12
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
    20c4:	460b      	mov	r3, r1
    20c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    20c8:	78fb      	ldrb	r3, [r7, #3]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d008      	beq.n	20e0 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	899b      	ldrh	r3, [r3, #12]
    20d2:	b29b      	uxth	r3, r3
    20d4:	f043 0302 	orr.w	r3, r3, #2
    20d8:	b29a      	uxth	r2, r3
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	819a      	strh	r2, [r3, #12]
    20de:	e007      	b.n	20f0 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	899b      	ldrh	r3, [r3, #12]
    20e4:	b29b      	uxth	r3, r3
    20e6:	f023 0302 	bic.w	r3, r3, #2
    20ea:	b29a      	uxth	r2, r3
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	819a      	strh	r2, [r3, #12]
  }
}
    20f0:	f107 070c 	add.w	r7, r7, #12
    20f4:	46bd      	mov	sp, r7
    20f6:	bc80      	pop	{r7}
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop

000020fc <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    20fc:	b480      	push	{r7}
    20fe:	b083      	sub	sp, #12
    2100:	af00      	add	r7, sp, #0
    2102:	6078      	str	r0, [r7, #4]
    2104:	460b      	mov	r3, r1
    2106:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	8a1b      	ldrh	r3, [r3, #16]
    210c:	b29b      	uxth	r3, r3
    210e:	f023 0320 	bic.w	r3, r3, #32
    2112:	b29a      	uxth	r2, r3
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	8a1b      	ldrh	r3, [r3, #16]
    211c:	b29a      	uxth	r2, r3
    211e:	887b      	ldrh	r3, [r7, #2]
    2120:	4313      	orrs	r3, r2
    2122:	b29a      	uxth	r2, r3
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	821a      	strh	r2, [r3, #16]
}
    2128:	f107 070c 	add.w	r7, r7, #12
    212c:	46bd      	mov	sp, r7
    212e:	bc80      	pop	{r7}
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
    213c:	460b      	mov	r3, r1
    213e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2140:	78fb      	ldrb	r3, [r7, #3]
    2142:	2b00      	cmp	r3, #0
    2144:	d008      	beq.n	2158 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	8a1b      	ldrh	r3, [r3, #16]
    214a:	b29b      	uxth	r3, r3
    214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2150:	b29a      	uxth	r2, r3
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	821a      	strh	r2, [r3, #16]
    2156:	e007      	b.n	2168 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	8a1b      	ldrh	r3, [r3, #16]
    215c:	b29b      	uxth	r3, r3
    215e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2162:	b29a      	uxth	r2, r3
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	821a      	strh	r2, [r3, #16]
  }
}
    2168:	f107 070c 	add.w	r7, r7, #12
    216c:	46bd      	mov	sp, r7
    216e:	bc80      	pop	{r7}
    2170:	4770      	bx	lr
    2172:	bf00      	nop

00002174 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    2174:	b480      	push	{r7}
    2176:	b083      	sub	sp, #12
    2178:	af00      	add	r7, sp, #0
    217a:	6078      	str	r0, [r7, #4]
    217c:	460b      	mov	r3, r1
    217e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    2180:	887b      	ldrh	r3, [r7, #2]
    2182:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    2186:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    218a:	b29a      	uxth	r2, r3
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	809a      	strh	r2, [r3, #4]
}
    2190:	f107 070c 	add.w	r7, r7, #12
    2194:	46bd      	mov	sp, r7
    2196:	bc80      	pop	{r7}
    2198:	4770      	bx	lr
    219a:	bf00      	nop

0000219c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    219c:	b480      	push	{r7}
    219e:	b083      	sub	sp, #12
    21a0:	af00      	add	r7, sp, #0
    21a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	889b      	ldrh	r3, [r3, #4]
    21a8:	b29b      	uxth	r3, r3
    21aa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    21ae:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    21b2:	b29b      	uxth	r3, r3
}
    21b4:	4618      	mov	r0, r3
    21b6:	f107 070c 	add.w	r7, r7, #12
    21ba:	46bd      	mov	sp, r7
    21bc:	bc80      	pop	{r7}
    21be:	4770      	bx	lr

000021c0 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    21c0:	b480      	push	{r7}
    21c2:	b083      	sub	sp, #12
    21c4:	af00      	add	r7, sp, #0
    21c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	899b      	ldrh	r3, [r3, #12]
    21cc:	b29b      	uxth	r3, r3
    21ce:	f043 0301 	orr.w	r3, r3, #1
    21d2:	b29a      	uxth	r2, r3
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	819a      	strh	r2, [r3, #12]
}
    21d8:	f107 070c 	add.w	r7, r7, #12
    21dc:	46bd      	mov	sp, r7
    21de:	bc80      	pop	{r7}
    21e0:	4770      	bx	lr
    21e2:	bf00      	nop

000021e4 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    21e4:	b480      	push	{r7}
    21e6:	b083      	sub	sp, #12
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
    21ec:	460b      	mov	r3, r1
    21ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	8b1b      	ldrh	r3, [r3, #24]
    21f4:	b29b      	uxth	r3, r3
    21f6:	b2db      	uxtb	r3, r3
    21f8:	b29a      	uxth	r2, r3
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	8b1b      	ldrh	r3, [r3, #24]
    2202:	b29a      	uxth	r2, r3
    2204:	78fb      	ldrb	r3, [r7, #3]
    2206:	b29b      	uxth	r3, r3
    2208:	ea4f 2303 	mov.w	r3, r3, lsl #8
    220c:	b29b      	uxth	r3, r3
    220e:	4313      	orrs	r3, r2
    2210:	b29a      	uxth	r2, r3
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	831a      	strh	r2, [r3, #24]
}
    2216:	f107 070c 	add.w	r7, r7, #12
    221a:	46bd      	mov	sp, r7
    221c:	bc80      	pop	{r7}
    221e:	4770      	bx	lr

00002220 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    2220:	b480      	push	{r7}
    2222:	b083      	sub	sp, #12
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	460b      	mov	r3, r1
    222a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	8b1b      	ldrh	r3, [r3, #24]
    2230:	b29b      	uxth	r3, r3
    2232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2236:	b29a      	uxth	r2, r3
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	8b1b      	ldrh	r3, [r3, #24]
    2240:	b29a      	uxth	r2, r3
    2242:	78fb      	ldrb	r3, [r7, #3]
    2244:	b29b      	uxth	r3, r3
    2246:	4313      	orrs	r3, r2
    2248:	b29a      	uxth	r2, r3
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	831a      	strh	r2, [r3, #24]
}
    224e:	f107 070c 	add.w	r7, r7, #12
    2252:	46bd      	mov	sp, r7
    2254:	bc80      	pop	{r7}
    2256:	4770      	bx	lr

00002258 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2258:	b480      	push	{r7}
    225a:	b083      	sub	sp, #12
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
    2260:	460b      	mov	r3, r1
    2262:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2264:	78fb      	ldrb	r3, [r7, #3]
    2266:	2b00      	cmp	r3, #0
    2268:	d008      	beq.n	227c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	8a9b      	ldrh	r3, [r3, #20]
    226e:	b29b      	uxth	r3, r3
    2270:	f043 0320 	orr.w	r3, r3, #32
    2274:	b29a      	uxth	r2, r3
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	829a      	strh	r2, [r3, #20]
    227a:	e007      	b.n	228c <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	8a9b      	ldrh	r3, [r3, #20]
    2280:	b29b      	uxth	r3, r3
    2282:	f023 0320 	bic.w	r3, r3, #32
    2286:	b29a      	uxth	r2, r3
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	829a      	strh	r2, [r3, #20]
  }
}
    228c:	f107 070c 	add.w	r7, r7, #12
    2290:	46bd      	mov	sp, r7
    2292:	bc80      	pop	{r7}
    2294:	4770      	bx	lr
    2296:	bf00      	nop

00002298 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2298:	b480      	push	{r7}
    229a:	b083      	sub	sp, #12
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
    22a0:	460b      	mov	r3, r1
    22a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    22a4:	78fb      	ldrb	r3, [r7, #3]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d008      	beq.n	22bc <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	8a9b      	ldrh	r3, [r3, #20]
    22ae:	b29b      	uxth	r3, r3
    22b0:	f043 0310 	orr.w	r3, r3, #16
    22b4:	b29a      	uxth	r2, r3
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	829a      	strh	r2, [r3, #20]
    22ba:	e007      	b.n	22cc <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	8a9b      	ldrh	r3, [r3, #20]
    22c0:	b29b      	uxth	r3, r3
    22c2:	f023 0310 	bic.w	r3, r3, #16
    22c6:	b29a      	uxth	r2, r3
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	829a      	strh	r2, [r3, #20]
  }
}
    22cc:	f107 070c 	add.w	r7, r7, #12
    22d0:	46bd      	mov	sp, r7
    22d2:	bc80      	pop	{r7}
    22d4:	4770      	bx	lr
    22d6:	bf00      	nop

000022d8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    22d8:	b480      	push	{r7}
    22da:	b083      	sub	sp, #12
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
    22e0:	460b      	mov	r3, r1
    22e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    22e4:	78fb      	ldrb	r3, [r7, #3]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d008      	beq.n	22fc <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	8a9b      	ldrh	r3, [r3, #20]
    22ee:	b29b      	uxth	r3, r3
    22f0:	f043 0308 	orr.w	r3, r3, #8
    22f4:	b29a      	uxth	r2, r3
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	829a      	strh	r2, [r3, #20]
    22fa:	e007      	b.n	230c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	8a9b      	ldrh	r3, [r3, #20]
    2300:	b29b      	uxth	r3, r3
    2302:	f023 0308 	bic.w	r3, r3, #8
    2306:	b29a      	uxth	r2, r3
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	829a      	strh	r2, [r3, #20]
  }
}
    230c:	f107 070c 	add.w	r7, r7, #12
    2310:	46bd      	mov	sp, r7
    2312:	bc80      	pop	{r7}
    2314:	4770      	bx	lr
    2316:	bf00      	nop

00002318 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2318:	b480      	push	{r7}
    231a:	b083      	sub	sp, #12
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
    2320:	460b      	mov	r3, r1
    2322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2324:	78fb      	ldrb	r3, [r7, #3]
    2326:	2b00      	cmp	r3, #0
    2328:	d00a      	beq.n	2340 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	899b      	ldrh	r3, [r3, #12]
    232e:	b29b      	uxth	r3, r3
    2330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    2334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    2338:	b29a      	uxth	r2, r3
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	819a      	strh	r2, [r3, #12]
    233e:	e009      	b.n	2354 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	899b      	ldrh	r3, [r3, #12]
    2344:	b29b      	uxth	r3, r3
    2346:	ea4f 4343 	mov.w	r3, r3, lsl #17
    234a:	ea4f 4353 	mov.w	r3, r3, lsr #17
    234e:	b29a      	uxth	r2, r3
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	819a      	strh	r2, [r3, #12]
  }
}
    2354:	f107 070c 	add.w	r7, r7, #12
    2358:	46bd      	mov	sp, r7
    235a:	bc80      	pop	{r7}
    235c:	4770      	bx	lr
    235e:	bf00      	nop

00002360 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2360:	b480      	push	{r7}
    2362:	b083      	sub	sp, #12
    2364:	af00      	add	r7, sp, #0
    2366:	6078      	str	r0, [r7, #4]
    2368:	460b      	mov	r3, r1
    236a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    236c:	78fb      	ldrb	r3, [r7, #3]
    236e:	2b00      	cmp	r3, #0
    2370:	d008      	beq.n	2384 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    2372:	687b      	ldr	r3, [r7, #4]
    2374:	8a9b      	ldrh	r3, [r3, #20]
    2376:	b29b      	uxth	r3, r3
    2378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    237c:	b29a      	uxth	r2, r3
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	829a      	strh	r2, [r3, #20]
    2382:	e007      	b.n	2394 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2384:	687b      	ldr	r3, [r7, #4]
    2386:	8a9b      	ldrh	r3, [r3, #20]
    2388:	b29b      	uxth	r3, r3
    238a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    238e:	b29a      	uxth	r2, r3
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	829a      	strh	r2, [r3, #20]
  }
}
    2394:	f107 070c 	add.w	r7, r7, #12
    2398:	46bd      	mov	sp, r7
    239a:	bc80      	pop	{r7}
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
    23a8:	460b      	mov	r3, r1
    23aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	8a9b      	ldrh	r3, [r3, #20]
    23b0:	b29b      	uxth	r3, r3
    23b2:	f023 0304 	bic.w	r3, r3, #4
    23b6:	b29a      	uxth	r2, r3
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	8a9b      	ldrh	r3, [r3, #20]
    23c0:	b29a      	uxth	r2, r3
    23c2:	887b      	ldrh	r3, [r7, #2]
    23c4:	4313      	orrs	r3, r2
    23c6:	b29a      	uxth	r2, r3
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	829a      	strh	r2, [r3, #20]
}
    23cc:	f107 070c 	add.w	r7, r7, #12
    23d0:	46bd      	mov	sp, r7
    23d2:	bc80      	pop	{r7}
    23d4:	4770      	bx	lr
    23d6:	bf00      	nop

000023d8 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    23d8:	b480      	push	{r7}
    23da:	b083      	sub	sp, #12
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    23e0:	460b      	mov	r3, r1
    23e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    23e4:	78fb      	ldrb	r3, [r7, #3]
    23e6:	2b00      	cmp	r3, #0
    23e8:	d008      	beq.n	23fc <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	8a9b      	ldrh	r3, [r3, #20]
    23ee:	b29b      	uxth	r3, r3
    23f0:	f043 0302 	orr.w	r3, r3, #2
    23f4:	b29a      	uxth	r2, r3
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	829a      	strh	r2, [r3, #20]
    23fa:	e007      	b.n	240c <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	8a9b      	ldrh	r3, [r3, #20]
    2400:	b29b      	uxth	r3, r3
    2402:	f023 0302 	bic.w	r3, r3, #2
    2406:	b29a      	uxth	r2, r3
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	829a      	strh	r2, [r3, #20]
  }
}
    240c:	f107 070c 	add.w	r7, r7, #12
    2410:	46bd      	mov	sp, r7
    2412:	bc80      	pop	{r7}
    2414:	4770      	bx	lr
    2416:	bf00      	nop

00002418 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2418:	b480      	push	{r7}
    241a:	b085      	sub	sp, #20
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
    2420:	460b      	mov	r3, r1
    2422:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    2424:	f04f 0300 	mov.w	r3, #0
    2428:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	881b      	ldrh	r3, [r3, #0]
    242e:	b29a      	uxth	r2, r3
    2430:	887b      	ldrh	r3, [r7, #2]
    2432:	4013      	ands	r3, r2
    2434:	b29b      	uxth	r3, r3
    2436:	2b00      	cmp	r3, #0
    2438:	d003      	beq.n	2442 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    243a:	f04f 0301 	mov.w	r3, #1
    243e:	73fb      	strb	r3, [r7, #15]
    2440:	e002      	b.n	2448 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    2442:	f04f 0300 	mov.w	r3, #0
    2446:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2448:	7bfb      	ldrb	r3, [r7, #15]
}
    244a:	4618      	mov	r0, r3
    244c:	f107 0714 	add.w	r7, r7, #20
    2450:	46bd      	mov	sp, r7
    2452:	bc80      	pop	{r7}
    2454:	4770      	bx	lr
    2456:	bf00      	nop

00002458 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2458:	b480      	push	{r7}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]
    2460:	460b      	mov	r3, r1
    2462:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    2464:	887b      	ldrh	r3, [r7, #2]
    2466:	ea6f 0303 	mvn.w	r3, r3
    246a:	b29a      	uxth	r2, r3
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	801a      	strh	r2, [r3, #0]
}
    2470:	f107 070c 	add.w	r7, r7, #12
    2474:	46bd      	mov	sp, r7
    2476:	bc80      	pop	{r7}
    2478:	4770      	bx	lr
    247a:	bf00      	nop

0000247c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    247c:	b480      	push	{r7}
    247e:	b087      	sub	sp, #28
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	460b      	mov	r3, r1
    2486:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2488:	f04f 0300 	mov.w	r3, #0
    248c:	60fb      	str	r3, [r7, #12]
    248e:	f04f 0300 	mov.w	r3, #0
    2492:	617b      	str	r3, [r7, #20]
    2494:	f04f 0300 	mov.w	r3, #0
    2498:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    249a:	f04f 0300 	mov.w	r3, #0
    249e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    24a0:	887b      	ldrh	r3, [r7, #2]
    24a2:	b2db      	uxtb	r3, r3
    24a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
    24a8:	b2db      	uxtb	r3, r3
    24aa:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    24ac:	887b      	ldrh	r3, [r7, #2]
    24ae:	f003 031f 	and.w	r3, r3, #31
    24b2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    24b4:	697b      	ldr	r3, [r7, #20]
    24b6:	f04f 0201 	mov.w	r2, #1
    24ba:	fa02 f303 	lsl.w	r3, r2, r3
    24be:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    24c0:	68bb      	ldr	r3, [r7, #8]
    24c2:	2b01      	cmp	r3, #1
    24c4:	d106      	bne.n	24d4 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	899b      	ldrh	r3, [r3, #12]
    24ca:	b29b      	uxth	r3, r3
    24cc:	697a      	ldr	r2, [r7, #20]
    24ce:	4013      	ands	r3, r2
    24d0:	617b      	str	r3, [r7, #20]
    24d2:	e00f      	b.n	24f4 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    24d4:	68bb      	ldr	r3, [r7, #8]
    24d6:	2b02      	cmp	r3, #2
    24d8:	d106      	bne.n	24e8 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	8a1b      	ldrh	r3, [r3, #16]
    24de:	b29b      	uxth	r3, r3
    24e0:	697a      	ldr	r2, [r7, #20]
    24e2:	4013      	ands	r3, r2
    24e4:	617b      	str	r3, [r7, #20]
    24e6:	e005      	b.n	24f4 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	8a9b      	ldrh	r3, [r3, #20]
    24ec:	b29b      	uxth	r3, r3
    24ee:	697a      	ldr	r2, [r7, #20]
    24f0:	4013      	ands	r3, r2
    24f2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    24f4:	887b      	ldrh	r3, [r7, #2]
    24f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    24fa:	b29b      	uxth	r3, r3
    24fc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    24fe:	68fb      	ldr	r3, [r7, #12]
    2500:	f04f 0201 	mov.w	r2, #1
    2504:	fa02 f303 	lsl.w	r3, r2, r3
    2508:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	881b      	ldrh	r3, [r3, #0]
    250e:	b29b      	uxth	r3, r3
    2510:	68fa      	ldr	r2, [r7, #12]
    2512:	4013      	ands	r3, r2
    2514:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2516:	697b      	ldr	r3, [r7, #20]
    2518:	2b00      	cmp	r3, #0
    251a:	d006      	beq.n	252a <USART_GetITStatus+0xae>
    251c:	68fb      	ldr	r3, [r7, #12]
    251e:	2b00      	cmp	r3, #0
    2520:	d003      	beq.n	252a <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    2522:	f04f 0301 	mov.w	r3, #1
    2526:	74fb      	strb	r3, [r7, #19]
    2528:	e002      	b.n	2530 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    252a:	f04f 0300 	mov.w	r3, #0
    252e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    2530:	7cfb      	ldrb	r3, [r7, #19]
}
    2532:	4618      	mov	r0, r3
    2534:	f107 071c 	add.w	r7, r7, #28
    2538:	46bd      	mov	sp, r7
    253a:	bc80      	pop	{r7}
    253c:	4770      	bx	lr
    253e:	bf00      	nop

00002540 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2540:	b480      	push	{r7}
    2542:	b085      	sub	sp, #20
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
    2548:	460b      	mov	r3, r1
    254a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    254c:	f04f 0300 	mov.w	r3, #0
    2550:	81fb      	strh	r3, [r7, #14]
    2552:	f04f 0300 	mov.w	r3, #0
    2556:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    2558:	887b      	ldrh	r3, [r7, #2]
    255a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    255e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    2560:	89fb      	ldrh	r3, [r7, #14]
    2562:	f04f 0201 	mov.w	r2, #1
    2566:	fa02 f303 	lsl.w	r3, r2, r3
    256a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    256c:	89bb      	ldrh	r3, [r7, #12]
    256e:	ea6f 0303 	mvn.w	r3, r3
    2572:	b29a      	uxth	r2, r3
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	801a      	strh	r2, [r3, #0]
}
    2578:	f107 0714 	add.w	r7, r7, #20
    257c:	46bd      	mov	sp, r7
    257e:	bc80      	pop	{r7}
    2580:	4770      	bx	lr
    2582:	bf00      	nop

00002584 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2584:	b480      	push	{r7}
    2586:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2588:	f44f 6380 	mov.w	r3, #1024	; 0x400
    258c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2590:	f04f 0200 	mov.w	r2, #0
    2594:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2596:	f44f 6380 	mov.w	r3, #1024	; 0x400
    259a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    259e:	f04f 0200 	mov.w	r2, #0
    25a2:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    25a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25ac:	f04f 0200 	mov.w	r2, #0
    25b0:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    25b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25ba:	f04f 0200 	mov.w	r2, #0
    25be:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    25c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    25cc:	f2c0 020f 	movt	r2, #15
    25d0:	615a      	str	r2, [r3, #20]
}
    25d2:	46bd      	mov	sp, r7
    25d4:	bc80      	pop	{r7}
    25d6:	4770      	bx	lr

000025d8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    25d8:	b480      	push	{r7}
    25da:	b085      	sub	sp, #20
    25dc:	af00      	add	r7, sp, #0
    25de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    25e0:	f04f 0300 	mov.w	r3, #0
    25e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    25e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25ee:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	799b      	ldrb	r3, [r3, #6]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d078      	beq.n	26ea <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    25f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2600:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2604:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2608:	6811      	ldr	r1, [r2, #0]
    260a:	687a      	ldr	r2, [r7, #4]
    260c:	6812      	ldr	r2, [r2, #0]
    260e:	ea6f 0202 	mvn.w	r2, r2
    2612:	400a      	ands	r2, r1
    2614:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2616:	f44f 6380 	mov.w	r3, #1024	; 0x400
    261a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2622:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2626:	6851      	ldr	r1, [r2, #4]
    2628:	687a      	ldr	r2, [r7, #4]
    262a:	6812      	ldr	r2, [r2, #0]
    262c:	ea6f 0202 	mvn.w	r2, r2
    2630:	400a      	ands	r2, r1
    2632:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	791b      	ldrb	r3, [r3, #4]
    2638:	68fa      	ldr	r2, [r7, #12]
    263a:	18d3      	adds	r3, r2, r3
    263c:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    263e:	68fb      	ldr	r3, [r7, #12]
    2640:	68fa      	ldr	r2, [r7, #12]
    2642:	6811      	ldr	r1, [r2, #0]
    2644:	687a      	ldr	r2, [r7, #4]
    2646:	6812      	ldr	r2, [r2, #0]
    2648:	430a      	orrs	r2, r1
    264a:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2650:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2654:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2658:	f2c4 0201 	movt	r2, #16385	; 0x4001
    265c:	6891      	ldr	r1, [r2, #8]
    265e:	687a      	ldr	r2, [r7, #4]
    2660:	6812      	ldr	r2, [r2, #0]
    2662:	ea6f 0202 	mvn.w	r2, r2
    2666:	400a      	ands	r2, r1
    2668:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    266e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2672:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2676:	f2c4 0201 	movt	r2, #16385	; 0x4001
    267a:	68d1      	ldr	r1, [r2, #12]
    267c:	687a      	ldr	r2, [r7, #4]
    267e:	6812      	ldr	r2, [r2, #0]
    2680:	ea6f 0202 	mvn.w	r2, r2
    2684:	400a      	ands	r2, r1
    2686:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	795b      	ldrb	r3, [r3, #5]
    268c:	2b10      	cmp	r3, #16
    268e:	d11a      	bne.n	26c6 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    2690:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2694:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2698:	f44f 6280 	mov.w	r2, #1024	; 0x400
    269c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    26a0:	6891      	ldr	r1, [r2, #8]
    26a2:	687a      	ldr	r2, [r7, #4]
    26a4:	6812      	ldr	r2, [r2, #0]
    26a6:	430a      	orrs	r2, r1
    26a8:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    26aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    26ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    26b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    26b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    26ba:	68d1      	ldr	r1, [r2, #12]
    26bc:	687a      	ldr	r2, [r7, #4]
    26be:	6812      	ldr	r2, [r2, #0]
    26c0:	430a      	orrs	r2, r1
    26c2:	60da      	str	r2, [r3, #12]
    26c4:	e01f      	b.n	2706 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    26c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    26ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
    26ce:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	795b      	ldrb	r3, [r3, #5]
    26d4:	68fa      	ldr	r2, [r7, #12]
    26d6:	18d3      	adds	r3, r2, r3
    26d8:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	68fa      	ldr	r2, [r7, #12]
    26de:	6811      	ldr	r1, [r2, #0]
    26e0:	687a      	ldr	r2, [r7, #4]
    26e2:	6812      	ldr	r2, [r2, #0]
    26e4:	430a      	orrs	r2, r1
    26e6:	601a      	str	r2, [r3, #0]
    26e8:	e00d      	b.n	2706 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	791b      	ldrb	r3, [r3, #4]
    26ee:	68fa      	ldr	r2, [r7, #12]
    26f0:	18d3      	adds	r3, r2, r3
    26f2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	68fa      	ldr	r2, [r7, #12]
    26f8:	6811      	ldr	r1, [r2, #0]
    26fa:	687a      	ldr	r2, [r7, #4]
    26fc:	6812      	ldr	r2, [r2, #0]
    26fe:	ea6f 0202 	mvn.w	r2, r2
    2702:	400a      	ands	r2, r1
    2704:	601a      	str	r2, [r3, #0]
  }
}
    2706:	f107 0714 	add.w	r7, r7, #20
    270a:	46bd      	mov	sp, r7
    270c:	bc80      	pop	{r7}
    270e:	4770      	bx	lr

00002710 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2710:	b480      	push	{r7}
    2712:	b083      	sub	sp, #12
    2714:	af00      	add	r7, sp, #0
    2716:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	f04f 0200 	mov.w	r2, #0
    271e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	f04f 0200 	mov.w	r2, #0
    2726:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	f04f 020c 	mov.w	r2, #12
    272e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	f04f 0200 	mov.w	r2, #0
    2736:	719a      	strb	r2, [r3, #6]
}
    2738:	f107 070c 	add.w	r7, r7, #12
    273c:	46bd      	mov	sp, r7
    273e:	bc80      	pop	{r7}
    2740:	4770      	bx	lr
    2742:	bf00      	nop

00002744 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2744:	b480      	push	{r7}
    2746:	b083      	sub	sp, #12
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    274c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2750:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2754:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2758:	f2c4 0201 	movt	r2, #16385	; 0x4001
    275c:	6911      	ldr	r1, [r2, #16]
    275e:	687a      	ldr	r2, [r7, #4]
    2760:	430a      	orrs	r2, r1
    2762:	611a      	str	r2, [r3, #16]
}
    2764:	f107 070c 	add.w	r7, r7, #12
    2768:	46bd      	mov	sp, r7
    276a:	bc80      	pop	{r7}
    276c:	4770      	bx	lr
    276e:	bf00      	nop

00002770 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2770:	b480      	push	{r7}
    2772:	b085      	sub	sp, #20
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2778:	f04f 0300 	mov.w	r3, #0
    277c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    277e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2782:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2786:	695a      	ldr	r2, [r3, #20]
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	4013      	ands	r3, r2
    278c:	2b00      	cmp	r3, #0
    278e:	d003      	beq.n	2798 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    2790:	f04f 0301 	mov.w	r3, #1
    2794:	73fb      	strb	r3, [r7, #15]
    2796:	e002      	b.n	279e <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2798:	f04f 0300 	mov.w	r3, #0
    279c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    279e:	7bfb      	ldrb	r3, [r7, #15]
}
    27a0:	4618      	mov	r0, r3
    27a2:	f107 0714 	add.w	r7, r7, #20
    27a6:	46bd      	mov	sp, r7
    27a8:	bc80      	pop	{r7}
    27aa:	4770      	bx	lr

000027ac <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    27ac:	b480      	push	{r7}
    27ae:	b083      	sub	sp, #12
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    27b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    27b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    27bc:	687a      	ldr	r2, [r7, #4]
    27be:	615a      	str	r2, [r3, #20]
}
    27c0:	f107 070c 	add.w	r7, r7, #12
    27c4:	46bd      	mov	sp, r7
    27c6:	bc80      	pop	{r7}
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop

000027cc <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    27cc:	b480      	push	{r7}
    27ce:	b085      	sub	sp, #20
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    27d4:	f04f 0300 	mov.w	r3, #0
    27d8:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    27da:	f04f 0300 	mov.w	r3, #0
    27de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    27e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    27e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    27e8:	681a      	ldr	r2, [r3, #0]
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	4013      	ands	r3, r2
    27ee:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    27f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    27f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    27f8:	695a      	ldr	r2, [r3, #20]
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	4013      	ands	r3, r2
    27fe:	2b00      	cmp	r3, #0
    2800:	d006      	beq.n	2810 <EXTI_GetITStatus+0x44>
    2802:	68bb      	ldr	r3, [r7, #8]
    2804:	2b00      	cmp	r3, #0
    2806:	d003      	beq.n	2810 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2808:	f04f 0301 	mov.w	r3, #1
    280c:	73fb      	strb	r3, [r7, #15]
    280e:	e002      	b.n	2816 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    2810:	f04f 0300 	mov.w	r3, #0
    2814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2816:	7bfb      	ldrb	r3, [r7, #15]
}
    2818:	4618      	mov	r0, r3
    281a:	f107 0714 	add.w	r7, r7, #20
    281e:	46bd      	mov	sp, r7
    2820:	bc80      	pop	{r7}
    2822:	4770      	bx	lr

00002824 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2824:	b480      	push	{r7}
    2826:	b083      	sub	sp, #12
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    282c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2830:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2834:	687a      	ldr	r2, [r7, #4]
    2836:	615a      	str	r2, [r3, #20]
}
    2838:	f107 070c 	add.w	r7, r7, #12
    283c:	46bd      	mov	sp, r7
    283e:	bc80      	pop	{r7}
    2840:	4770      	bx	lr
    2842:	bf00      	nop

00002844 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2844:	b580      	push	{r7, lr}
    2846:	b082      	sub	sp, #8
    2848:	af00      	add	r7, sp, #0
    284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    2852:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2856:	429a      	cmp	r2, r3
    2858:	d10c      	bne.n	2874 <ADC_DeInit+0x30>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    285a:	f44f 7000 	mov.w	r0, #512	; 0x200
    285e:	f04f 0101 	mov.w	r1, #1
    2862:	f7fe fd25 	bl	12b0 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    2866:	f44f 7000 	mov.w	r0, #512	; 0x200
    286a:	f04f 0100 	mov.w	r1, #0
    286e:	f7fe fd1f 	bl	12b0 <RCC_APB2PeriphResetCmd>
    2872:	e026      	b.n	28c2 <ADC_DeInit+0x7e>
  }
  else if (ADCx == ADC2)
    2874:	687a      	ldr	r2, [r7, #4]
    2876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    287a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    287e:	429a      	cmp	r2, r3
    2880:	d10c      	bne.n	289c <ADC_DeInit+0x58>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    2882:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2886:	f04f 0101 	mov.w	r1, #1
    288a:	f7fe fd11 	bl	12b0 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    288e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2892:	f04f 0100 	mov.w	r1, #0
    2896:	f7fe fd0b 	bl	12b0 <RCC_APB2PeriphResetCmd>
    289a:	e012      	b.n	28c2 <ADC_DeInit+0x7e>
  }
  else
  {
    if (ADCx == ADC3)
    289c:	687a      	ldr	r2, [r7, #4]
    289e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
    28a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    28a6:	429a      	cmp	r2, r3
    28a8:	d10b      	bne.n	28c2 <ADC_DeInit+0x7e>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    28aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    28ae:	f04f 0101 	mov.w	r1, #1
    28b2:	f7fe fcfd 	bl	12b0 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    28b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    28ba:	f04f 0100 	mov.w	r1, #0
    28be:	f7fe fcf7 	bl	12b0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    28c2:	f107 0708 	add.w	r7, r7, #8
    28c6:	46bd      	mov	sp, r7
    28c8:	bd80      	pop	{r7, pc}
    28ca:	bf00      	nop

000028cc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    28cc:	b480      	push	{r7}
    28ce:	b085      	sub	sp, #20
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    28d6:	f04f 0300 	mov.w	r3, #0
    28da:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    28dc:	f04f 0300 	mov.w	r3, #0
    28e0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	685b      	ldr	r3, [r3, #4]
    28e6:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    28ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    28f2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    28f4:	683b      	ldr	r3, [r7, #0]
    28f6:	681a      	ldr	r2, [r3, #0]
    28f8:	683b      	ldr	r3, [r7, #0]
    28fa:	791b      	ldrb	r3, [r3, #4]
    28fc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2900:	4313      	orrs	r3, r2
    2902:	68fa      	ldr	r2, [r7, #12]
    2904:	4313      	orrs	r3, r2
    2906:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	68fa      	ldr	r2, [r7, #12]
    290c:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	689b      	ldr	r3, [r3, #8]
    2912:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    2914:	68fa      	ldr	r2, [r7, #12]
    2916:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
    291a:	f6cf 73f1 	movt	r3, #65521	; 0xfff1
    291e:	4013      	ands	r3, r2
    2920:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2922:	683b      	ldr	r3, [r7, #0]
    2924:	68da      	ldr	r2, [r3, #12]
    2926:	683b      	ldr	r3, [r7, #0]
    2928:	689b      	ldr	r3, [r3, #8]
    292a:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    292c:	683b      	ldr	r3, [r7, #0]
    292e:	795b      	ldrb	r3, [r3, #5]
    2930:	ea4f 0343 	mov.w	r3, r3, lsl #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2934:	4313      	orrs	r3, r2
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4313      	orrs	r3, r2
    293a:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	68fa      	ldr	r2, [r7, #12]
    2940:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2942:	687b      	ldr	r3, [r7, #4]
    2944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2946:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2948:	68fb      	ldr	r3, [r7, #12]
    294a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    294e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	7c1b      	ldrb	r3, [r3, #16]
    2954:	f103 33ff 	add.w	r3, r3, #4294967295
    2958:	b2da      	uxtb	r2, r3
    295a:	7afb      	ldrb	r3, [r7, #11]
    295c:	4313      	orrs	r3, r2
    295e:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    2960:	7afb      	ldrb	r3, [r7, #11]
    2962:	ea4f 5303 	mov.w	r3, r3, lsl #20
    2966:	68fa      	ldr	r2, [r7, #12]
    2968:	4313      	orrs	r3, r2
    296a:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	68fa      	ldr	r2, [r7, #12]
    2970:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2972:	f107 0714 	add.w	r7, r7, #20
    2976:	46bd      	mov	sp, r7
    2978:	bc80      	pop	{r7}
    297a:	4770      	bx	lr

0000297c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	f04f 0200 	mov.w	r2, #0
    298a:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	f04f 0200 	mov.w	r2, #0
    2992:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	f04f 0200 	mov.w	r2, #0
    299a:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	f04f 0200 	mov.w	r2, #0
    29a2:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	f04f 0200 	mov.w	r2, #0
    29aa:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	f04f 0201 	mov.w	r2, #1
    29b2:	741a      	strb	r2, [r3, #16]
}
    29b4:	f107 070c 	add.w	r7, r7, #12
    29b8:	46bd      	mov	sp, r7
    29ba:	bc80      	pop	{r7}
    29bc:	4770      	bx	lr
    29be:	bf00      	nop

000029c0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    29c0:	b480      	push	{r7}
    29c2:	b083      	sub	sp, #12
    29c4:	af00      	add	r7, sp, #0
    29c6:	6078      	str	r0, [r7, #4]
    29c8:	460b      	mov	r3, r1
    29ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    29cc:	78fb      	ldrb	r3, [r7, #3]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d006      	beq.n	29e0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	689b      	ldr	r3, [r3, #8]
    29d6:	f043 0201 	orr.w	r2, r3, #1
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	609a      	str	r2, [r3, #8]
    29de:	e005      	b.n	29ec <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	689b      	ldr	r3, [r3, #8]
    29e4:	f023 0201 	bic.w	r2, r3, #1
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	609a      	str	r2, [r3, #8]
  }
}
    29ec:	f107 070c 	add.w	r7, r7, #12
    29f0:	46bd      	mov	sp, r7
    29f2:	bc80      	pop	{r7}
    29f4:	4770      	bx	lr
    29f6:	bf00      	nop

000029f8 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    29f8:	b480      	push	{r7}
    29fa:	b083      	sub	sp, #12
    29fc:	af00      	add	r7, sp, #0
    29fe:	6078      	str	r0, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2a04:	78fb      	ldrb	r3, [r7, #3]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d006      	beq.n	2a18 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	689b      	ldr	r3, [r3, #8]
    2a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	609a      	str	r2, [r3, #8]
    2a16:	e005      	b.n	2a24 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	689b      	ldr	r3, [r3, #8]
    2a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	609a      	str	r2, [r3, #8]
  }
}
    2a24:	f107 070c 	add.w	r7, r7, #12
    2a28:	46bd      	mov	sp, r7
    2a2a:	bc80      	pop	{r7}
    2a2c:	4770      	bx	lr
    2a2e:	bf00      	nop

00002a30 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2a30:	b480      	push	{r7}
    2a32:	b085      	sub	sp, #20
    2a34:	af00      	add	r7, sp, #0
    2a36:	6078      	str	r0, [r7, #4]
    2a38:	4613      	mov	r3, r2
    2a3a:	460a      	mov	r2, r1
    2a3c:	807a      	strh	r2, [r7, #2]
    2a3e:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2a40:	f04f 0300 	mov.w	r3, #0
    2a44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2a46:	887b      	ldrh	r3, [r7, #2]
    2a48:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    2a4a:	787b      	ldrb	r3, [r7, #1]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d006      	beq.n	2a5e <ADC_ITConfig+0x2e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	685a      	ldr	r2, [r3, #4]
    2a54:	7bfb      	ldrb	r3, [r7, #15]
    2a56:	431a      	orrs	r2, r3
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	605a      	str	r2, [r3, #4]
    2a5c:	e007      	b.n	2a6e <ADC_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	685a      	ldr	r2, [r3, #4]
    2a62:	7bfb      	ldrb	r3, [r7, #15]
    2a64:	ea6f 0303 	mvn.w	r3, r3
    2a68:	401a      	ands	r2, r3
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	605a      	str	r2, [r3, #4]
  }
}
    2a6e:	f107 0714 	add.w	r7, r7, #20
    2a72:	46bd      	mov	sp, r7
    2a74:	bc80      	pop	{r7}
    2a76:	4770      	bx	lr

00002a78 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    2a78:	b480      	push	{r7}
    2a7a:	b083      	sub	sp, #12
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	689b      	ldr	r3, [r3, #8]
    2a84:	f043 0208 	orr.w	r2, r3, #8
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	609a      	str	r2, [r3, #8]
}
    2a8c:	f107 070c 	add.w	r7, r7, #12
    2a90:	46bd      	mov	sp, r7
    2a92:	bc80      	pop	{r7}
    2a94:	4770      	bx	lr
    2a96:	bf00      	nop

00002a98 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2a98:	b480      	push	{r7}
    2a9a:	b085      	sub	sp, #20
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2aa0:	f04f 0300 	mov.w	r3, #0
    2aa4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	689b      	ldr	r3, [r3, #8]
    2aaa:	f003 0308 	and.w	r3, r3, #8
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d003      	beq.n	2aba <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    2ab2:	f04f 0301 	mov.w	r3, #1
    2ab6:	73fb      	strb	r3, [r7, #15]
    2ab8:	e002      	b.n	2ac0 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    2aba:	f04f 0300 	mov.w	r3, #0
    2abe:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    2ac0:	7bfb      	ldrb	r3, [r7, #15]
}
    2ac2:	4618      	mov	r0, r3
    2ac4:	f107 0714 	add.w	r7, r7, #20
    2ac8:	46bd      	mov	sp, r7
    2aca:	bc80      	pop	{r7}
    2acc:	4770      	bx	lr
    2ace:	bf00      	nop

00002ad0 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    2ad0:	b480      	push	{r7}
    2ad2:	b083      	sub	sp, #12
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	689b      	ldr	r3, [r3, #8]
    2adc:	f043 0204 	orr.w	r2, r3, #4
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	609a      	str	r2, [r3, #8]
}
    2ae4:	f107 070c 	add.w	r7, r7, #12
    2ae8:	46bd      	mov	sp, r7
    2aea:	bc80      	pop	{r7}
    2aec:	4770      	bx	lr
    2aee:	bf00      	nop

00002af0 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2af0:	b480      	push	{r7}
    2af2:	b085      	sub	sp, #20
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2af8:	f04f 0300 	mov.w	r3, #0
    2afc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	689b      	ldr	r3, [r3, #8]
    2b02:	f003 0304 	and.w	r3, r3, #4
    2b06:	2b00      	cmp	r3, #0
    2b08:	d003      	beq.n	2b12 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    2b0a:	f04f 0301 	mov.w	r3, #1
    2b0e:	73fb      	strb	r3, [r7, #15]
    2b10:	e002      	b.n	2b18 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    2b12:	f04f 0300 	mov.w	r3, #0
    2b16:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    2b18:	7bfb      	ldrb	r3, [r7, #15]
}
    2b1a:	4618      	mov	r0, r3
    2b1c:	f107 0714 	add.w	r7, r7, #20
    2b20:	46bd      	mov	sp, r7
    2b22:	bc80      	pop	{r7}
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop

00002b28 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2b28:	b480      	push	{r7}
    2b2a:	b083      	sub	sp, #12
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
    2b30:	460b      	mov	r3, r1
    2b32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2b34:	78fb      	ldrb	r3, [r7, #3]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d006      	beq.n	2b48 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	689b      	ldr	r3, [r3, #8]
    2b3e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	609a      	str	r2, [r3, #8]
    2b46:	e005      	b.n	2b54 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	689b      	ldr	r3, [r3, #8]
    2b4c:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	609a      	str	r2, [r3, #8]
  }
}
    2b54:	f107 070c 	add.w	r7, r7, #12
    2b58:	46bd      	mov	sp, r7
    2b5a:	bc80      	pop	{r7}
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop

00002b60 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    2b60:	b480      	push	{r7}
    2b62:	b085      	sub	sp, #20
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2b68:	f04f 0300 	mov.w	r3, #0
    2b6c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	689b      	ldr	r3, [r3, #8]
    2b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2b76:	2b00      	cmp	r3, #0
    2b78:	d003      	beq.n	2b82 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    2b7a:	f04f 0301 	mov.w	r3, #1
    2b7e:	73fb      	strb	r3, [r7, #15]
    2b80:	e002      	b.n	2b88 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    2b82:	f04f 0300 	mov.w	r3, #0
    2b86:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    2b88:	7bfb      	ldrb	r3, [r7, #15]
}
    2b8a:	4618      	mov	r0, r3
    2b8c:	f107 0714 	add.w	r7, r7, #20
    2b90:	46bd      	mov	sp, r7
    2b92:	bc80      	pop	{r7}
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop

00002b98 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    2b98:	b480      	push	{r7}
    2b9a:	b085      	sub	sp, #20
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	460b      	mov	r3, r1
    2ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    2ba4:	f04f 0300 	mov.w	r3, #0
    2ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2baa:	f04f 0300 	mov.w	r3, #0
    2bae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	685b      	ldr	r3, [r3, #4]
    2bb4:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    2bb6:	68fb      	ldr	r3, [r7, #12]
    2bb8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    2bbc:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    2bbe:	78fb      	ldrb	r3, [r7, #3]
    2bc0:	f103 33ff 	add.w	r3, r3, #4294967295
    2bc4:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    2bc6:	68bb      	ldr	r3, [r7, #8]
    2bc8:	ea4f 3343 	mov.w	r3, r3, lsl #13
    2bcc:	68fa      	ldr	r2, [r7, #12]
    2bce:	4313      	orrs	r3, r2
    2bd0:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	68fa      	ldr	r2, [r7, #12]
    2bd6:	605a      	str	r2, [r3, #4]
}
    2bd8:	f107 0714 	add.w	r7, r7, #20
    2bdc:	46bd      	mov	sp, r7
    2bde:	bc80      	pop	{r7}
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop

00002be4 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2be4:	b480      	push	{r7}
    2be6:	b083      	sub	sp, #12
    2be8:	af00      	add	r7, sp, #0
    2bea:	6078      	str	r0, [r7, #4]
    2bec:	460b      	mov	r3, r1
    2bee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2bf0:	78fb      	ldrb	r3, [r7, #3]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d006      	beq.n	2c04 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	605a      	str	r2, [r3, #4]
    2c02:	e005      	b.n	2c10 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	685b      	ldr	r3, [r3, #4]
    2c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	605a      	str	r2, [r3, #4]
  }
}
    2c10:	f107 070c 	add.w	r7, r7, #12
    2c14:	46bd      	mov	sp, r7
    2c16:	bc80      	pop	{r7}
    2c18:	4770      	bx	lr
    2c1a:	bf00      	nop

00002c1c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2c1c:	b480      	push	{r7}
    2c1e:	b085      	sub	sp, #20
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
    2c24:	70f9      	strb	r1, [r7, #3]
    2c26:	70ba      	strb	r2, [r7, #2]
    2c28:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    2c2a:	f04f 0300 	mov.w	r3, #0
    2c2e:	60fb      	str	r3, [r7, #12]
    2c30:	f04f 0300 	mov.w	r3, #0
    2c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2c36:	78fb      	ldrb	r3, [r7, #3]
    2c38:	2b09      	cmp	r3, #9
    2c3a:	d927      	bls.n	2c8c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	68db      	ldr	r3, [r3, #12]
    2c40:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    2c42:	78fa      	ldrb	r2, [r7, #3]
    2c44:	4613      	mov	r3, r2
    2c46:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2c4a:	189b      	adds	r3, r3, r2
    2c4c:	f1a3 031e 	sub.w	r3, r3, #30
    2c50:	f04f 0207 	mov.w	r2, #7
    2c54:	fa02 f303 	lsl.w	r3, r2, r3
    2c58:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2c5a:	68bb      	ldr	r3, [r7, #8]
    2c5c:	ea6f 0303 	mvn.w	r3, r3
    2c60:	68fa      	ldr	r2, [r7, #12]
    2c62:	4013      	ands	r3, r2
    2c64:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    2c66:	7879      	ldrb	r1, [r7, #1]
    2c68:	78fa      	ldrb	r2, [r7, #3]
    2c6a:	4613      	mov	r3, r2
    2c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2c70:	189b      	adds	r3, r3, r2
    2c72:	f1a3 031e 	sub.w	r3, r3, #30
    2c76:	fa01 f303 	lsl.w	r3, r1, r3
    2c7a:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2c7c:	68fa      	ldr	r2, [r7, #12]
    2c7e:	68bb      	ldr	r3, [r7, #8]
    2c80:	4313      	orrs	r3, r2
    2c82:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	68fa      	ldr	r2, [r7, #12]
    2c88:	60da      	str	r2, [r3, #12]
    2c8a:	e022      	b.n	2cd2 <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	691b      	ldr	r3, [r3, #16]
    2c90:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    2c92:	78fa      	ldrb	r2, [r7, #3]
    2c94:	4613      	mov	r3, r2
    2c96:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2c9a:	189b      	adds	r3, r3, r2
    2c9c:	f04f 0207 	mov.w	r2, #7
    2ca0:	fa02 f303 	lsl.w	r3, r2, r3
    2ca4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2ca6:	68bb      	ldr	r3, [r7, #8]
    2ca8:	ea6f 0303 	mvn.w	r3, r3
    2cac:	68fa      	ldr	r2, [r7, #12]
    2cae:	4013      	ands	r3, r2
    2cb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    2cb2:	7879      	ldrb	r1, [r7, #1]
    2cb4:	78fa      	ldrb	r2, [r7, #3]
    2cb6:	4613      	mov	r3, r2
    2cb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2cbc:	189b      	adds	r3, r3, r2
    2cbe:	fa01 f303 	lsl.w	r3, r1, r3
    2cc2:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2cc4:	68fa      	ldr	r2, [r7, #12]
    2cc6:	68bb      	ldr	r3, [r7, #8]
    2cc8:	4313      	orrs	r3, r2
    2cca:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	68fa      	ldr	r2, [r7, #12]
    2cd0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    2cd2:	78bb      	ldrb	r3, [r7, #2]
    2cd4:	2b06      	cmp	r3, #6
    2cd6:	d827      	bhi.n	2d28 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2cdc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    2cde:	78bb      	ldrb	r3, [r7, #2]
    2ce0:	f103 32ff 	add.w	r2, r3, #4294967295
    2ce4:	4613      	mov	r3, r2
    2ce6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cea:	189b      	adds	r3, r3, r2
    2cec:	f04f 021f 	mov.w	r2, #31
    2cf0:	fa02 f303 	lsl.w	r3, r2, r3
    2cf4:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2cf6:	68bb      	ldr	r3, [r7, #8]
    2cf8:	ea6f 0303 	mvn.w	r3, r3
    2cfc:	68fa      	ldr	r2, [r7, #12]
    2cfe:	4013      	ands	r3, r2
    2d00:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    2d02:	78f9      	ldrb	r1, [r7, #3]
    2d04:	78bb      	ldrb	r3, [r7, #2]
    2d06:	f103 32ff 	add.w	r2, r3, #4294967295
    2d0a:	4613      	mov	r3, r2
    2d0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d10:	189b      	adds	r3, r3, r2
    2d12:	fa01 f303 	lsl.w	r3, r1, r3
    2d16:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2d18:	68fa      	ldr	r2, [r7, #12]
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	4313      	orrs	r3, r2
    2d1e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	68fa      	ldr	r2, [r7, #12]
    2d24:	635a      	str	r2, [r3, #52]	; 0x34
    2d26:	e051      	b.n	2dcc <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
    2d28:	78bb      	ldrb	r3, [r7, #2]
    2d2a:	2b0c      	cmp	r3, #12
    2d2c:	d827      	bhi.n	2d7e <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d32:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    2d34:	78ba      	ldrb	r2, [r7, #2]
    2d36:	4613      	mov	r3, r2
    2d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d3c:	189b      	adds	r3, r3, r2
    2d3e:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    2d42:	f04f 021f 	mov.w	r2, #31
    2d46:	fa02 f303 	lsl.w	r3, r2, r3
    2d4a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2d4c:	68bb      	ldr	r3, [r7, #8]
    2d4e:	ea6f 0303 	mvn.w	r3, r3
    2d52:	68fa      	ldr	r2, [r7, #12]
    2d54:	4013      	ands	r3, r2
    2d56:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    2d58:	78f9      	ldrb	r1, [r7, #3]
    2d5a:	78ba      	ldrb	r2, [r7, #2]
    2d5c:	4613      	mov	r3, r2
    2d5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d62:	189b      	adds	r3, r3, r2
    2d64:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    2d68:	fa01 f303 	lsl.w	r3, r1, r3
    2d6c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2d6e:	68fa      	ldr	r2, [r7, #12]
    2d70:	68bb      	ldr	r3, [r7, #8]
    2d72:	4313      	orrs	r3, r2
    2d74:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	68fa      	ldr	r2, [r7, #12]
    2d7a:	631a      	str	r2, [r3, #48]	; 0x30
    2d7c:	e026      	b.n	2dcc <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d82:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    2d84:	78ba      	ldrb	r2, [r7, #2]
    2d86:	4613      	mov	r3, r2
    2d88:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d8c:	189b      	adds	r3, r3, r2
    2d8e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    2d92:	f04f 021f 	mov.w	r2, #31
    2d96:	fa02 f303 	lsl.w	r3, r2, r3
    2d9a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2d9c:	68bb      	ldr	r3, [r7, #8]
    2d9e:	ea6f 0303 	mvn.w	r3, r3
    2da2:	68fa      	ldr	r2, [r7, #12]
    2da4:	4013      	ands	r3, r2
    2da6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    2da8:	78f9      	ldrb	r1, [r7, #3]
    2daa:	78ba      	ldrb	r2, [r7, #2]
    2dac:	4613      	mov	r3, r2
    2dae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2db2:	189b      	adds	r3, r3, r2
    2db4:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    2db8:	fa01 f303 	lsl.w	r3, r1, r3
    2dbc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2dbe:	68fa      	ldr	r2, [r7, #12]
    2dc0:	68bb      	ldr	r3, [r7, #8]
    2dc2:	4313      	orrs	r3, r2
    2dc4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	68fa      	ldr	r2, [r7, #12]
    2dca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
    2dcc:	f107 0714 	add.w	r7, r7, #20
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bc80      	pop	{r7}
    2dd4:	4770      	bx	lr
    2dd6:	bf00      	nop

00002dd8 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2dd8:	b480      	push	{r7}
    2dda:	b083      	sub	sp, #12
    2ddc:	af00      	add	r7, sp, #0
    2dde:	6078      	str	r0, [r7, #4]
    2de0:	460b      	mov	r3, r1
    2de2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2de4:	78fb      	ldrb	r3, [r7, #3]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d006      	beq.n	2df8 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	689b      	ldr	r3, [r3, #8]
    2dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	609a      	str	r2, [r3, #8]
    2df6:	e005      	b.n	2e04 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	689b      	ldr	r3, [r3, #8]
    2dfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	609a      	str	r2, [r3, #8]
  }
}
    2e04:	f107 070c 	add.w	r7, r7, #12
    2e08:	46bd      	mov	sp, r7
    2e0a:	bc80      	pop	{r7}
    2e0c:	4770      	bx	lr
    2e0e:	bf00      	nop

00002e10 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    2e10:	b480      	push	{r7}
    2e12:	b083      	sub	sp, #12
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2e1c:	b29b      	uxth	r3, r3
}
    2e1e:	4618      	mov	r0, r3
    2e20:	f107 070c 	add.w	r7, r7, #12
    2e24:	46bd      	mov	sp, r7
    2e26:	bc80      	pop	{r7}
    2e28:	4770      	bx	lr
    2e2a:	bf00      	nop

00002e2c <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    2e2c:	b480      	push	{r7}
    2e2e:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    2e30:	f242 434c 	movw	r3, #9292	; 0x244c
    2e34:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2e38:	681b      	ldr	r3, [r3, #0]
}
    2e3a:	4618      	mov	r0, r3
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bc80      	pop	{r7}
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop

00002e44 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2e44:	b480      	push	{r7}
    2e46:	b083      	sub	sp, #12
    2e48:	af00      	add	r7, sp, #0
    2e4a:	6078      	str	r0, [r7, #4]
    2e4c:	460b      	mov	r3, r1
    2e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e50:	78fb      	ldrb	r3, [r7, #3]
    2e52:	2b00      	cmp	r3, #0
    2e54:	d006      	beq.n	2e64 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	685b      	ldr	r3, [r3, #4]
    2e5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	605a      	str	r2, [r3, #4]
    2e62:	e005      	b.n	2e70 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	685b      	ldr	r3, [r3, #4]
    2e68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	605a      	str	r2, [r3, #4]
  }
}
    2e70:	f107 070c 	add.w	r7, r7, #12
    2e74:	46bd      	mov	sp, r7
    2e76:	bc80      	pop	{r7}
    2e78:	4770      	bx	lr
    2e7a:	bf00      	nop

00002e7c <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2e7c:	b480      	push	{r7}
    2e7e:	b083      	sub	sp, #12
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    2e84:	460b      	mov	r3, r1
    2e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e88:	78fb      	ldrb	r3, [r7, #3]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d006      	beq.n	2e9c <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	685b      	ldr	r3, [r3, #4]
    2e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	605a      	str	r2, [r3, #4]
    2e9a:	e005      	b.n	2ea8 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	605a      	str	r2, [r3, #4]
  }
}
    2ea8:	f107 070c 	add.w	r7, r7, #12
    2eac:	46bd      	mov	sp, r7
    2eae:	bc80      	pop	{r7}
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop

00002eb4 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b085      	sub	sp, #20
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    2ebe:	f04f 0300 	mov.w	r3, #0
    2ec2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	689b      	ldr	r3, [r3, #8]
    2ec8:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    2ed0:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    2ed2:	68fa      	ldr	r2, [r7, #12]
    2ed4:	683b      	ldr	r3, [r7, #0]
    2ed6:	4313      	orrs	r3, r2
    2ed8:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	68fa      	ldr	r2, [r7, #12]
    2ede:	609a      	str	r2, [r3, #8]
}
    2ee0:	f107 0714 	add.w	r7, r7, #20
    2ee4:	46bd      	mov	sp, r7
    2ee6:	bc80      	pop	{r7}
    2ee8:	4770      	bx	lr
    2eea:	bf00      	nop

00002eec <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2eec:	b480      	push	{r7}
    2eee:	b083      	sub	sp, #12
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	6078      	str	r0, [r7, #4]
    2ef4:	460b      	mov	r3, r1
    2ef6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ef8:	78fb      	ldrb	r3, [r7, #3]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d006      	beq.n	2f0c <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	689b      	ldr	r3, [r3, #8]
    2f02:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	609a      	str	r2, [r3, #8]
    2f0a:	e005      	b.n	2f18 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    2f0c:	687b      	ldr	r3, [r7, #4]
    2f0e:	689b      	ldr	r3, [r3, #8]
    2f10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	609a      	str	r2, [r3, #8]
  }
}
    2f18:	f107 070c 	add.w	r7, r7, #12
    2f1c:	46bd      	mov	sp, r7
    2f1e:	bc80      	pop	{r7}
    2f20:	4770      	bx	lr
    2f22:	bf00      	nop

00002f24 <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2f24:	b480      	push	{r7}
    2f26:	b083      	sub	sp, #12
    2f28:	af00      	add	r7, sp, #0
    2f2a:	6078      	str	r0, [r7, #4]
    2f2c:	460b      	mov	r3, r1
    2f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2f30:	78fb      	ldrb	r3, [r7, #3]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d006      	beq.n	2f44 <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	689b      	ldr	r3, [r3, #8]
    2f3a:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	609a      	str	r2, [r3, #8]
    2f42:	e005      	b.n	2f50 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	689b      	ldr	r3, [r3, #8]
    2f48:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	609a      	str	r2, [r3, #8]
  }
}
    2f50:	f107 070c 	add.w	r7, r7, #12
    2f54:	46bd      	mov	sp, r7
    2f56:	bc80      	pop	{r7}
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop

00002f5c <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    2f5c:	b480      	push	{r7}
    2f5e:	b085      	sub	sp, #20
    2f60:	af00      	add	r7, sp, #0
    2f62:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2f64:	f04f 0300 	mov.w	r3, #0
    2f68:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	689b      	ldr	r3, [r3, #8]
    2f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    2f72:	2b00      	cmp	r3, #0
    2f74:	d003      	beq.n	2f7e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    2f76:	f04f 0301 	mov.w	r3, #1
    2f7a:	73fb      	strb	r3, [r7, #15]
    2f7c:	e002      	b.n	2f84 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    2f7e:	f04f 0300 	mov.w	r3, #0
    2f82:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    2f84:	7bfb      	ldrb	r3, [r7, #15]
}
    2f86:	4618      	mov	r0, r3
    2f88:	f107 0714 	add.w	r7, r7, #20
    2f8c:	46bd      	mov	sp, r7
    2f8e:	bc80      	pop	{r7}
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop

00002f94 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2f94:	b480      	push	{r7}
    2f96:	b087      	sub	sp, #28
    2f98:	af00      	add	r7, sp, #0
    2f9a:	6078      	str	r0, [r7, #4]
    2f9c:	70f9      	strb	r1, [r7, #3]
    2f9e:	70ba      	strb	r2, [r7, #2]
    2fa0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    2fa2:	f04f 0300 	mov.w	r3, #0
    2fa6:	617b      	str	r3, [r7, #20]
    2fa8:	f04f 0300 	mov.w	r3, #0
    2fac:	613b      	str	r3, [r7, #16]
    2fae:	f04f 0300 	mov.w	r3, #0
    2fb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2fb4:	78fb      	ldrb	r3, [r7, #3]
    2fb6:	2b09      	cmp	r3, #9
    2fb8:	d927      	bls.n	300a <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	68db      	ldr	r3, [r3, #12]
    2fbe:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    2fc0:	78fa      	ldrb	r2, [r7, #3]
    2fc2:	4613      	mov	r3, r2
    2fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2fc8:	189b      	adds	r3, r3, r2
    2fca:	f1a3 031e 	sub.w	r3, r3, #30
    2fce:	f04f 0207 	mov.w	r2, #7
    2fd2:	fa02 f303 	lsl.w	r3, r2, r3
    2fd6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2fd8:	693b      	ldr	r3, [r7, #16]
    2fda:	ea6f 0303 	mvn.w	r3, r3
    2fde:	697a      	ldr	r2, [r7, #20]
    2fe0:	4013      	ands	r3, r2
    2fe2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    2fe4:	7879      	ldrb	r1, [r7, #1]
    2fe6:	78fa      	ldrb	r2, [r7, #3]
    2fe8:	4613      	mov	r3, r2
    2fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2fee:	189b      	adds	r3, r3, r2
    2ff0:	f1a3 031e 	sub.w	r3, r3, #30
    2ff4:	fa01 f303 	lsl.w	r3, r1, r3
    2ff8:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2ffa:	697a      	ldr	r2, [r7, #20]
    2ffc:	693b      	ldr	r3, [r7, #16]
    2ffe:	4313      	orrs	r3, r2
    3000:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	697a      	ldr	r2, [r7, #20]
    3006:	60da      	str	r2, [r3, #12]
    3008:	e022      	b.n	3050 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	691b      	ldr	r3, [r3, #16]
    300e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    3010:	78fa      	ldrb	r2, [r7, #3]
    3012:	4613      	mov	r3, r2
    3014:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3018:	189b      	adds	r3, r3, r2
    301a:	f04f 0207 	mov.w	r2, #7
    301e:	fa02 f303 	lsl.w	r3, r2, r3
    3022:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3024:	693b      	ldr	r3, [r7, #16]
    3026:	ea6f 0303 	mvn.w	r3, r3
    302a:	697a      	ldr	r2, [r7, #20]
    302c:	4013      	ands	r3, r2
    302e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    3030:	7879      	ldrb	r1, [r7, #1]
    3032:	78fa      	ldrb	r2, [r7, #3]
    3034:	4613      	mov	r3, r2
    3036:	ea4f 0343 	mov.w	r3, r3, lsl #1
    303a:	189b      	adds	r3, r3, r2
    303c:	fa01 f303 	lsl.w	r3, r1, r3
    3040:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3042:	697a      	ldr	r2, [r7, #20]
    3044:	693b      	ldr	r3, [r7, #16]
    3046:	4313      	orrs	r3, r2
    3048:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	697a      	ldr	r2, [r7, #20]
    304e:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3054:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    3056:	697b      	ldr	r3, [r7, #20]
    3058:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    305c:	ea4f 5313 	mov.w	r3, r3, lsr #20
    3060:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3062:	68fb      	ldr	r3, [r7, #12]
    3064:	b2db      	uxtb	r3, r3
    3066:	ea6f 0303 	mvn.w	r3, r3
    306a:	b2da      	uxtb	r2, r3
    306c:	78bb      	ldrb	r3, [r7, #2]
    306e:	18d3      	adds	r3, r2, r3
    3070:	b2db      	uxtb	r3, r3
    3072:	f103 0303 	add.w	r3, r3, #3
    3076:	b2db      	uxtb	r3, r3
    3078:	461a      	mov	r2, r3
    307a:	4613      	mov	r3, r2
    307c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3080:	189b      	adds	r3, r3, r2
    3082:	f04f 021f 	mov.w	r2, #31
    3086:	fa02 f303 	lsl.w	r3, r2, r3
    308a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    308c:	693b      	ldr	r3, [r7, #16]
    308e:	ea6f 0303 	mvn.w	r3, r3
    3092:	697a      	ldr	r2, [r7, #20]
    3094:	4013      	ands	r3, r2
    3096:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3098:	78f9      	ldrb	r1, [r7, #3]
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	b2db      	uxtb	r3, r3
    309e:	ea6f 0303 	mvn.w	r3, r3
    30a2:	b2da      	uxtb	r2, r3
    30a4:	78bb      	ldrb	r3, [r7, #2]
    30a6:	18d3      	adds	r3, r2, r3
    30a8:	b2db      	uxtb	r3, r3
    30aa:	f103 0303 	add.w	r3, r3, #3
    30ae:	b2db      	uxtb	r3, r3
    30b0:	461a      	mov	r2, r3
    30b2:	4613      	mov	r3, r2
    30b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30b8:	189b      	adds	r3, r3, r2
    30ba:	fa01 f303 	lsl.w	r3, r1, r3
    30be:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    30c0:	697a      	ldr	r2, [r7, #20]
    30c2:	693b      	ldr	r3, [r7, #16]
    30c4:	4313      	orrs	r3, r2
    30c6:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	697a      	ldr	r2, [r7, #20]
    30cc:	639a      	str	r2, [r3, #56]	; 0x38
}
    30ce:	f107 071c 	add.w	r7, r7, #28
    30d2:	46bd      	mov	sp, r7
    30d4:	bc80      	pop	{r7}
    30d6:	4770      	bx	lr

000030d8 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    30d8:	b480      	push	{r7}
    30da:	b085      	sub	sp, #20
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
    30e0:	460b      	mov	r3, r1
    30e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    30e4:	f04f 0300 	mov.w	r3, #0
    30e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    30ea:	f04f 0300 	mov.w	r3, #0
    30ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30f4:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    30fc:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    30fe:	78fb      	ldrb	r3, [r7, #3]
    3100:	f103 33ff 	add.w	r3, r3, #4294967295
    3104:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    3106:	68bb      	ldr	r3, [r7, #8]
    3108:	ea4f 5303 	mov.w	r3, r3, lsl #20
    310c:	68fa      	ldr	r2, [r7, #12]
    310e:	4313      	orrs	r3, r2
    3110:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	68fa      	ldr	r2, [r7, #12]
    3116:	639a      	str	r2, [r3, #56]	; 0x38
}
    3118:	f107 0714 	add.w	r7, r7, #20
    311c:	46bd      	mov	sp, r7
    311e:	bc80      	pop	{r7}
    3120:	4770      	bx	lr
    3122:	bf00      	nop

00003124 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    3124:	b480      	push	{r7}
    3126:	b085      	sub	sp, #20
    3128:	af00      	add	r7, sp, #0
    312a:	6078      	str	r0, [r7, #4]
    312c:	4613      	mov	r3, r2
    312e:	460a      	mov	r2, r1
    3130:	70fa      	strb	r2, [r7, #3]
    3132:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    3134:	f04f 0300 	mov.w	r3, #0
    3138:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    313e:	78fa      	ldrb	r2, [r7, #3]
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	18d3      	adds	r3, r2, r3
    3144:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    3146:	68fb      	ldr	r3, [r7, #12]
    3148:	883a      	ldrh	r2, [r7, #0]
    314a:	601a      	str	r2, [r3, #0]
}
    314c:	f107 0714 	add.w	r7, r7, #20
    3150:	46bd      	mov	sp, r7
    3152:	bc80      	pop	{r7}
    3154:	4770      	bx	lr
    3156:	bf00      	nop

00003158 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    3158:	b480      	push	{r7}
    315a:	b085      	sub	sp, #20
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
    3160:	460b      	mov	r3, r1
    3162:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    3164:	f04f 0300 	mov.w	r3, #0
    3168:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    316e:	78fa      	ldrb	r2, [r7, #3]
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	18d3      	adds	r3, r2, r3
    3174:	f103 0328 	add.w	r3, r3, #40	; 0x28
    3178:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	681b      	ldr	r3, [r3, #0]
    317e:	b29b      	uxth	r3, r3
}
    3180:	4618      	mov	r0, r3
    3182:	f107 0714 	add.w	r7, r7, #20
    3186:	46bd      	mov	sp, r7
    3188:	bc80      	pop	{r7}
    318a:	4770      	bx	lr

0000318c <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    318c:	b480      	push	{r7}
    318e:	b085      	sub	sp, #20
    3190:	af00      	add	r7, sp, #0
    3192:	6078      	str	r0, [r7, #4]
    3194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    3196:	f04f 0300 	mov.w	r3, #0
    319a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	685b      	ldr	r3, [r3, #4]
    31a0:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    31a2:	68fb      	ldr	r3, [r7, #12]
    31a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    31a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    31ac:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    31ae:	68fa      	ldr	r2, [r7, #12]
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	4313      	orrs	r3, r2
    31b4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	68fa      	ldr	r2, [r7, #12]
    31ba:	605a      	str	r2, [r3, #4]
}
    31bc:	f107 0714 	add.w	r7, r7, #20
    31c0:	46bd      	mov	sp, r7
    31c2:	bc80      	pop	{r7}
    31c4:	4770      	bx	lr
    31c6:	bf00      	nop

000031c8 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    31c8:	b480      	push	{r7}
    31ca:	b083      	sub	sp, #12
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
    31d0:	4613      	mov	r3, r2
    31d2:	460a      	mov	r2, r1
    31d4:	807a      	strh	r2, [r7, #2]
    31d6:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    31d8:	887a      	ldrh	r2, [r7, #2]
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    31de:	883a      	ldrh	r2, [r7, #0]
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	629a      	str	r2, [r3, #40]	; 0x28
}
    31e4:	f107 070c 	add.w	r7, r7, #12
    31e8:	46bd      	mov	sp, r7
    31ea:	bc80      	pop	{r7}
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop

000031f0 <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    31f0:	b480      	push	{r7}
    31f2:	b085      	sub	sp, #20
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
    31f8:	460b      	mov	r3, r1
    31fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    31fc:	f04f 0300 	mov.w	r3, #0
    3200:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	685b      	ldr	r3, [r3, #4]
    3206:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    3208:	68fb      	ldr	r3, [r7, #12]
    320a:	f023 031f 	bic.w	r3, r3, #31
    320e:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    3210:	78fb      	ldrb	r3, [r7, #3]
    3212:	68fa      	ldr	r2, [r7, #12]
    3214:	4313      	orrs	r3, r2
    3216:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	68fa      	ldr	r2, [r7, #12]
    321c:	605a      	str	r2, [r3, #4]
}
    321e:	f107 0714 	add.w	r7, r7, #20
    3222:	46bd      	mov	sp, r7
    3224:	bc80      	pop	{r7}
    3226:	4770      	bx	lr

00003228 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    3228:	b480      	push	{r7}
    322a:	b083      	sub	sp, #12
    322c:	af00      	add	r7, sp, #0
    322e:	4603      	mov	r3, r0
    3230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3232:	79fb      	ldrb	r3, [r7, #7]
    3234:	2b00      	cmp	r3, #0
    3236:	d00c      	beq.n	3252 <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    3238:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    323c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3240:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    3244:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3248:	6892      	ldr	r2, [r2, #8]
    324a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    324e:	609a      	str	r2, [r3, #8]
    3250:	e00b      	b.n	326a <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    3252:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    3256:	f2c4 0301 	movt	r3, #16385	; 0x4001
    325a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    325e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3262:	6892      	ldr	r2, [r2, #8]
    3264:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    3268:	609a      	str	r2, [r3, #8]
  }
}
    326a:	f107 070c 	add.w	r7, r7, #12
    326e:	46bd      	mov	sp, r7
    3270:	bc80      	pop	{r7}
    3272:	4770      	bx	lr

00003274 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3274:	b480      	push	{r7}
    3276:	b085      	sub	sp, #20
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
    327c:	460b      	mov	r3, r1
    327e:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    3280:	f04f 0300 	mov.w	r3, #0
    3284:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	681a      	ldr	r2, [r3, #0]
    328a:	78fb      	ldrb	r3, [r7, #3]
    328c:	4013      	ands	r3, r2
    328e:	2b00      	cmp	r3, #0
    3290:	d003      	beq.n	329a <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    3292:	f04f 0301 	mov.w	r3, #1
    3296:	73fb      	strb	r3, [r7, #15]
    3298:	e002      	b.n	32a0 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    329a:	f04f 0300 	mov.w	r3, #0
    329e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    32a0:	7bfb      	ldrb	r3, [r7, #15]
}
    32a2:	4618      	mov	r0, r3
    32a4:	f107 0714 	add.w	r7, r7, #20
    32a8:	46bd      	mov	sp, r7
    32aa:	bc80      	pop	{r7}
    32ac:	4770      	bx	lr
    32ae:	bf00      	nop

000032b0 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    32b0:	b480      	push	{r7}
    32b2:	b083      	sub	sp, #12
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
    32b8:	460b      	mov	r3, r1
    32ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    32bc:	78fb      	ldrb	r3, [r7, #3]
    32be:	ea6f 0203 	mvn.w	r2, r3
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	601a      	str	r2, [r3, #0]
}
    32c6:	f107 070c 	add.w	r7, r7, #12
    32ca:	46bd      	mov	sp, r7
    32cc:	bc80      	pop	{r7}
    32ce:	4770      	bx	lr

000032d0 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    32d0:	b480      	push	{r7}
    32d2:	b087      	sub	sp, #28
    32d4:	af00      	add	r7, sp, #0
    32d6:	6078      	str	r0, [r7, #4]
    32d8:	460b      	mov	r3, r1
    32da:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    32dc:	f04f 0300 	mov.w	r3, #0
    32e0:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    32e2:	f04f 0300 	mov.w	r3, #0
    32e6:	613b      	str	r3, [r7, #16]
    32e8:	f04f 0300 	mov.w	r3, #0
    32ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    32ee:	887b      	ldrh	r3, [r7, #2]
    32f0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    32f4:	b29b      	uxth	r3, r3
    32f6:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	685a      	ldr	r2, [r3, #4]
    32fc:	887b      	ldrh	r3, [r7, #2]
    32fe:	b2db      	uxtb	r3, r3
    3300:	4013      	ands	r3, r2
    3302:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	681a      	ldr	r2, [r3, #0]
    3308:	693b      	ldr	r3, [r7, #16]
    330a:	4013      	ands	r3, r2
    330c:	2b00      	cmp	r3, #0
    330e:	d006      	beq.n	331e <ADC_GetITStatus+0x4e>
    3310:	68fb      	ldr	r3, [r7, #12]
    3312:	2b00      	cmp	r3, #0
    3314:	d003      	beq.n	331e <ADC_GetITStatus+0x4e>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    3316:	f04f 0301 	mov.w	r3, #1
    331a:	75fb      	strb	r3, [r7, #23]
    331c:	e002      	b.n	3324 <ADC_GetITStatus+0x54>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    331e:	f04f 0300 	mov.w	r3, #0
    3322:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    3324:	7dfb      	ldrb	r3, [r7, #23]
}
    3326:	4618      	mov	r0, r3
    3328:	f107 071c 	add.w	r7, r7, #28
    332c:	46bd      	mov	sp, r7
    332e:	bc80      	pop	{r7}
    3330:	4770      	bx	lr
    3332:	bf00      	nop

00003334 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3334:	b480      	push	{r7}
    3336:	b085      	sub	sp, #20
    3338:	af00      	add	r7, sp, #0
    333a:	6078      	str	r0, [r7, #4]
    333c:	460b      	mov	r3, r1
    333e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    3340:	f04f 0300 	mov.w	r3, #0
    3344:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    3346:	887b      	ldrh	r3, [r7, #2]
    3348:	ea4f 2313 	mov.w	r3, r3, lsr #8
    334c:	b29b      	uxth	r3, r3
    334e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    3350:	7bfb      	ldrb	r3, [r7, #15]
    3352:	ea6f 0203 	mvn.w	r2, r3
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	601a      	str	r2, [r3, #0]
}
    335a:	f107 0714 	add.w	r7, r7, #20
    335e:	46bd      	mov	sp, r7
    3360:	bc80      	pop	{r7}
    3362:	4770      	bx	lr

00003364 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    3364:	b580      	push	{r7, lr}
    3366:	b082      	sub	sp, #8
    3368:	af00      	add	r7, sp, #0
    336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    336c:	687a      	ldr	r2, [r7, #4]
    336e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3372:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3376:	429a      	cmp	r2, r3
    3378:	d10c      	bne.n	3394 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    337a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    337e:	f04f 0101 	mov.w	r1, #1
    3382:	f7fd ff95 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    3386:	f44f 6000 	mov.w	r0, #2048	; 0x800
    338a:	f04f 0100 	mov.w	r1, #0
    338e:	f7fd ff8f 	bl	12b0 <RCC_APB2PeriphResetCmd>
    3392:	e13b      	b.n	360c <TIM_DeInit+0x2a8>
  }     
  else if (TIMx == TIM2)
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    339a:	d10c      	bne.n	33b6 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    339c:	f04f 0001 	mov.w	r0, #1
    33a0:	f04f 0101 	mov.w	r1, #1
    33a4:	f7fd ffae 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    33a8:	f04f 0001 	mov.w	r0, #1
    33ac:	f04f 0100 	mov.w	r1, #0
    33b0:	f7fd ffa8 	bl	1304 <RCC_APB1PeriphResetCmd>
    33b4:	e12a      	b.n	360c <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM3)
    33b6:	687a      	ldr	r2, [r7, #4]
    33b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    33bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    33c0:	429a      	cmp	r2, r3
    33c2:	d10c      	bne.n	33de <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    33c4:	f04f 0002 	mov.w	r0, #2
    33c8:	f04f 0101 	mov.w	r1, #1
    33cc:	f7fd ff9a 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    33d0:	f04f 0002 	mov.w	r0, #2
    33d4:	f04f 0100 	mov.w	r1, #0
    33d8:	f7fd ff94 	bl	1304 <RCC_APB1PeriphResetCmd>
    33dc:	e116      	b.n	360c <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM4)
    33de:	687a      	ldr	r2, [r7, #4]
    33e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    33e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    33e8:	429a      	cmp	r2, r3
    33ea:	d10c      	bne.n	3406 <TIM_DeInit+0xa2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    33ec:	f04f 0004 	mov.w	r0, #4
    33f0:	f04f 0101 	mov.w	r1, #1
    33f4:	f7fd ff86 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    33f8:	f04f 0004 	mov.w	r0, #4
    33fc:	f04f 0100 	mov.w	r1, #0
    3400:	f7fd ff80 	bl	1304 <RCC_APB1PeriphResetCmd>
    3404:	e102      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM5)
    3406:	687a      	ldr	r2, [r7, #4]
    3408:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    340c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3410:	429a      	cmp	r2, r3
    3412:	d10c      	bne.n	342e <TIM_DeInit+0xca>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    3414:	f04f 0008 	mov.w	r0, #8
    3418:	f04f 0101 	mov.w	r1, #1
    341c:	f7fd ff72 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    3420:	f04f 0008 	mov.w	r0, #8
    3424:	f04f 0100 	mov.w	r1, #0
    3428:	f7fd ff6c 	bl	1304 <RCC_APB1PeriphResetCmd>
    342c:	e0ee      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM6)
    342e:	687a      	ldr	r2, [r7, #4]
    3430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3434:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3438:	429a      	cmp	r2, r3
    343a:	d10c      	bne.n	3456 <TIM_DeInit+0xf2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    343c:	f04f 0010 	mov.w	r0, #16
    3440:	f04f 0101 	mov.w	r1, #1
    3444:	f7fd ff5e 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    3448:	f04f 0010 	mov.w	r0, #16
    344c:	f04f 0100 	mov.w	r1, #0
    3450:	f7fd ff58 	bl	1304 <RCC_APB1PeriphResetCmd>
    3454:	e0da      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM7)
    3456:	687a      	ldr	r2, [r7, #4]
    3458:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    345c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3460:	429a      	cmp	r2, r3
    3462:	d10c      	bne.n	347e <TIM_DeInit+0x11a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    3464:	f04f 0020 	mov.w	r0, #32
    3468:	f04f 0101 	mov.w	r1, #1
    346c:	f7fd ff4a 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    3470:	f04f 0020 	mov.w	r0, #32
    3474:	f04f 0100 	mov.w	r1, #0
    3478:	f7fd ff44 	bl	1304 <RCC_APB1PeriphResetCmd>
    347c:	e0c6      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM8)
    347e:	687a      	ldr	r2, [r7, #4]
    3480:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3488:	429a      	cmp	r2, r3
    348a:	d10c      	bne.n	34a6 <TIM_DeInit+0x142>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    348c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3490:	f04f 0101 	mov.w	r1, #1
    3494:	f7fd ff0c 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    3498:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    349c:	f04f 0100 	mov.w	r1, #0
    34a0:	f7fd ff06 	bl	12b0 <RCC_APB2PeriphResetCmd>
    34a4:	e0b2      	b.n	360c <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM9)
    34a6:	687a      	ldr	r2, [r7, #4]
    34a8:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    34ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    34b0:	429a      	cmp	r2, r3
    34b2:	d10c      	bne.n	34ce <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    34b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    34b8:	f04f 0101 	mov.w	r1, #1
    34bc:	f7fd fef8 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    34c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    34c4:	f04f 0100 	mov.w	r1, #0
    34c8:	f7fd fef2 	bl	12b0 <RCC_APB2PeriphResetCmd>
    34cc:	e09e      	b.n	360c <TIM_DeInit+0x2a8>
   }  
  else if (TIMx == TIM10)
    34ce:	687a      	ldr	r2, [r7, #4]
    34d0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    34d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    34d8:	429a      	cmp	r2, r3
    34da:	d10c      	bne.n	34f6 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    34dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    34e0:	f04f 0101 	mov.w	r1, #1
    34e4:	f7fd fee4 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    34e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    34ec:	f04f 0100 	mov.w	r1, #0
    34f0:	f7fd fede 	bl	12b0 <RCC_APB2PeriphResetCmd>
    34f4:	e08a      	b.n	360c <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM11) 
    34f6:	687a      	ldr	r2, [r7, #4]
    34f8:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
    34fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3500:	429a      	cmp	r2, r3
    3502:	d10c      	bne.n	351e <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    3504:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3508:	f04f 0101 	mov.w	r1, #1
    350c:	f7fd fed0 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    3510:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3514:	f04f 0100 	mov.w	r1, #0
    3518:	f7fd feca 	bl	12b0 <RCC_APB2PeriphResetCmd>
    351c:	e076      	b.n	360c <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM12)
    351e:	687a      	ldr	r2, [r7, #4]
    3520:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    3524:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3528:	429a      	cmp	r2, r3
    352a:	d10c      	bne.n	3546 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    352c:	f04f 0040 	mov.w	r0, #64	; 0x40
    3530:	f04f 0101 	mov.w	r1, #1
    3534:	f7fd fee6 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    3538:	f04f 0040 	mov.w	r0, #64	; 0x40
    353c:	f04f 0100 	mov.w	r1, #0
    3540:	f7fd fee0 	bl	1304 <RCC_APB1PeriphResetCmd>
    3544:	e062      	b.n	360c <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM13) 
    3546:	687a      	ldr	r2, [r7, #4]
    3548:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    354c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3550:	429a      	cmp	r2, r3
    3552:	d10c      	bne.n	356e <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    3554:	f04f 0080 	mov.w	r0, #128	; 0x80
    3558:	f04f 0101 	mov.w	r1, #1
    355c:	f7fd fed2 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    3560:	f04f 0080 	mov.w	r0, #128	; 0x80
    3564:	f04f 0100 	mov.w	r1, #0
    3568:	f7fd fecc 	bl	1304 <RCC_APB1PeriphResetCmd>
    356c:	e04e      	b.n	360c <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM14) 
    356e:	687a      	ldr	r2, [r7, #4]
    3570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3574:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3578:	429a      	cmp	r2, r3
    357a:	d10c      	bne.n	3596 <TIM_DeInit+0x232>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    357c:	f44f 7080 	mov.w	r0, #256	; 0x100
    3580:	f04f 0101 	mov.w	r1, #1
    3584:	f7fd febe 	bl	1304 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    3588:	f44f 7080 	mov.w	r0, #256	; 0x100
    358c:	f04f 0100 	mov.w	r1, #0
    3590:	f7fd feb8 	bl	1304 <RCC_APB1PeriphResetCmd>
    3594:	e03a      	b.n	360c <TIM_DeInit+0x2a8>
  }        
  else if (TIMx == TIM15)
    3596:	687a      	ldr	r2, [r7, #4]
    3598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    359c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    35a0:	429a      	cmp	r2, r3
    35a2:	d10c      	bne.n	35be <TIM_DeInit+0x25a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    35a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    35a8:	f04f 0101 	mov.w	r1, #1
    35ac:	f7fd fe80 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    35b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    35b4:	f04f 0100 	mov.w	r1, #0
    35b8:	f7fd fe7a 	bl	12b0 <RCC_APB2PeriphResetCmd>
    35bc:	e026      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM16)
    35be:	687a      	ldr	r2, [r7, #4]
    35c0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    35c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    35c8:	429a      	cmp	r2, r3
    35ca:	d10c      	bne.n	35e6 <TIM_DeInit+0x282>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    35cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    35d0:	f04f 0101 	mov.w	r1, #1
    35d4:	f7fd fe6c 	bl	12b0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    35d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    35dc:	f04f 0100 	mov.w	r1, #0
    35e0:	f7fd fe66 	bl	12b0 <RCC_APB2PeriphResetCmd>
    35e4:	e012      	b.n	360c <TIM_DeInit+0x2a8>
  } 
  else
  {
    if (TIMx == TIM17)
    35e6:	687a      	ldr	r2, [r7, #4]
    35e8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    35ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    35f0:	429a      	cmp	r2, r3
    35f2:	d10b      	bne.n	360c <TIM_DeInit+0x2a8>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    35f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35f8:	f04f 0101 	mov.w	r1, #1
    35fc:	f7fd fe58 	bl	12b0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    3600:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3604:	f04f 0100 	mov.w	r1, #0
    3608:	f7fd fe52 	bl	12b0 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    360c:	f107 0708 	add.w	r7, r7, #8
    3610:	46bd      	mov	sp, r7
    3612:	bd80      	pop	{r7, pc}

00003614 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3614:	b480      	push	{r7}
    3616:	b085      	sub	sp, #20
    3618:	af00      	add	r7, sp, #0
    361a:	6078      	str	r0, [r7, #4]
    361c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    361e:	f04f 0300 	mov.w	r3, #0
    3622:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	881b      	ldrh	r3, [r3, #0]
    3628:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    362a:	687a      	ldr	r2, [r7, #4]
    362c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3630:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3634:	429a      	cmp	r2, r3
    3636:	d01f      	beq.n	3678 <TIM_TimeBaseInit+0x64>
    3638:	687a      	ldr	r2, [r7, #4]
    363a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    363e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3642:	429a      	cmp	r2, r3
    3644:	d018      	beq.n	3678 <TIM_TimeBaseInit+0x64>
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    364c:	d014      	beq.n	3678 <TIM_TimeBaseInit+0x64>
    364e:	687a      	ldr	r2, [r7, #4]
    3650:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3654:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3658:	429a      	cmp	r2, r3
    365a:	d00d      	beq.n	3678 <TIM_TimeBaseInit+0x64>
    365c:	687a      	ldr	r2, [r7, #4]
    365e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3662:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3666:	429a      	cmp	r2, r3
    3668:	d006      	beq.n	3678 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    366a:	687a      	ldr	r2, [r7, #4]
    366c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3670:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3674:	429a      	cmp	r2, r3
    3676:	d108      	bne.n	368a <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    3678:	89fb      	ldrh	r3, [r7, #14]
    367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    367e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    3680:	683b      	ldr	r3, [r7, #0]
    3682:	885a      	ldrh	r2, [r3, #2]
    3684:	89fb      	ldrh	r3, [r7, #14]
    3686:	4313      	orrs	r3, r2
    3688:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    368a:	687a      	ldr	r2, [r7, #4]
    368c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3690:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3694:	429a      	cmp	r2, r3
    3696:	d00f      	beq.n	36b8 <TIM_TimeBaseInit+0xa4>
    3698:	687a      	ldr	r2, [r7, #4]
    369a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    369e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    36a2:	429a      	cmp	r2, r3
    36a4:	d008      	beq.n	36b8 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    36a6:	89fb      	ldrh	r3, [r7, #14]
    36a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    36ac:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	88da      	ldrh	r2, [r3, #6]
    36b2:	89fb      	ldrh	r3, [r7, #14]
    36b4:	4313      	orrs	r3, r2
    36b6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	89fa      	ldrh	r2, [r7, #14]
    36bc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	889a      	ldrh	r2, [r3, #4]
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	881a      	ldrh	r2, [r3, #0]
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    36ce:	687a      	ldr	r2, [r7, #4]
    36d0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    36d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    36d8:	429a      	cmp	r2, r3
    36da:	d01b      	beq.n	3714 <TIM_TimeBaseInit+0x100>
    36dc:	687a      	ldr	r2, [r7, #4]
    36de:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    36e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    36e6:	429a      	cmp	r2, r3
    36e8:	d014      	beq.n	3714 <TIM_TimeBaseInit+0x100>
    36ea:	687a      	ldr	r2, [r7, #4]
    36ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    36f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    36f4:	429a      	cmp	r2, r3
    36f6:	d00d      	beq.n	3714 <TIM_TimeBaseInit+0x100>
    36f8:	687a      	ldr	r2, [r7, #4]
    36fa:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    36fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3702:	429a      	cmp	r2, r3
    3704:	d006      	beq.n	3714 <TIM_TimeBaseInit+0x100>
    3706:	687a      	ldr	r2, [r7, #4]
    3708:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    370c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3710:	429a      	cmp	r2, r3
    3712:	d104      	bne.n	371e <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    3714:	683b      	ldr	r3, [r7, #0]
    3716:	7a1b      	ldrb	r3, [r3, #8]
    3718:	461a      	mov	r2, r3
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	f04f 0201 	mov.w	r2, #1
    3724:	829a      	strh	r2, [r3, #20]
}
    3726:	f107 0714 	add.w	r7, r7, #20
    372a:	46bd      	mov	sp, r7
    372c:	bc80      	pop	{r7}
    372e:	4770      	bx	lr

00003730 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3730:	b480      	push	{r7}
    3732:	b085      	sub	sp, #20
    3734:	af00      	add	r7, sp, #0
    3736:	6078      	str	r0, [r7, #4]
    3738:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    373a:	f04f 0300 	mov.w	r3, #0
    373e:	817b      	strh	r3, [r7, #10]
    3740:	f04f 0300 	mov.w	r3, #0
    3744:	81fb      	strh	r3, [r7, #14]
    3746:	f04f 0300 	mov.w	r3, #0
    374a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	8c1b      	ldrh	r3, [r3, #32]
    3750:	b29b      	uxth	r3, r3
    3752:	f023 0301 	bic.w	r3, r3, #1
    3756:	b29a      	uxth	r2, r3
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	8c1b      	ldrh	r3, [r3, #32]
    3760:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	889b      	ldrh	r3, [r3, #4]
    3766:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	8b1b      	ldrh	r3, [r3, #24]
    376c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    376e:	897b      	ldrh	r3, [r7, #10]
    3770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3774:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    3776:	897b      	ldrh	r3, [r7, #10]
    3778:	f023 0303 	bic.w	r3, r3, #3
    377c:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    377e:	683b      	ldr	r3, [r7, #0]
    3780:	881a      	ldrh	r2, [r3, #0]
    3782:	897b      	ldrh	r3, [r7, #10]
    3784:	4313      	orrs	r3, r2
    3786:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    3788:	89fb      	ldrh	r3, [r7, #14]
    378a:	f023 0302 	bic.w	r3, r3, #2
    378e:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    3790:	683b      	ldr	r3, [r7, #0]
    3792:	891a      	ldrh	r2, [r3, #8]
    3794:	89fb      	ldrh	r3, [r7, #14]
    3796:	4313      	orrs	r3, r2
    3798:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    379a:	683b      	ldr	r3, [r7, #0]
    379c:	885a      	ldrh	r2, [r3, #2]
    379e:	89fb      	ldrh	r3, [r7, #14]
    37a0:	4313      	orrs	r3, r2
    37a2:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    37a4:	687a      	ldr	r2, [r7, #4]
    37a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    37aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37ae:	429a      	cmp	r2, r3
    37b0:	d01b      	beq.n	37ea <TIM_OC1Init+0xba>
    37b2:	687a      	ldr	r2, [r7, #4]
    37b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    37b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37bc:	429a      	cmp	r2, r3
    37be:	d014      	beq.n	37ea <TIM_OC1Init+0xba>
    37c0:	687a      	ldr	r2, [r7, #4]
    37c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    37c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37ca:	429a      	cmp	r2, r3
    37cc:	d00d      	beq.n	37ea <TIM_OC1Init+0xba>
    37ce:	687a      	ldr	r2, [r7, #4]
    37d0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    37d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37d8:	429a      	cmp	r2, r3
    37da:	d006      	beq.n	37ea <TIM_OC1Init+0xba>
     (TIMx == TIM16)|| (TIMx == TIM17))
    37dc:	687a      	ldr	r2, [r7, #4]
    37de:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    37e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37e6:	429a      	cmp	r2, r3
    37e8:	d123      	bne.n	3832 <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    37ea:	89fb      	ldrh	r3, [r7, #14]
    37ec:	f023 0308 	bic.w	r3, r3, #8
    37f0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	895a      	ldrh	r2, [r3, #10]
    37f6:	89fb      	ldrh	r3, [r7, #14]
    37f8:	4313      	orrs	r3, r2
    37fa:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    37fc:	89fb      	ldrh	r3, [r7, #14]
    37fe:	f023 0304 	bic.w	r3, r3, #4
    3802:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	889a      	ldrh	r2, [r3, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	4313      	orrs	r3, r2
    380c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    380e:	89bb      	ldrh	r3, [r7, #12]
    3810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3814:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    3816:	89bb      	ldrh	r3, [r7, #12]
    3818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    381c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    381e:	683b      	ldr	r3, [r7, #0]
    3820:	899a      	ldrh	r2, [r3, #12]
    3822:	89bb      	ldrh	r3, [r7, #12]
    3824:	4313      	orrs	r3, r2
    3826:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    3828:	683b      	ldr	r3, [r7, #0]
    382a:	89da      	ldrh	r2, [r3, #14]
    382c:	89bb      	ldrh	r3, [r7, #12]
    382e:	4313      	orrs	r3, r2
    3830:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	89ba      	ldrh	r2, [r7, #12]
    3836:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	897a      	ldrh	r2, [r7, #10]
    383c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    383e:	683b      	ldr	r3, [r7, #0]
    3840:	88da      	ldrh	r2, [r3, #6]
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	89fa      	ldrh	r2, [r7, #14]
    384a:	841a      	strh	r2, [r3, #32]
}
    384c:	f107 0714 	add.w	r7, r7, #20
    3850:	46bd      	mov	sp, r7
    3852:	bc80      	pop	{r7}
    3854:	4770      	bx	lr
    3856:	bf00      	nop

00003858 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3862:	f04f 0300 	mov.w	r3, #0
    3866:	817b      	strh	r3, [r7, #10]
    3868:	f04f 0300 	mov.w	r3, #0
    386c:	81fb      	strh	r3, [r7, #14]
    386e:	f04f 0300 	mov.w	r3, #0
    3872:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	8c1b      	ldrh	r3, [r3, #32]
    3878:	b29b      	uxth	r3, r3
    387a:	f023 0310 	bic.w	r3, r3, #16
    387e:	b29a      	uxth	r2, r3
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	8c1b      	ldrh	r3, [r3, #32]
    3888:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	889b      	ldrh	r3, [r3, #4]
    388e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	8b1b      	ldrh	r3, [r3, #24]
    3894:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    3896:	897b      	ldrh	r3, [r7, #10]
    3898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    389c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    389e:	897b      	ldrh	r3, [r7, #10]
    38a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    38a4:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    38a6:	683b      	ldr	r3, [r7, #0]
    38a8:	881b      	ldrh	r3, [r3, #0]
    38aa:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ae:	b29a      	uxth	r2, r3
    38b0:	897b      	ldrh	r3, [r7, #10]
    38b2:	4313      	orrs	r3, r2
    38b4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    38b6:	89fb      	ldrh	r3, [r7, #14]
    38b8:	f023 0320 	bic.w	r3, r3, #32
    38bc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    38be:	683b      	ldr	r3, [r7, #0]
    38c0:	891b      	ldrh	r3, [r3, #8]
    38c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    38c6:	b29a      	uxth	r2, r3
    38c8:	89fb      	ldrh	r3, [r7, #14]
    38ca:	4313      	orrs	r3, r2
    38cc:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    38ce:	683b      	ldr	r3, [r7, #0]
    38d0:	885b      	ldrh	r3, [r3, #2]
    38d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    38d6:	b29a      	uxth	r2, r3
    38d8:	89fb      	ldrh	r3, [r7, #14]
    38da:	4313      	orrs	r3, r2
    38dc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    38de:	687a      	ldr	r2, [r7, #4]
    38e0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    38e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    38e8:	429a      	cmp	r2, r3
    38ea:	d006      	beq.n	38fa <TIM_OC2Init+0xa2>
    38ec:	687a      	ldr	r2, [r7, #4]
    38ee:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    38f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    38f6:	429a      	cmp	r2, r3
    38f8:	d12f      	bne.n	395a <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    38fa:	89fb      	ldrh	r3, [r7, #14]
    38fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3900:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    3902:	683b      	ldr	r3, [r7, #0]
    3904:	895b      	ldrh	r3, [r3, #10]
    3906:	ea4f 1303 	mov.w	r3, r3, lsl #4
    390a:	b29a      	uxth	r2, r3
    390c:	89fb      	ldrh	r3, [r7, #14]
    390e:	4313      	orrs	r3, r2
    3910:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    3912:	89fb      	ldrh	r3, [r7, #14]
    3914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3918:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    391a:	683b      	ldr	r3, [r7, #0]
    391c:	889b      	ldrh	r3, [r3, #4]
    391e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3922:	b29a      	uxth	r2, r3
    3924:	89fb      	ldrh	r3, [r7, #14]
    3926:	4313      	orrs	r3, r2
    3928:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    392a:	89bb      	ldrh	r3, [r7, #12]
    392c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3930:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    3932:	89bb      	ldrh	r3, [r7, #12]
    3934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3938:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    393a:	683b      	ldr	r3, [r7, #0]
    393c:	899b      	ldrh	r3, [r3, #12]
    393e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3942:	b29a      	uxth	r2, r3
    3944:	89bb      	ldrh	r3, [r7, #12]
    3946:	4313      	orrs	r3, r2
    3948:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    394a:	683b      	ldr	r3, [r7, #0]
    394c:	89db      	ldrh	r3, [r3, #14]
    394e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3952:	b29a      	uxth	r2, r3
    3954:	89bb      	ldrh	r3, [r7, #12]
    3956:	4313      	orrs	r3, r2
    3958:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    395a:	687b      	ldr	r3, [r7, #4]
    395c:	89ba      	ldrh	r2, [r7, #12]
    395e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	897a      	ldrh	r2, [r7, #10]
    3964:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    3966:	683b      	ldr	r3, [r7, #0]
    3968:	88da      	ldrh	r2, [r3, #6]
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	89fa      	ldrh	r2, [r7, #14]
    3972:	841a      	strh	r2, [r3, #32]
}
    3974:	f107 0714 	add.w	r7, r7, #20
    3978:	46bd      	mov	sp, r7
    397a:	bc80      	pop	{r7}
    397c:	4770      	bx	lr
    397e:	bf00      	nop

00003980 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3980:	b480      	push	{r7}
    3982:	b085      	sub	sp, #20
    3984:	af00      	add	r7, sp, #0
    3986:	6078      	str	r0, [r7, #4]
    3988:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    398a:	f04f 0300 	mov.w	r3, #0
    398e:	817b      	strh	r3, [r7, #10]
    3990:	f04f 0300 	mov.w	r3, #0
    3994:	81fb      	strh	r3, [r7, #14]
    3996:	f04f 0300 	mov.w	r3, #0
    399a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	8c1b      	ldrh	r3, [r3, #32]
    39a0:	b29b      	uxth	r3, r3
    39a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    39a6:	b29a      	uxth	r2, r3
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	8c1b      	ldrh	r3, [r3, #32]
    39b0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	889b      	ldrh	r3, [r3, #4]
    39b6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	8b9b      	ldrh	r3, [r3, #28]
    39bc:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    39be:	897b      	ldrh	r3, [r7, #10]
    39c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    39c4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    39c6:	897b      	ldrh	r3, [r7, #10]
    39c8:	f023 0303 	bic.w	r3, r3, #3
    39cc:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    39ce:	683b      	ldr	r3, [r7, #0]
    39d0:	881a      	ldrh	r2, [r3, #0]
    39d2:	897b      	ldrh	r3, [r7, #10]
    39d4:	4313      	orrs	r3, r2
    39d6:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    39d8:	89fb      	ldrh	r3, [r7, #14]
    39da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    39de:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    39e0:	683b      	ldr	r3, [r7, #0]
    39e2:	891b      	ldrh	r3, [r3, #8]
    39e4:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39e8:	b29a      	uxth	r2, r3
    39ea:	89fb      	ldrh	r3, [r7, #14]
    39ec:	4313      	orrs	r3, r2
    39ee:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    39f0:	683b      	ldr	r3, [r7, #0]
    39f2:	885b      	ldrh	r3, [r3, #2]
    39f4:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39f8:	b29a      	uxth	r2, r3
    39fa:	89fb      	ldrh	r3, [r7, #14]
    39fc:	4313      	orrs	r3, r2
    39fe:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3a00:	687a      	ldr	r2, [r7, #4]
    3a02:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3a06:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a0a:	429a      	cmp	r2, r3
    3a0c:	d006      	beq.n	3a1c <TIM_OC3Init+0x9c>
    3a0e:	687a      	ldr	r2, [r7, #4]
    3a10:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3a14:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a18:	429a      	cmp	r2, r3
    3a1a:	d12f      	bne.n	3a7c <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    3a1c:	89fb      	ldrh	r3, [r7, #14]
    3a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3a22:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    3a24:	683b      	ldr	r3, [r7, #0]
    3a26:	895b      	ldrh	r3, [r3, #10]
    3a28:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3a2c:	b29a      	uxth	r2, r3
    3a2e:	89fb      	ldrh	r3, [r7, #14]
    3a30:	4313      	orrs	r3, r2
    3a32:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    3a34:	89fb      	ldrh	r3, [r7, #14]
    3a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3a3a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    3a3c:	683b      	ldr	r3, [r7, #0]
    3a3e:	889b      	ldrh	r3, [r3, #4]
    3a40:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3a44:	b29a      	uxth	r2, r3
    3a46:	89fb      	ldrh	r3, [r7, #14]
    3a48:	4313      	orrs	r3, r2
    3a4a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    3a4c:	89bb      	ldrh	r3, [r7, #12]
    3a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3a52:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    3a54:	89bb      	ldrh	r3, [r7, #12]
    3a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3a5a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	899b      	ldrh	r3, [r3, #12]
    3a60:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a64:	b29a      	uxth	r2, r3
    3a66:	89bb      	ldrh	r3, [r7, #12]
    3a68:	4313      	orrs	r3, r2
    3a6a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    3a6c:	683b      	ldr	r3, [r7, #0]
    3a6e:	89db      	ldrh	r3, [r3, #14]
    3a70:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a74:	b29a      	uxth	r2, r3
    3a76:	89bb      	ldrh	r3, [r7, #12]
    3a78:	4313      	orrs	r3, r2
    3a7a:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	89ba      	ldrh	r2, [r7, #12]
    3a80:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	897a      	ldrh	r2, [r7, #10]
    3a86:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    3a88:	683b      	ldr	r3, [r7, #0]
    3a8a:	88da      	ldrh	r2, [r3, #6]
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	89fa      	ldrh	r2, [r7, #14]
    3a94:	841a      	strh	r2, [r3, #32]
}
    3a96:	f107 0714 	add.w	r7, r7, #20
    3a9a:	46bd      	mov	sp, r7
    3a9c:	bc80      	pop	{r7}
    3a9e:	4770      	bx	lr

00003aa0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3aa0:	b480      	push	{r7}
    3aa2:	b085      	sub	sp, #20
    3aa4:	af00      	add	r7, sp, #0
    3aa6:	6078      	str	r0, [r7, #4]
    3aa8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3aaa:	f04f 0300 	mov.w	r3, #0
    3aae:	81bb      	strh	r3, [r7, #12]
    3ab0:	f04f 0300 	mov.w	r3, #0
    3ab4:	817b      	strh	r3, [r7, #10]
    3ab6:	f04f 0300 	mov.w	r3, #0
    3aba:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	8c1b      	ldrh	r3, [r3, #32]
    3ac0:	b29b      	uxth	r3, r3
    3ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3ac6:	b29a      	uxth	r2, r3
    3ac8:	687b      	ldr	r3, [r7, #4]
    3aca:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	8c1b      	ldrh	r3, [r3, #32]
    3ad0:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	889b      	ldrh	r3, [r3, #4]
    3ad6:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	8b9b      	ldrh	r3, [r3, #28]
    3adc:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    3ade:	89bb      	ldrh	r3, [r7, #12]
    3ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3ae4:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    3ae6:	89bb      	ldrh	r3, [r7, #12]
    3ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3aec:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3aee:	683b      	ldr	r3, [r7, #0]
    3af0:	881b      	ldrh	r3, [r3, #0]
    3af2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af6:	b29a      	uxth	r2, r3
    3af8:	89bb      	ldrh	r3, [r7, #12]
    3afa:	4313      	orrs	r3, r2
    3afc:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    3afe:	897b      	ldrh	r3, [r7, #10]
    3b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b04:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    3b06:	683b      	ldr	r3, [r7, #0]
    3b08:	891b      	ldrh	r3, [r3, #8]
    3b0a:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b0e:	b29a      	uxth	r2, r3
    3b10:	897b      	ldrh	r3, [r7, #10]
    3b12:	4313      	orrs	r3, r2
    3b14:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    3b16:	683b      	ldr	r3, [r7, #0]
    3b18:	885b      	ldrh	r3, [r3, #2]
    3b1a:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b1e:	b29a      	uxth	r2, r3
    3b20:	897b      	ldrh	r3, [r7, #10]
    3b22:	4313      	orrs	r3, r2
    3b24:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3b26:	687a      	ldr	r2, [r7, #4]
    3b28:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3b2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3b30:	429a      	cmp	r2, r3
    3b32:	d006      	beq.n	3b42 <TIM_OC4Init+0xa2>
    3b34:	687a      	ldr	r2, [r7, #4]
    3b36:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3b3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3b3e:	429a      	cmp	r2, r3
    3b40:	d10b      	bne.n	3b5a <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    3b42:	89fb      	ldrh	r3, [r7, #14]
    3b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3b48:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    3b4a:	683b      	ldr	r3, [r7, #0]
    3b4c:	899b      	ldrh	r3, [r3, #12]
    3b4e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3b52:	b29a      	uxth	r2, r3
    3b54:	89fb      	ldrh	r3, [r7, #14]
    3b56:	4313      	orrs	r3, r2
    3b58:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	89fa      	ldrh	r2, [r7, #14]
    3b5e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	89ba      	ldrh	r2, [r7, #12]
    3b64:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    3b66:	683b      	ldr	r3, [r7, #0]
    3b68:	88da      	ldrh	r2, [r3, #6]
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	897a      	ldrh	r2, [r7, #10]
    3b74:	841a      	strh	r2, [r3, #32]
}
    3b76:	f107 0714 	add.w	r7, r7, #20
    3b7a:	46bd      	mov	sp, r7
    3b7c:	bc80      	pop	{r7}
    3b7e:	4770      	bx	lr

00003b80 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	881b      	ldrh	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d10f      	bne.n	3bb2 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3b92:	683b      	ldr	r3, [r7, #0]
    3b94:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    3b96:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3b98:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    3b9a:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3b9c:	891b      	ldrh	r3, [r3, #8]
    3b9e:	6878      	ldr	r0, [r7, #4]
    3ba0:	f001 f9d4 	bl	4f4c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3ba4:	683b      	ldr	r3, [r7, #0]
    3ba6:	88db      	ldrh	r3, [r3, #6]
    3ba8:	6878      	ldr	r0, [r7, #4]
    3baa:	4619      	mov	r1, r3
    3bac:	f001 f876 	bl	4c9c <TIM_SetIC1Prescaler>
    3bb0:	e036      	b.n	3c20 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    3bb2:	683b      	ldr	r3, [r7, #0]
    3bb4:	881b      	ldrh	r3, [r3, #0]
    3bb6:	2b04      	cmp	r3, #4
    3bb8:	d10f      	bne.n	3bda <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3bba:	683b      	ldr	r3, [r7, #0]
    3bbc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    3bbe:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3bc0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    3bc2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3bc4:	891b      	ldrh	r3, [r3, #8]
    3bc6:	6878      	ldr	r0, [r7, #4]
    3bc8:	f001 fa32 	bl	5030 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3bcc:	683b      	ldr	r3, [r7, #0]
    3bce:	88db      	ldrh	r3, [r3, #6]
    3bd0:	6878      	ldr	r0, [r7, #4]
    3bd2:	4619      	mov	r1, r3
    3bd4:	f001 f87e 	bl	4cd4 <TIM_SetIC2Prescaler>
    3bd8:	e022      	b.n	3c20 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    3bda:	683b      	ldr	r3, [r7, #0]
    3bdc:	881b      	ldrh	r3, [r3, #0]
    3bde:	2b08      	cmp	r3, #8
    3be0:	d10f      	bne.n	3c02 <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3be2:	683b      	ldr	r3, [r7, #0]
    3be4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    3be6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3be8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    3bea:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3bec:	891b      	ldrh	r3, [r3, #8]
    3bee:	6878      	ldr	r0, [r7, #4]
    3bf0:	f001 faa0 	bl	5134 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3bf4:	683b      	ldr	r3, [r7, #0]
    3bf6:	88db      	ldrh	r3, [r3, #6]
    3bf8:	6878      	ldr	r0, [r7, #4]
    3bfa:	4619      	mov	r1, r3
    3bfc:	f001 f888 	bl	4d10 <TIM_SetIC3Prescaler>
    3c00:	e00e      	b.n	3c20 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3c02:	683b      	ldr	r3, [r7, #0]
    3c04:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    3c06:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3c08:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    3c0a:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3c0c:	891b      	ldrh	r3, [r3, #8]
    3c0e:	6878      	ldr	r0, [r7, #4]
    3c10:	f001 fb0a 	bl	5228 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c14:	683b      	ldr	r3, [r7, #0]
    3c16:	88db      	ldrh	r3, [r3, #6]
    3c18:	6878      	ldr	r0, [r7, #4]
    3c1a:	4619      	mov	r1, r3
    3c1c:	f001 f894 	bl	4d48 <TIM_SetIC4Prescaler>
  }
}
    3c20:	f107 0708 	add.w	r7, r7, #8
    3c24:	46bd      	mov	sp, r7
    3c26:	bd80      	pop	{r7, pc}

00003c28 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3c28:	b580      	push	{r7, lr}
    3c2a:	b084      	sub	sp, #16
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
    3c30:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    3c32:	f04f 0300 	mov.w	r3, #0
    3c36:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    3c38:	f04f 0301 	mov.w	r3, #1
    3c3c:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    3c3e:	683b      	ldr	r3, [r7, #0]
    3c40:	885b      	ldrh	r3, [r3, #2]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d103      	bne.n	3c4e <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    3c46:	f04f 0302 	mov.w	r3, #2
    3c4a:	81fb      	strh	r3, [r7, #14]
    3c4c:	e002      	b.n	3c54 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    3c4e:	f04f 0300 	mov.w	r3, #0
    3c52:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    3c54:	683b      	ldr	r3, [r7, #0]
    3c56:	889b      	ldrh	r3, [r3, #4]
    3c58:	2b01      	cmp	r3, #1
    3c5a:	d103      	bne.n	3c64 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    3c5c:	f04f 0302 	mov.w	r3, #2
    3c60:	81bb      	strh	r3, [r7, #12]
    3c62:	e002      	b.n	3c6a <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    3c64:	f04f 0301 	mov.w	r3, #1
    3c68:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3c6a:	683b      	ldr	r3, [r7, #0]
    3c6c:	881b      	ldrh	r3, [r3, #0]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d11c      	bne.n	3cac <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3c72:	683b      	ldr	r3, [r7, #0]
    3c74:	8859      	ldrh	r1, [r3, #2]
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    3c7a:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3c7c:	891b      	ldrh	r3, [r3, #8]
    3c7e:	6878      	ldr	r0, [r7, #4]
    3c80:	f001 f964 	bl	4f4c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c84:	683b      	ldr	r3, [r7, #0]
    3c86:	88db      	ldrh	r3, [r3, #6]
    3c88:	6878      	ldr	r0, [r7, #4]
    3c8a:	4619      	mov	r1, r3
    3c8c:	f001 f806 	bl	4c9c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3c90:	683b      	ldr	r3, [r7, #0]
    3c92:	891b      	ldrh	r3, [r3, #8]
    3c94:	89f9      	ldrh	r1, [r7, #14]
    3c96:	89ba      	ldrh	r2, [r7, #12]
    3c98:	6878      	ldr	r0, [r7, #4]
    3c9a:	f001 f9c9 	bl	5030 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c9e:	683b      	ldr	r3, [r7, #0]
    3ca0:	88db      	ldrh	r3, [r3, #6]
    3ca2:	6878      	ldr	r0, [r7, #4]
    3ca4:	4619      	mov	r1, r3
    3ca6:	f001 f815 	bl	4cd4 <TIM_SetIC2Prescaler>
    3caa:	e01b      	b.n	3ce4 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3cac:	683b      	ldr	r3, [r7, #0]
    3cae:	8859      	ldrh	r1, [r3, #2]
    3cb0:	683b      	ldr	r3, [r7, #0]
    3cb2:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    3cb4:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3cb6:	891b      	ldrh	r3, [r3, #8]
    3cb8:	6878      	ldr	r0, [r7, #4]
    3cba:	f001 f9b9 	bl	5030 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cbe:	683b      	ldr	r3, [r7, #0]
    3cc0:	88db      	ldrh	r3, [r3, #6]
    3cc2:	6878      	ldr	r0, [r7, #4]
    3cc4:	4619      	mov	r1, r3
    3cc6:	f001 f805 	bl	4cd4 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	891b      	ldrh	r3, [r3, #8]
    3cce:	89f9      	ldrh	r1, [r7, #14]
    3cd0:	89ba      	ldrh	r2, [r7, #12]
    3cd2:	6878      	ldr	r0, [r7, #4]
    3cd4:	f001 f93a 	bl	4f4c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cd8:	683b      	ldr	r3, [r7, #0]
    3cda:	88db      	ldrh	r3, [r3, #6]
    3cdc:	6878      	ldr	r0, [r7, #4]
    3cde:	4619      	mov	r1, r3
    3ce0:	f000 ffdc 	bl	4c9c <TIM_SetIC1Prescaler>
  }
}
    3ce4:	f107 0710 	add.w	r7, r7, #16
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}

00003cec <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    3cec:	b480      	push	{r7}
    3cee:	b083      	sub	sp, #12
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
    3cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3cf6:	683b      	ldr	r3, [r7, #0]
    3cf8:	881a      	ldrh	r2, [r3, #0]
    3cfa:	683b      	ldr	r3, [r7, #0]
    3cfc:	885b      	ldrh	r3, [r3, #2]
    3cfe:	4313      	orrs	r3, r2
    3d00:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3d02:	683b      	ldr	r3, [r7, #0]
    3d04:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3d06:	4313      	orrs	r3, r2
    3d08:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3d0a:	683b      	ldr	r3, [r7, #0]
    3d0c:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3d0e:	4313      	orrs	r3, r2
    3d10:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3d12:	683b      	ldr	r3, [r7, #0]
    3d14:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3d16:	4313      	orrs	r3, r2
    3d18:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3d1a:	683b      	ldr	r3, [r7, #0]
    3d1c:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3d1e:	4313      	orrs	r3, r2
    3d20:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    3d22:	683b      	ldr	r3, [r7, #0]
    3d24:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3d26:	4313      	orrs	r3, r2
    3d28:	b29a      	uxth	r2, r3
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    3d30:	f107 070c 	add.w	r7, r7, #12
    3d34:	46bd      	mov	sp, r7
    3d36:	bc80      	pop	{r7}
    3d38:	4770      	bx	lr
    3d3a:	bf00      	nop

00003d3c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3d3c:	b480      	push	{r7}
    3d3e:	b083      	sub	sp, #12
    3d40:	af00      	add	r7, sp, #0
    3d42:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    3d44:	687b      	ldr	r3, [r7, #4]
    3d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3d4a:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	f04f 0200 	mov.w	r2, #0
    3d52:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	f04f 0200 	mov.w	r2, #0
    3d5a:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	f04f 0200 	mov.w	r2, #0
    3d62:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	f04f 0200 	mov.w	r2, #0
    3d6a:	721a      	strb	r2, [r3, #8]
}
    3d6c:	f107 070c 	add.w	r7, r7, #12
    3d70:	46bd      	mov	sp, r7
    3d72:	bc80      	pop	{r7}
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop

00003d78 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3d78:	b480      	push	{r7}
    3d7a:	b083      	sub	sp, #12
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	f04f 0200 	mov.w	r2, #0
    3d86:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	f04f 0200 	mov.w	r2, #0
    3d8e:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	f04f 0200 	mov.w	r2, #0
    3d96:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	f04f 0200 	mov.w	r2, #0
    3d9e:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	f04f 0200 	mov.w	r2, #0
    3da6:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	f04f 0200 	mov.w	r2, #0
    3dae:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	f04f 0200 	mov.w	r2, #0
    3db6:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	f04f 0200 	mov.w	r2, #0
    3dbe:	81da      	strh	r2, [r3, #14]
}
    3dc0:	f107 070c 	add.w	r7, r7, #12
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bc80      	pop	{r7}
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3dcc:	b480      	push	{r7}
    3dce:	b083      	sub	sp, #12
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	f04f 0200 	mov.w	r2, #0
    3dda:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    3ddc:	687b      	ldr	r3, [r7, #4]
    3dde:	f04f 0200 	mov.w	r2, #0
    3de2:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	f04f 0201 	mov.w	r2, #1
    3dea:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	f04f 0200 	mov.w	r2, #0
    3df2:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	f04f 0200 	mov.w	r2, #0
    3dfa:	811a      	strh	r2, [r3, #8]
}
    3dfc:	f107 070c 	add.w	r7, r7, #12
    3e00:	46bd      	mov	sp, r7
    3e02:	bc80      	pop	{r7}
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop

00003e08 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    3e08:	b480      	push	{r7}
    3e0a:	b083      	sub	sp, #12
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	f04f 0200 	mov.w	r2, #0
    3e16:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	f04f 0200 	mov.w	r2, #0
    3e1e:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	f04f 0200 	mov.w	r2, #0
    3e26:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	f04f 0200 	mov.w	r2, #0
    3e2e:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3e30:	687b      	ldr	r3, [r7, #4]
    3e32:	f04f 0200 	mov.w	r2, #0
    3e36:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	f04f 0200 	mov.w	r2, #0
    3e3e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	f04f 0200 	mov.w	r2, #0
    3e46:	819a      	strh	r2, [r3, #12]
}
    3e48:	f107 070c 	add.w	r7, r7, #12
    3e4c:	46bd      	mov	sp, r7
    3e4e:	bc80      	pop	{r7}
    3e50:	4770      	bx	lr
    3e52:	bf00      	nop

00003e54 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3e54:	b480      	push	{r7}
    3e56:	b083      	sub	sp, #12
    3e58:	af00      	add	r7, sp, #0
    3e5a:	6078      	str	r0, [r7, #4]
    3e5c:	460b      	mov	r3, r1
    3e5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3e60:	78fb      	ldrb	r3, [r7, #3]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d008      	beq.n	3e78 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	881b      	ldrh	r3, [r3, #0]
    3e6a:	b29b      	uxth	r3, r3
    3e6c:	f043 0301 	orr.w	r3, r3, #1
    3e70:	b29a      	uxth	r2, r3
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	801a      	strh	r2, [r3, #0]
    3e76:	e007      	b.n	3e88 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	881b      	ldrh	r3, [r3, #0]
    3e7c:	b29b      	uxth	r3, r3
    3e7e:	f023 0301 	bic.w	r3, r3, #1
    3e82:	b29a      	uxth	r2, r3
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	801a      	strh	r2, [r3, #0]
  }
}
    3e88:	f107 070c 	add.w	r7, r7, #12
    3e8c:	46bd      	mov	sp, r7
    3e8e:	bc80      	pop	{r7}
    3e90:	4770      	bx	lr
    3e92:	bf00      	nop

00003e94 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3e94:	b480      	push	{r7}
    3e96:	b083      	sub	sp, #12
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
    3e9c:	460b      	mov	r3, r1
    3e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3ea0:	78fb      	ldrb	r3, [r7, #3]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00c      	beq.n	3ec0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3eac:	b29b      	uxth	r3, r3
    3eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3eb6:	b29a      	uxth	r2, r3
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    3ebe:	e00b      	b.n	3ed8 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	ea4f 4343 	mov.w	r3, r3, lsl #17
    3ecc:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3ed0:	b29a      	uxth	r2, r3
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
    3ed8:	f107 070c 	add.w	r7, r7, #12
    3edc:	46bd      	mov	sp, r7
    3ede:	bc80      	pop	{r7}
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop

00003ee4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    3ee4:	b480      	push	{r7}
    3ee6:	b083      	sub	sp, #12
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
    3eec:	4613      	mov	r3, r2
    3eee:	460a      	mov	r2, r1
    3ef0:	807a      	strh	r2, [r7, #2]
    3ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3ef4:	787b      	ldrb	r3, [r7, #1]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d008      	beq.n	3f0c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	899b      	ldrh	r3, [r3, #12]
    3efe:	b29a      	uxth	r2, r3
    3f00:	887b      	ldrh	r3, [r7, #2]
    3f02:	4313      	orrs	r3, r2
    3f04:	b29a      	uxth	r2, r3
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	819a      	strh	r2, [r3, #12]
    3f0a:	e00a      	b.n	3f22 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	899b      	ldrh	r3, [r3, #12]
    3f10:	b29a      	uxth	r2, r3
    3f12:	887b      	ldrh	r3, [r7, #2]
    3f14:	ea6f 0303 	mvn.w	r3, r3
    3f18:	b29b      	uxth	r3, r3
    3f1a:	4013      	ands	r3, r2
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	819a      	strh	r2, [r3, #12]
  }
}
    3f22:	f107 070c 	add.w	r7, r7, #12
    3f26:	46bd      	mov	sp, r7
    3f28:	bc80      	pop	{r7}
    3f2a:	4770      	bx	lr

00003f2c <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3f2c:	b480      	push	{r7}
    3f2e:	b083      	sub	sp, #12
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
    3f34:	460b      	mov	r3, r1
    3f36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	887a      	ldrh	r2, [r7, #2]
    3f3c:	829a      	strh	r2, [r3, #20]
}
    3f3e:	f107 070c 	add.w	r7, r7, #12
    3f42:	46bd      	mov	sp, r7
    3f44:	bc80      	pop	{r7}
    3f46:	4770      	bx	lr

00003f48 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3f48:	b480      	push	{r7}
    3f4a:	b083      	sub	sp, #12
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    3f50:	4613      	mov	r3, r2
    3f52:	460a      	mov	r2, r1
    3f54:	807a      	strh	r2, [r7, #2]
    3f56:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3f58:	887a      	ldrh	r2, [r7, #2]
    3f5a:	883b      	ldrh	r3, [r7, #0]
    3f5c:	4313      	orrs	r3, r2
    3f5e:	b29a      	uxth	r2, r3
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    3f66:	f107 070c 	add.w	r7, r7, #12
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bc80      	pop	{r7}
    3f6e:	4770      	bx	lr

00003f70 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	4613      	mov	r3, r2
    3f7a:	460a      	mov	r2, r1
    3f7c:	807a      	strh	r2, [r7, #2]
    3f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3f80:	787b      	ldrb	r3, [r7, #1]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d008      	beq.n	3f98 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	899b      	ldrh	r3, [r3, #12]
    3f8a:	b29a      	uxth	r2, r3
    3f8c:	887b      	ldrh	r3, [r7, #2]
    3f8e:	4313      	orrs	r3, r2
    3f90:	b29a      	uxth	r2, r3
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	819a      	strh	r2, [r3, #12]
    3f96:	e00a      	b.n	3fae <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	899b      	ldrh	r3, [r3, #12]
    3f9c:	b29a      	uxth	r2, r3
    3f9e:	887b      	ldrh	r3, [r7, #2]
    3fa0:	ea6f 0303 	mvn.w	r3, r3
    3fa4:	b29b      	uxth	r3, r3
    3fa6:	4013      	ands	r3, r2
    3fa8:	b29a      	uxth	r2, r3
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	819a      	strh	r2, [r3, #12]
  }
}
    3fae:	f107 070c 	add.w	r7, r7, #12
    3fb2:	46bd      	mov	sp, r7
    3fb4:	bc80      	pop	{r7}
    3fb6:	4770      	bx	lr

00003fb8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    3fb8:	b480      	push	{r7}
    3fba:	b083      	sub	sp, #12
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	891b      	ldrh	r3, [r3, #8]
    3fc4:	b29b      	uxth	r3, r3
    3fc6:	f023 0307 	bic.w	r3, r3, #7
    3fca:	b29a      	uxth	r2, r3
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	811a      	strh	r2, [r3, #8]
}
    3fd0:	f107 070c 	add.w	r7, r7, #12
    3fd4:	46bd      	mov	sp, r7
    3fd6:	bc80      	pop	{r7}
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop

00003fdc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
    3fe4:	460b      	mov	r3, r1
    3fe6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    3fe8:	887b      	ldrh	r3, [r7, #2]
    3fea:	6878      	ldr	r0, [r7, #4]
    3fec:	4619      	mov	r1, r3
    3fee:	f000 f8d3 	bl	4198 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	891b      	ldrh	r3, [r3, #8]
    3ff6:	b29b      	uxth	r3, r3
    3ff8:	f043 0307 	orr.w	r3, r3, #7
    3ffc:	b29a      	uxth	r2, r3
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	811a      	strh	r2, [r3, #8]
}
    4002:	f107 0708 	add.w	r7, r7, #8
    4006:	46bd      	mov	sp, r7
    4008:	bd80      	pop	{r7, pc}
    400a:	bf00      	nop

0000400c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    400c:	b580      	push	{r7, lr}
    400e:	b084      	sub	sp, #16
    4010:	af00      	add	r7, sp, #0
    4012:	60f8      	str	r0, [r7, #12]
    4014:	8179      	strh	r1, [r7, #10]
    4016:	813a      	strh	r2, [r7, #8]
    4018:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    401a:	897b      	ldrh	r3, [r7, #10]
    401c:	2b60      	cmp	r3, #96	; 0x60
    401e:	d108      	bne.n	4032 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    4020:	893a      	ldrh	r2, [r7, #8]
    4022:	88fb      	ldrh	r3, [r7, #6]
    4024:	68f8      	ldr	r0, [r7, #12]
    4026:	4611      	mov	r1, r2
    4028:	f04f 0201 	mov.w	r2, #1
    402c:	f001 f800 	bl	5030 <TI2_Config>
    4030:	e007      	b.n	4042 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    4032:	893a      	ldrh	r2, [r7, #8]
    4034:	88fb      	ldrh	r3, [r7, #6]
    4036:	68f8      	ldr	r0, [r7, #12]
    4038:	4611      	mov	r1, r2
    403a:	f04f 0201 	mov.w	r2, #1
    403e:	f000 ff85 	bl	4f4c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    4042:	897b      	ldrh	r3, [r7, #10]
    4044:	68f8      	ldr	r0, [r7, #12]
    4046:	4619      	mov	r1, r3
    4048:	f000 f8a6 	bl	4198 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    404c:	68fb      	ldr	r3, [r7, #12]
    404e:	891b      	ldrh	r3, [r3, #8]
    4050:	b29b      	uxth	r3, r3
    4052:	f043 0307 	orr.w	r3, r3, #7
    4056:	b29a      	uxth	r2, r3
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	811a      	strh	r2, [r3, #8]
}
    405c:	f107 0710 	add.w	r7, r7, #16
    4060:	46bd      	mov	sp, r7
    4062:	bd80      	pop	{r7, pc}

00004064 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    4064:	b580      	push	{r7, lr}
    4066:	b086      	sub	sp, #24
    4068:	af00      	add	r7, sp, #0
    406a:	60f8      	str	r0, [r7, #12]
    406c:	8179      	strh	r1, [r7, #10]
    406e:	813a      	strh	r2, [r7, #8]
    4070:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4072:	f04f 0300 	mov.w	r3, #0
    4076:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4078:	8979      	ldrh	r1, [r7, #10]
    407a:	893a      	ldrh	r2, [r7, #8]
    407c:	88fb      	ldrh	r3, [r7, #6]
    407e:	68f8      	ldr	r0, [r7, #12]
    4080:	f000 f834 	bl	40ec <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	891b      	ldrh	r3, [r3, #8]
    4088:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    408a:	8afb      	ldrh	r3, [r7, #22]
    408c:	f023 0307 	bic.w	r3, r3, #7
    4090:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    4092:	8afb      	ldrh	r3, [r7, #22]
    4094:	f043 0307 	orr.w	r3, r3, #7
    4098:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    409a:	8afb      	ldrh	r3, [r7, #22]
    409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    40a0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    40a2:	8afb      	ldrh	r3, [r7, #22]
    40a4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    40a8:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    40aa:	68fb      	ldr	r3, [r7, #12]
    40ac:	8afa      	ldrh	r2, [r7, #22]
    40ae:	811a      	strh	r2, [r3, #8]
}
    40b0:	f107 0718 	add.w	r7, r7, #24
    40b4:	46bd      	mov	sp, r7
    40b6:	bd80      	pop	{r7, pc}

000040b8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	b084      	sub	sp, #16
    40bc:	af00      	add	r7, sp, #0
    40be:	60f8      	str	r0, [r7, #12]
    40c0:	8179      	strh	r1, [r7, #10]
    40c2:	813a      	strh	r2, [r7, #8]
    40c4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    40c6:	8979      	ldrh	r1, [r7, #10]
    40c8:	893a      	ldrh	r2, [r7, #8]
    40ca:	88fb      	ldrh	r3, [r7, #6]
    40cc:	68f8      	ldr	r0, [r7, #12]
    40ce:	f000 f80d 	bl	40ec <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    40d2:	68fb      	ldr	r3, [r7, #12]
    40d4:	891b      	ldrh	r3, [r3, #8]
    40d6:	b29b      	uxth	r3, r3
    40d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    40dc:	b29a      	uxth	r2, r3
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	811a      	strh	r2, [r3, #8]
}
    40e2:	f107 0710 	add.w	r7, r7, #16
    40e6:	46bd      	mov	sp, r7
    40e8:	bd80      	pop	{r7, pc}
    40ea:	bf00      	nop

000040ec <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    40ec:	b480      	push	{r7}
    40ee:	b087      	sub	sp, #28
    40f0:	af00      	add	r7, sp, #0
    40f2:	60f8      	str	r0, [r7, #12]
    40f4:	8179      	strh	r1, [r7, #10]
    40f6:	813a      	strh	r2, [r7, #8]
    40f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    40fa:	f04f 0300 	mov.w	r3, #0
    40fe:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	891b      	ldrh	r3, [r3, #8]
    4104:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    4106:	8afb      	ldrh	r3, [r7, #22]
    4108:	b2db      	uxtb	r3, r3
    410a:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    410c:	88fb      	ldrh	r3, [r7, #6]
    410e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4112:	b29a      	uxth	r2, r3
    4114:	893b      	ldrh	r3, [r7, #8]
    4116:	4313      	orrs	r3, r2
    4118:	b29a      	uxth	r2, r3
    411a:	897b      	ldrh	r3, [r7, #10]
    411c:	4313      	orrs	r3, r2
    411e:	b29a      	uxth	r2, r3
    4120:	8afb      	ldrh	r3, [r7, #22]
    4122:	4313      	orrs	r3, r2
    4124:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4126:	68fb      	ldr	r3, [r7, #12]
    4128:	8afa      	ldrh	r2, [r7, #22]
    412a:	811a      	strh	r2, [r3, #8]
}
    412c:	f107 071c 	add.w	r7, r7, #28
    4130:	46bd      	mov	sp, r7
    4132:	bc80      	pop	{r7}
    4134:	4770      	bx	lr
    4136:	bf00      	nop

00004138 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	4613      	mov	r3, r2
    4142:	460a      	mov	r2, r1
    4144:	807a      	strh	r2, [r7, #2]
    4146:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	887a      	ldrh	r2, [r7, #2]
    414c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	883a      	ldrh	r2, [r7, #0]
    4152:	829a      	strh	r2, [r3, #20]
}
    4154:	f107 070c 	add.w	r7, r7, #12
    4158:	46bd      	mov	sp, r7
    415a:	bc80      	pop	{r7}
    415c:	4770      	bx	lr
    415e:	bf00      	nop

00004160 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    4160:	b480      	push	{r7}
    4162:	b085      	sub	sp, #20
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
    4168:	460b      	mov	r3, r1
    416a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    416c:	f04f 0300 	mov.w	r3, #0
    4170:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	881b      	ldrh	r3, [r3, #0]
    4176:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4178:	89fb      	ldrh	r3, [r7, #14]
    417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    417e:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    4180:	89fa      	ldrh	r2, [r7, #14]
    4182:	887b      	ldrh	r3, [r7, #2]
    4184:	4313      	orrs	r3, r2
    4186:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	89fa      	ldrh	r2, [r7, #14]
    418c:	801a      	strh	r2, [r3, #0]
}
    418e:	f107 0714 	add.w	r7, r7, #20
    4192:	46bd      	mov	sp, r7
    4194:	bc80      	pop	{r7}
    4196:	4770      	bx	lr

00004198 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4198:	b480      	push	{r7}
    419a:	b085      	sub	sp, #20
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	460b      	mov	r3, r1
    41a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    41a4:	f04f 0300 	mov.w	r3, #0
    41a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	891b      	ldrh	r3, [r3, #8]
    41ae:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    41b0:	89fb      	ldrh	r3, [r7, #14]
    41b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    41b6:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    41b8:	89fa      	ldrh	r2, [r7, #14]
    41ba:	887b      	ldrh	r3, [r7, #2]
    41bc:	4313      	orrs	r3, r2
    41be:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	89fa      	ldrh	r2, [r7, #14]
    41c4:	811a      	strh	r2, [r3, #8]
}
    41c6:	f107 0714 	add.w	r7, r7, #20
    41ca:	46bd      	mov	sp, r7
    41cc:	bc80      	pop	{r7}
    41ce:	4770      	bx	lr

000041d0 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    41d0:	b480      	push	{r7}
    41d2:	b087      	sub	sp, #28
    41d4:	af00      	add	r7, sp, #0
    41d6:	60f8      	str	r0, [r7, #12]
    41d8:	8179      	strh	r1, [r7, #10]
    41da:	813a      	strh	r2, [r7, #8]
    41dc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    41de:	f04f 0300 	mov.w	r3, #0
    41e2:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    41e4:	f04f 0300 	mov.w	r3, #0
    41e8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    41ea:	f04f 0300 	mov.w	r3, #0
    41ee:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    41f0:	68fb      	ldr	r3, [r7, #12]
    41f2:	891b      	ldrh	r3, [r3, #8]
    41f4:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    41f6:	68fb      	ldr	r3, [r7, #12]
    41f8:	8b1b      	ldrh	r3, [r3, #24]
    41fa:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	8c1b      	ldrh	r3, [r3, #32]
    4200:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4202:	8afb      	ldrh	r3, [r7, #22]
    4204:	f023 0307 	bic.w	r3, r3, #7
    4208:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    420a:	8afa      	ldrh	r2, [r7, #22]
    420c:	897b      	ldrh	r3, [r7, #10]
    420e:	4313      	orrs	r3, r2
    4210:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    4212:	8abb      	ldrh	r3, [r7, #20]
    4214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4218:	f023 0303 	bic.w	r3, r3, #3
    421c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    421e:	8abb      	ldrh	r3, [r7, #20]
    4220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4224:	f043 0301 	orr.w	r3, r3, #1
    4228:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    422a:	8a7b      	ldrh	r3, [r7, #18]
    422c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    4230:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    4232:	88fb      	ldrh	r3, [r7, #6]
    4234:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4238:	b29a      	uxth	r2, r3
    423a:	893b      	ldrh	r3, [r7, #8]
    423c:	4313      	orrs	r3, r2
    423e:	b29a      	uxth	r2, r3
    4240:	8a7b      	ldrh	r3, [r7, #18]
    4242:	4313      	orrs	r3, r2
    4244:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4246:	68fb      	ldr	r3, [r7, #12]
    4248:	8afa      	ldrh	r2, [r7, #22]
    424a:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	8aba      	ldrh	r2, [r7, #20]
    4250:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4252:	68fb      	ldr	r3, [r7, #12]
    4254:	8a7a      	ldrh	r2, [r7, #18]
    4256:	841a      	strh	r2, [r3, #32]
}
    4258:	f107 071c 	add.w	r7, r7, #28
    425c:	46bd      	mov	sp, r7
    425e:	bc80      	pop	{r7}
    4260:	4770      	bx	lr
    4262:	bf00      	nop

00004264 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4264:	b480      	push	{r7}
    4266:	b085      	sub	sp, #20
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	460b      	mov	r3, r1
    426e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4270:	f04f 0300 	mov.w	r3, #0
    4274:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	8b1b      	ldrh	r3, [r3, #24]
    427a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    427c:	89fb      	ldrh	r3, [r7, #14]
    427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4282:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    4284:	89fa      	ldrh	r2, [r7, #14]
    4286:	887b      	ldrh	r3, [r7, #2]
    4288:	4313      	orrs	r3, r2
    428a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	89fa      	ldrh	r2, [r7, #14]
    4290:	831a      	strh	r2, [r3, #24]
}
    4292:	f107 0714 	add.w	r7, r7, #20
    4296:	46bd      	mov	sp, r7
    4298:	bc80      	pop	{r7}
    429a:	4770      	bx	lr

0000429c <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    429c:	b480      	push	{r7}
    429e:	b085      	sub	sp, #20
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	460b      	mov	r3, r1
    42a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    42a8:	f04f 0300 	mov.w	r3, #0
    42ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	8b1b      	ldrh	r3, [r3, #24]
    42b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    42b4:	89fb      	ldrh	r3, [r7, #14]
    42b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    42ba:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    42bc:	887b      	ldrh	r3, [r7, #2]
    42be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    42c2:	b29a      	uxth	r2, r3
    42c4:	89fb      	ldrh	r3, [r7, #14]
    42c6:	4313      	orrs	r3, r2
    42c8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	89fa      	ldrh	r2, [r7, #14]
    42ce:	831a      	strh	r2, [r3, #24]
}
    42d0:	f107 0714 	add.w	r7, r7, #20
    42d4:	46bd      	mov	sp, r7
    42d6:	bc80      	pop	{r7}
    42d8:	4770      	bx	lr
    42da:	bf00      	nop

000042dc <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    42dc:	b480      	push	{r7}
    42de:	b085      	sub	sp, #20
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
    42e4:	460b      	mov	r3, r1
    42e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    42e8:	f04f 0300 	mov.w	r3, #0
    42ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	8b9b      	ldrh	r3, [r3, #28]
    42f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    42f4:	89fb      	ldrh	r3, [r7, #14]
    42f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    42fa:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    42fc:	89fa      	ldrh	r2, [r7, #14]
    42fe:	887b      	ldrh	r3, [r7, #2]
    4300:	4313      	orrs	r3, r2
    4302:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	89fa      	ldrh	r2, [r7, #14]
    4308:	839a      	strh	r2, [r3, #28]
}
    430a:	f107 0714 	add.w	r7, r7, #20
    430e:	46bd      	mov	sp, r7
    4310:	bc80      	pop	{r7}
    4312:	4770      	bx	lr

00004314 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4314:	b480      	push	{r7}
    4316:	b085      	sub	sp, #20
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
    431c:	460b      	mov	r3, r1
    431e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4320:	f04f 0300 	mov.w	r3, #0
    4324:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	8b9b      	ldrh	r3, [r3, #28]
    432a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    432c:	89fb      	ldrh	r3, [r7, #14]
    432e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4332:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    4334:	887b      	ldrh	r3, [r7, #2]
    4336:	ea4f 2303 	mov.w	r3, r3, lsl #8
    433a:	b29a      	uxth	r2, r3
    433c:	89fb      	ldrh	r3, [r7, #14]
    433e:	4313      	orrs	r3, r2
    4340:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	89fa      	ldrh	r2, [r7, #14]
    4346:	839a      	strh	r2, [r3, #28]
}
    4348:	f107 0714 	add.w	r7, r7, #20
    434c:	46bd      	mov	sp, r7
    434e:	bc80      	pop	{r7}
    4350:	4770      	bx	lr
    4352:	bf00      	nop

00004354 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4354:	b480      	push	{r7}
    4356:	b083      	sub	sp, #12
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
    435c:	460b      	mov	r3, r1
    435e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4360:	78fb      	ldrb	r3, [r7, #3]
    4362:	2b00      	cmp	r3, #0
    4364:	d008      	beq.n	4378 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	881b      	ldrh	r3, [r3, #0]
    436a:	b29b      	uxth	r3, r3
    436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4370:	b29a      	uxth	r2, r3
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	801a      	strh	r2, [r3, #0]
    4376:	e007      	b.n	4388 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	881b      	ldrh	r3, [r3, #0]
    437c:	b29b      	uxth	r3, r3
    437e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4382:	b29a      	uxth	r2, r3
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	801a      	strh	r2, [r3, #0]
  }
}
    4388:	f107 070c 	add.w	r7, r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	bc80      	pop	{r7}
    4390:	4770      	bx	lr
    4392:	bf00      	nop

00004394 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4394:	b480      	push	{r7}
    4396:	b083      	sub	sp, #12
    4398:	af00      	add	r7, sp, #0
    439a:	6078      	str	r0, [r7, #4]
    439c:	460b      	mov	r3, r1
    439e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    43a0:	78fb      	ldrb	r3, [r7, #3]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d008      	beq.n	43b8 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	889b      	ldrh	r3, [r3, #4]
    43aa:	b29b      	uxth	r3, r3
    43ac:	f043 0304 	orr.w	r3, r3, #4
    43b0:	b29a      	uxth	r2, r3
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	809a      	strh	r2, [r3, #4]
    43b6:	e007      	b.n	43c8 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	889b      	ldrh	r3, [r3, #4]
    43bc:	b29b      	uxth	r3, r3
    43be:	f023 0304 	bic.w	r3, r3, #4
    43c2:	b29a      	uxth	r2, r3
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	809a      	strh	r2, [r3, #4]
  }
}
    43c8:	f107 070c 	add.w	r7, r7, #12
    43cc:	46bd      	mov	sp, r7
    43ce:	bc80      	pop	{r7}
    43d0:	4770      	bx	lr
    43d2:	bf00      	nop

000043d4 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    43d4:	b480      	push	{r7}
    43d6:	b083      	sub	sp, #12
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
    43dc:	460b      	mov	r3, r1
    43de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    43e0:	78fb      	ldrb	r3, [r7, #3]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d008      	beq.n	43f8 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    43e6:	687b      	ldr	r3, [r7, #4]
    43e8:	889b      	ldrh	r3, [r3, #4]
    43ea:	b29b      	uxth	r3, r3
    43ec:	f043 0308 	orr.w	r3, r3, #8
    43f0:	b29a      	uxth	r2, r3
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	809a      	strh	r2, [r3, #4]
    43f6:	e007      	b.n	4408 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	889b      	ldrh	r3, [r3, #4]
    43fc:	b29b      	uxth	r3, r3
    43fe:	f023 0308 	bic.w	r3, r3, #8
    4402:	b29a      	uxth	r2, r3
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	809a      	strh	r2, [r3, #4]
  }
}
    4408:	f107 070c 	add.w	r7, r7, #12
    440c:	46bd      	mov	sp, r7
    440e:	bc80      	pop	{r7}
    4410:	4770      	bx	lr
    4412:	bf00      	nop

00004414 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    4414:	b480      	push	{r7}
    4416:	b083      	sub	sp, #12
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	460b      	mov	r3, r1
    441e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4420:	78fb      	ldrb	r3, [r7, #3]
    4422:	2b00      	cmp	r3, #0
    4424:	d008      	beq.n	4438 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	889b      	ldrh	r3, [r3, #4]
    442a:	b29b      	uxth	r3, r3
    442c:	f043 0301 	orr.w	r3, r3, #1
    4430:	b29a      	uxth	r2, r3
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	809a      	strh	r2, [r3, #4]
    4436:	e007      	b.n	4448 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	889b      	ldrh	r3, [r3, #4]
    443c:	b29b      	uxth	r3, r3
    443e:	f023 0301 	bic.w	r3, r3, #1
    4442:	b29a      	uxth	r2, r3
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	809a      	strh	r2, [r3, #4]
  }
}
    4448:	f107 070c 	add.w	r7, r7, #12
    444c:	46bd      	mov	sp, r7
    444e:	bc80      	pop	{r7}
    4450:	4770      	bx	lr
    4452:	bf00      	nop

00004454 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4454:	b480      	push	{r7}
    4456:	b085      	sub	sp, #20
    4458:	af00      	add	r7, sp, #0
    445a:	6078      	str	r0, [r7, #4]
    445c:	460b      	mov	r3, r1
    445e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4460:	f04f 0300 	mov.w	r3, #0
    4464:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	8b1b      	ldrh	r3, [r3, #24]
    446a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    446c:	89fb      	ldrh	r3, [r7, #14]
    446e:	f023 0308 	bic.w	r3, r3, #8
    4472:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    4474:	89fa      	ldrh	r2, [r7, #14]
    4476:	887b      	ldrh	r3, [r7, #2]
    4478:	4313      	orrs	r3, r2
    447a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	89fa      	ldrh	r2, [r7, #14]
    4480:	831a      	strh	r2, [r3, #24]
}
    4482:	f107 0714 	add.w	r7, r7, #20
    4486:	46bd      	mov	sp, r7
    4488:	bc80      	pop	{r7}
    448a:	4770      	bx	lr

0000448c <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    448c:	b480      	push	{r7}
    448e:	b085      	sub	sp, #20
    4490:	af00      	add	r7, sp, #0
    4492:	6078      	str	r0, [r7, #4]
    4494:	460b      	mov	r3, r1
    4496:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4498:	f04f 0300 	mov.w	r3, #0
    449c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	8b1b      	ldrh	r3, [r3, #24]
    44a2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    44a4:	89fb      	ldrh	r3, [r7, #14]
    44a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    44aa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    44ac:	887b      	ldrh	r3, [r7, #2]
    44ae:	ea4f 2303 	mov.w	r3, r3, lsl #8
    44b2:	b29a      	uxth	r2, r3
    44b4:	89fb      	ldrh	r3, [r7, #14]
    44b6:	4313      	orrs	r3, r2
    44b8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	89fa      	ldrh	r2, [r7, #14]
    44be:	831a      	strh	r2, [r3, #24]
}
    44c0:	f107 0714 	add.w	r7, r7, #20
    44c4:	46bd      	mov	sp, r7
    44c6:	bc80      	pop	{r7}
    44c8:	4770      	bx	lr
    44ca:	bf00      	nop

000044cc <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    44cc:	b480      	push	{r7}
    44ce:	b085      	sub	sp, #20
    44d0:	af00      	add	r7, sp, #0
    44d2:	6078      	str	r0, [r7, #4]
    44d4:	460b      	mov	r3, r1
    44d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    44d8:	f04f 0300 	mov.w	r3, #0
    44dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	8b9b      	ldrh	r3, [r3, #28]
    44e2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    44e4:	89fb      	ldrh	r3, [r7, #14]
    44e6:	f023 0308 	bic.w	r3, r3, #8
    44ea:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    44ec:	89fa      	ldrh	r2, [r7, #14]
    44ee:	887b      	ldrh	r3, [r7, #2]
    44f0:	4313      	orrs	r3, r2
    44f2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	89fa      	ldrh	r2, [r7, #14]
    44f8:	839a      	strh	r2, [r3, #28]
}
    44fa:	f107 0714 	add.w	r7, r7, #20
    44fe:	46bd      	mov	sp, r7
    4500:	bc80      	pop	{r7}
    4502:	4770      	bx	lr

00004504 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4504:	b480      	push	{r7}
    4506:	b085      	sub	sp, #20
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
    450c:	460b      	mov	r3, r1
    450e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4510:	f04f 0300 	mov.w	r3, #0
    4514:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	8b9b      	ldrh	r3, [r3, #28]
    451a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    451c:	89fb      	ldrh	r3, [r7, #14]
    451e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4522:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    4524:	887b      	ldrh	r3, [r7, #2]
    4526:	ea4f 2303 	mov.w	r3, r3, lsl #8
    452a:	b29a      	uxth	r2, r3
    452c:	89fb      	ldrh	r3, [r7, #14]
    452e:	4313      	orrs	r3, r2
    4530:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	89fa      	ldrh	r2, [r7, #14]
    4536:	839a      	strh	r2, [r3, #28]
}
    4538:	f107 0714 	add.w	r7, r7, #20
    453c:	46bd      	mov	sp, r7
    453e:	bc80      	pop	{r7}
    4540:	4770      	bx	lr
    4542:	bf00      	nop

00004544 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4544:	b480      	push	{r7}
    4546:	b085      	sub	sp, #20
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
    454c:	460b      	mov	r3, r1
    454e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4550:	f04f 0300 	mov.w	r3, #0
    4554:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	8b1b      	ldrh	r3, [r3, #24]
    455a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    455c:	89fb      	ldrh	r3, [r7, #14]
    455e:	f023 0304 	bic.w	r3, r3, #4
    4562:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    4564:	89fa      	ldrh	r2, [r7, #14]
    4566:	887b      	ldrh	r3, [r7, #2]
    4568:	4313      	orrs	r3, r2
    456a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	89fa      	ldrh	r2, [r7, #14]
    4570:	831a      	strh	r2, [r3, #24]
}
    4572:	f107 0714 	add.w	r7, r7, #20
    4576:	46bd      	mov	sp, r7
    4578:	bc80      	pop	{r7}
    457a:	4770      	bx	lr

0000457c <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    457c:	b480      	push	{r7}
    457e:	b085      	sub	sp, #20
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
    4584:	460b      	mov	r3, r1
    4586:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4588:	f04f 0300 	mov.w	r3, #0
    458c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	8b1b      	ldrh	r3, [r3, #24]
    4592:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    4594:	89fb      	ldrh	r3, [r7, #14]
    4596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    459a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    459c:	887b      	ldrh	r3, [r7, #2]
    459e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    45a2:	b29a      	uxth	r2, r3
    45a4:	89fb      	ldrh	r3, [r7, #14]
    45a6:	4313      	orrs	r3, r2
    45a8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	89fa      	ldrh	r2, [r7, #14]
    45ae:	831a      	strh	r2, [r3, #24]
}
    45b0:	f107 0714 	add.w	r7, r7, #20
    45b4:	46bd      	mov	sp, r7
    45b6:	bc80      	pop	{r7}
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop

000045bc <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    45bc:	b480      	push	{r7}
    45be:	b085      	sub	sp, #20
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	460b      	mov	r3, r1
    45c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    45c8:	f04f 0300 	mov.w	r3, #0
    45cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	8b9b      	ldrh	r3, [r3, #28]
    45d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    45d4:	89fb      	ldrh	r3, [r7, #14]
    45d6:	f023 0304 	bic.w	r3, r3, #4
    45da:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    45dc:	89fa      	ldrh	r2, [r7, #14]
    45de:	887b      	ldrh	r3, [r7, #2]
    45e0:	4313      	orrs	r3, r2
    45e2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	89fa      	ldrh	r2, [r7, #14]
    45e8:	839a      	strh	r2, [r3, #28]
}
    45ea:	f107 0714 	add.w	r7, r7, #20
    45ee:	46bd      	mov	sp, r7
    45f0:	bc80      	pop	{r7}
    45f2:	4770      	bx	lr

000045f4 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    45f4:	b480      	push	{r7}
    45f6:	b085      	sub	sp, #20
    45f8:	af00      	add	r7, sp, #0
    45fa:	6078      	str	r0, [r7, #4]
    45fc:	460b      	mov	r3, r1
    45fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4600:	f04f 0300 	mov.w	r3, #0
    4604:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	8b9b      	ldrh	r3, [r3, #28]
    460a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    460c:	89fb      	ldrh	r3, [r7, #14]
    460e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4612:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    4614:	887b      	ldrh	r3, [r7, #2]
    4616:	ea4f 2303 	mov.w	r3, r3, lsl #8
    461a:	b29a      	uxth	r2, r3
    461c:	89fb      	ldrh	r3, [r7, #14]
    461e:	4313      	orrs	r3, r2
    4620:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	89fa      	ldrh	r2, [r7, #14]
    4626:	839a      	strh	r2, [r3, #28]
}
    4628:	f107 0714 	add.w	r7, r7, #20
    462c:	46bd      	mov	sp, r7
    462e:	bc80      	pop	{r7}
    4630:	4770      	bx	lr
    4632:	bf00      	nop

00004634 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4634:	b480      	push	{r7}
    4636:	b085      	sub	sp, #20
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
    463c:	460b      	mov	r3, r1
    463e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4640:	f04f 0300 	mov.w	r3, #0
    4644:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	8b1b      	ldrh	r3, [r3, #24]
    464a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    464c:	89fb      	ldrh	r3, [r7, #14]
    464e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4652:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    4654:	89fa      	ldrh	r2, [r7, #14]
    4656:	887b      	ldrh	r3, [r7, #2]
    4658:	4313      	orrs	r3, r2
    465a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	89fa      	ldrh	r2, [r7, #14]
    4660:	831a      	strh	r2, [r3, #24]
}
    4662:	f107 0714 	add.w	r7, r7, #20
    4666:	46bd      	mov	sp, r7
    4668:	bc80      	pop	{r7}
    466a:	4770      	bx	lr

0000466c <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    466c:	b480      	push	{r7}
    466e:	b085      	sub	sp, #20
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	460b      	mov	r3, r1
    4676:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4678:	f04f 0300 	mov.w	r3, #0
    467c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	8b1b      	ldrh	r3, [r3, #24]
    4682:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    4684:	89fb      	ldrh	r3, [r7, #14]
    4686:	ea4f 4343 	mov.w	r3, r3, lsl #17
    468a:	ea4f 4353 	mov.w	r3, r3, lsr #17
    468e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    4690:	887b      	ldrh	r3, [r7, #2]
    4692:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4696:	b29a      	uxth	r2, r3
    4698:	89fb      	ldrh	r3, [r7, #14]
    469a:	4313      	orrs	r3, r2
    469c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	89fa      	ldrh	r2, [r7, #14]
    46a2:	831a      	strh	r2, [r3, #24]
}
    46a4:	f107 0714 	add.w	r7, r7, #20
    46a8:	46bd      	mov	sp, r7
    46aa:	bc80      	pop	{r7}
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop

000046b0 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    46b0:	b480      	push	{r7}
    46b2:	b085      	sub	sp, #20
    46b4:	af00      	add	r7, sp, #0
    46b6:	6078      	str	r0, [r7, #4]
    46b8:	460b      	mov	r3, r1
    46ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    46bc:	f04f 0300 	mov.w	r3, #0
    46c0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	8b9b      	ldrh	r3, [r3, #28]
    46c6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    46c8:	89fb      	ldrh	r3, [r7, #14]
    46ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    46ce:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    46d0:	89fa      	ldrh	r2, [r7, #14]
    46d2:	887b      	ldrh	r3, [r7, #2]
    46d4:	4313      	orrs	r3, r2
    46d6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	89fa      	ldrh	r2, [r7, #14]
    46dc:	839a      	strh	r2, [r3, #28]
}
    46de:	f107 0714 	add.w	r7, r7, #20
    46e2:	46bd      	mov	sp, r7
    46e4:	bc80      	pop	{r7}
    46e6:	4770      	bx	lr

000046e8 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    46e8:	b480      	push	{r7}
    46ea:	b085      	sub	sp, #20
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
    46f0:	460b      	mov	r3, r1
    46f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    46f4:	f04f 0300 	mov.w	r3, #0
    46f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	8b9b      	ldrh	r3, [r3, #28]
    46fe:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    4700:	89fb      	ldrh	r3, [r7, #14]
    4702:	ea4f 4343 	mov.w	r3, r3, lsl #17
    4706:	ea4f 4353 	mov.w	r3, r3, lsr #17
    470a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    470c:	887b      	ldrh	r3, [r7, #2]
    470e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4712:	b29a      	uxth	r2, r3
    4714:	89fb      	ldrh	r3, [r7, #14]
    4716:	4313      	orrs	r3, r2
    4718:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	89fa      	ldrh	r2, [r7, #14]
    471e:	839a      	strh	r2, [r3, #28]
}
    4720:	f107 0714 	add.w	r7, r7, #20
    4724:	46bd      	mov	sp, r7
    4726:	bc80      	pop	{r7}
    4728:	4770      	bx	lr
    472a:	bf00      	nop

0000472c <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    472c:	b480      	push	{r7}
    472e:	b085      	sub	sp, #20
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]
    4734:	460b      	mov	r3, r1
    4736:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4738:	f04f 0300 	mov.w	r3, #0
    473c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	8c1b      	ldrh	r3, [r3, #32]
    4742:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    4744:	89fb      	ldrh	r3, [r7, #14]
    4746:	f023 0302 	bic.w	r3, r3, #2
    474a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    474c:	89fa      	ldrh	r2, [r7, #14]
    474e:	887b      	ldrh	r3, [r7, #2]
    4750:	4313      	orrs	r3, r2
    4752:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	89fa      	ldrh	r2, [r7, #14]
    4758:	841a      	strh	r2, [r3, #32]
}
    475a:	f107 0714 	add.w	r7, r7, #20
    475e:	46bd      	mov	sp, r7
    4760:	bc80      	pop	{r7}
    4762:	4770      	bx	lr

00004764 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    4764:	b480      	push	{r7}
    4766:	b085      	sub	sp, #20
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
    476c:	460b      	mov	r3, r1
    476e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4770:	f04f 0300 	mov.w	r3, #0
    4774:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	8c1b      	ldrh	r3, [r3, #32]
    477a:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    477c:	89fb      	ldrh	r3, [r7, #14]
    477e:	f023 0308 	bic.w	r3, r3, #8
    4782:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    4784:	89fa      	ldrh	r2, [r7, #14]
    4786:	887b      	ldrh	r3, [r7, #2]
    4788:	4313      	orrs	r3, r2
    478a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	89fa      	ldrh	r2, [r7, #14]
    4790:	841a      	strh	r2, [r3, #32]
}
    4792:	f107 0714 	add.w	r7, r7, #20
    4796:	46bd      	mov	sp, r7
    4798:	bc80      	pop	{r7}
    479a:	4770      	bx	lr

0000479c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    479c:	b480      	push	{r7}
    479e:	b085      	sub	sp, #20
    47a0:	af00      	add	r7, sp, #0
    47a2:	6078      	str	r0, [r7, #4]
    47a4:	460b      	mov	r3, r1
    47a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    47a8:	f04f 0300 	mov.w	r3, #0
    47ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	8c1b      	ldrh	r3, [r3, #32]
    47b2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    47b4:	89fb      	ldrh	r3, [r7, #14]
    47b6:	f023 0320 	bic.w	r3, r3, #32
    47ba:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    47bc:	887b      	ldrh	r3, [r7, #2]
    47be:	ea4f 1303 	mov.w	r3, r3, lsl #4
    47c2:	b29a      	uxth	r2, r3
    47c4:	89fb      	ldrh	r3, [r7, #14]
    47c6:	4313      	orrs	r3, r2
    47c8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	89fa      	ldrh	r2, [r7, #14]
    47ce:	841a      	strh	r2, [r3, #32]
}
    47d0:	f107 0714 	add.w	r7, r7, #20
    47d4:	46bd      	mov	sp, r7
    47d6:	bc80      	pop	{r7}
    47d8:	4770      	bx	lr
    47da:	bf00      	nop

000047dc <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    47dc:	b480      	push	{r7}
    47de:	b085      	sub	sp, #20
    47e0:	af00      	add	r7, sp, #0
    47e2:	6078      	str	r0, [r7, #4]
    47e4:	460b      	mov	r3, r1
    47e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    47e8:	f04f 0300 	mov.w	r3, #0
    47ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	8c1b      	ldrh	r3, [r3, #32]
    47f2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    47f4:	89fb      	ldrh	r3, [r7, #14]
    47f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    47fa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    47fc:	887b      	ldrh	r3, [r7, #2]
    47fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4802:	b29a      	uxth	r2, r3
    4804:	89fb      	ldrh	r3, [r7, #14]
    4806:	4313      	orrs	r3, r2
    4808:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	89fa      	ldrh	r2, [r7, #14]
    480e:	841a      	strh	r2, [r3, #32]
}
    4810:	f107 0714 	add.w	r7, r7, #20
    4814:	46bd      	mov	sp, r7
    4816:	bc80      	pop	{r7}
    4818:	4770      	bx	lr
    481a:	bf00      	nop

0000481c <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    481c:	b480      	push	{r7}
    481e:	b085      	sub	sp, #20
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
    4824:	460b      	mov	r3, r1
    4826:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4828:	f04f 0300 	mov.w	r3, #0
    482c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	8c1b      	ldrh	r3, [r3, #32]
    4832:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    4834:	89fb      	ldrh	r3, [r7, #14]
    4836:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    483a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    483c:	887b      	ldrh	r3, [r7, #2]
    483e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4842:	b29a      	uxth	r2, r3
    4844:	89fb      	ldrh	r3, [r7, #14]
    4846:	4313      	orrs	r3, r2
    4848:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	89fa      	ldrh	r2, [r7, #14]
    484e:	841a      	strh	r2, [r3, #32]
}
    4850:	f107 0714 	add.w	r7, r7, #20
    4854:	46bd      	mov	sp, r7
    4856:	bc80      	pop	{r7}
    4858:	4770      	bx	lr
    485a:	bf00      	nop

0000485c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    485c:	b480      	push	{r7}
    485e:	b085      	sub	sp, #20
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
    4864:	460b      	mov	r3, r1
    4866:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4868:	f04f 0300 	mov.w	r3, #0
    486c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	8c1b      	ldrh	r3, [r3, #32]
    4872:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    4874:	89fb      	ldrh	r3, [r7, #14]
    4876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    487a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    487c:	887b      	ldrh	r3, [r7, #2]
    487e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4882:	b29a      	uxth	r2, r3
    4884:	89fb      	ldrh	r3, [r7, #14]
    4886:	4313      	orrs	r3, r2
    4888:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	89fa      	ldrh	r2, [r7, #14]
    488e:	841a      	strh	r2, [r3, #32]
}
    4890:	f107 0714 	add.w	r7, r7, #20
    4894:	46bd      	mov	sp, r7
    4896:	bc80      	pop	{r7}
    4898:	4770      	bx	lr
    489a:	bf00      	nop

0000489c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    489c:	b480      	push	{r7}
    489e:	b085      	sub	sp, #20
    48a0:	af00      	add	r7, sp, #0
    48a2:	6078      	str	r0, [r7, #4]
    48a4:	460b      	mov	r3, r1
    48a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    48a8:	f04f 0300 	mov.w	r3, #0
    48ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	8c1b      	ldrh	r3, [r3, #32]
    48b2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    48b4:	89fb      	ldrh	r3, [r7, #14]
    48b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    48ba:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    48bc:	887b      	ldrh	r3, [r7, #2]
    48be:	ea4f 3303 	mov.w	r3, r3, lsl #12
    48c2:	b29a      	uxth	r2, r3
    48c4:	89fb      	ldrh	r3, [r7, #14]
    48c6:	4313      	orrs	r3, r2
    48c8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	89fa      	ldrh	r2, [r7, #14]
    48ce:	841a      	strh	r2, [r3, #32]
}
    48d0:	f107 0714 	add.w	r7, r7, #20
    48d4:	46bd      	mov	sp, r7
    48d6:	bc80      	pop	{r7}
    48d8:	4770      	bx	lr
    48da:	bf00      	nop

000048dc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    48dc:	b480      	push	{r7}
    48de:	b085      	sub	sp, #20
    48e0:	af00      	add	r7, sp, #0
    48e2:	6078      	str	r0, [r7, #4]
    48e4:	4613      	mov	r3, r2
    48e6:	460a      	mov	r2, r1
    48e8:	807a      	strh	r2, [r7, #2]
    48ea:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    48ec:	f04f 0300 	mov.w	r3, #0
    48f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    48f2:	887b      	ldrh	r3, [r7, #2]
    48f4:	f04f 0201 	mov.w	r2, #1
    48f8:	fa02 f303 	lsl.w	r3, r2, r3
    48fc:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    48fe:	687b      	ldr	r3, [r7, #4]
    4900:	8c1b      	ldrh	r3, [r3, #32]
    4902:	b29a      	uxth	r2, r3
    4904:	89fb      	ldrh	r3, [r7, #14]
    4906:	ea6f 0303 	mvn.w	r3, r3
    490a:	b29b      	uxth	r3, r3
    490c:	4013      	ands	r3, r2
    490e:	b29a      	uxth	r2, r3
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	8c1b      	ldrh	r3, [r3, #32]
    4918:	b29a      	uxth	r2, r3
    491a:	8839      	ldrh	r1, [r7, #0]
    491c:	887b      	ldrh	r3, [r7, #2]
    491e:	fa01 f303 	lsl.w	r3, r1, r3
    4922:	b29b      	uxth	r3, r3
    4924:	4313      	orrs	r3, r2
    4926:	b29a      	uxth	r2, r3
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	841a      	strh	r2, [r3, #32]
}
    492c:	f107 0714 	add.w	r7, r7, #20
    4930:	46bd      	mov	sp, r7
    4932:	bc80      	pop	{r7}
    4934:	4770      	bx	lr
    4936:	bf00      	nop

00004938 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    4938:	b480      	push	{r7}
    493a:	b085      	sub	sp, #20
    493c:	af00      	add	r7, sp, #0
    493e:	6078      	str	r0, [r7, #4]
    4940:	4613      	mov	r3, r2
    4942:	460a      	mov	r2, r1
    4944:	807a      	strh	r2, [r7, #2]
    4946:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    4948:	f04f 0300 	mov.w	r3, #0
    494c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    494e:	887b      	ldrh	r3, [r7, #2]
    4950:	f04f 0204 	mov.w	r2, #4
    4954:	fa02 f303 	lsl.w	r3, r2, r3
    4958:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	8c1b      	ldrh	r3, [r3, #32]
    495e:	b29a      	uxth	r2, r3
    4960:	89fb      	ldrh	r3, [r7, #14]
    4962:	ea6f 0303 	mvn.w	r3, r3
    4966:	b29b      	uxth	r3, r3
    4968:	4013      	ands	r3, r2
    496a:	b29a      	uxth	r2, r3
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	8c1b      	ldrh	r3, [r3, #32]
    4974:	b29a      	uxth	r2, r3
    4976:	8839      	ldrh	r1, [r7, #0]
    4978:	887b      	ldrh	r3, [r7, #2]
    497a:	fa01 f303 	lsl.w	r3, r1, r3
    497e:	b29b      	uxth	r3, r3
    4980:	4313      	orrs	r3, r2
    4982:	b29a      	uxth	r2, r3
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	841a      	strh	r2, [r3, #32]
}
    4988:	f107 0714 	add.w	r7, r7, #20
    498c:	46bd      	mov	sp, r7
    498e:	bc80      	pop	{r7}
    4990:	4770      	bx	lr
    4992:	bf00      	nop

00004994 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    4994:	b480      	push	{r7}
    4996:	b085      	sub	sp, #20
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
    499c:	4613      	mov	r3, r2
    499e:	460a      	mov	r2, r1
    49a0:	807a      	strh	r2, [r7, #2]
    49a2:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    49a4:	f04f 0300 	mov.w	r3, #0
    49a8:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    49aa:	f04f 0300 	mov.w	r3, #0
    49ae:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    49b4:	68fb      	ldr	r3, [r7, #12]
    49b6:	f103 0318 	add.w	r3, r3, #24
    49ba:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    49bc:	887b      	ldrh	r3, [r7, #2]
    49be:	f04f 0201 	mov.w	r2, #1
    49c2:	fa02 f303 	lsl.w	r3, r2, r3
    49c6:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	8c1b      	ldrh	r3, [r3, #32]
    49cc:	b29a      	uxth	r2, r3
    49ce:	897b      	ldrh	r3, [r7, #10]
    49d0:	ea6f 0303 	mvn.w	r3, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	4013      	ands	r3, r2
    49d8:	b29a      	uxth	r2, r3
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    49de:	887b      	ldrh	r3, [r7, #2]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d002      	beq.n	49ea <TIM_SelectOCxM+0x56>
    49e4:	887b      	ldrh	r3, [r7, #2]
    49e6:	2b08      	cmp	r3, #8
    49e8:	d113      	bne.n	4a12 <TIM_SelectOCxM+0x7e>
  {
    tmp += (TIM_Channel>>1);
    49ea:	887b      	ldrh	r3, [r7, #2]
    49ec:	ea4f 0353 	mov.w	r3, r3, lsr #1
    49f0:	b29b      	uxth	r3, r3
    49f2:	68fa      	ldr	r2, [r7, #12]
    49f4:	18d3      	adds	r3, r2, r3
    49f6:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	68fa      	ldr	r2, [r7, #12]
    49fc:	6812      	ldr	r2, [r2, #0]
    49fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    4a02:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	68fa      	ldr	r2, [r7, #12]
    4a08:	6811      	ldr	r1, [r2, #0]
    4a0a:	883a      	ldrh	r2, [r7, #0]
    4a0c:	430a      	orrs	r2, r1
    4a0e:	601a      	str	r2, [r3, #0]
    4a10:	e018      	b.n	4a44 <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    4a12:	887b      	ldrh	r3, [r7, #2]
    4a14:	f1a3 0304 	sub.w	r3, r3, #4
    4a18:	b29b      	uxth	r3, r3
    4a1a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    4a1e:	b29b      	uxth	r3, r3
    4a20:	68fa      	ldr	r2, [r7, #12]
    4a22:	18d3      	adds	r3, r2, r3
    4a24:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    4a26:	68fb      	ldr	r3, [r7, #12]
    4a28:	68fa      	ldr	r2, [r7, #12]
    4a2a:	6812      	ldr	r2, [r2, #0]
    4a2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    4a30:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    4a32:	68fb      	ldr	r3, [r7, #12]
    4a34:	68fa      	ldr	r2, [r7, #12]
    4a36:	6811      	ldr	r1, [r2, #0]
    4a38:	883a      	ldrh	r2, [r7, #0]
    4a3a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4a3e:	b292      	uxth	r2, r2
    4a40:	430a      	orrs	r2, r1
    4a42:	601a      	str	r2, [r3, #0]
  }
}
    4a44:	f107 0714 	add.w	r7, r7, #20
    4a48:	46bd      	mov	sp, r7
    4a4a:	bc80      	pop	{r7}
    4a4c:	4770      	bx	lr
    4a4e:	bf00      	nop

00004a50 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4a50:	b480      	push	{r7}
    4a52:	b083      	sub	sp, #12
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
    4a58:	460b      	mov	r3, r1
    4a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4a5c:	78fb      	ldrb	r3, [r7, #3]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d008      	beq.n	4a74 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	881b      	ldrh	r3, [r3, #0]
    4a66:	b29b      	uxth	r3, r3
    4a68:	f043 0302 	orr.w	r3, r3, #2
    4a6c:	b29a      	uxth	r2, r3
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	801a      	strh	r2, [r3, #0]
    4a72:	e007      	b.n	4a84 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	881b      	ldrh	r3, [r3, #0]
    4a78:	b29b      	uxth	r3, r3
    4a7a:	f023 0302 	bic.w	r3, r3, #2
    4a7e:	b29a      	uxth	r2, r3
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	801a      	strh	r2, [r3, #0]
  }
}
    4a84:	f107 070c 	add.w	r7, r7, #12
    4a88:	46bd      	mov	sp, r7
    4a8a:	bc80      	pop	{r7}
    4a8c:	4770      	bx	lr
    4a8e:	bf00      	nop

00004a90 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    4a90:	b480      	push	{r7}
    4a92:	b083      	sub	sp, #12
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    4a9c:	887b      	ldrh	r3, [r7, #2]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d008      	beq.n	4ab4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	881b      	ldrh	r3, [r3, #0]
    4aa6:	b29b      	uxth	r3, r3
    4aa8:	f043 0304 	orr.w	r3, r3, #4
    4aac:	b29a      	uxth	r2, r3
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	801a      	strh	r2, [r3, #0]
    4ab2:	e007      	b.n	4ac4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	881b      	ldrh	r3, [r3, #0]
    4ab8:	b29b      	uxth	r3, r3
    4aba:	f023 0304 	bic.w	r3, r3, #4
    4abe:	b29a      	uxth	r2, r3
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	801a      	strh	r2, [r3, #0]
  }
}
    4ac4:	f107 070c 	add.w	r7, r7, #12
    4ac8:	46bd      	mov	sp, r7
    4aca:	bc80      	pop	{r7}
    4acc:	4770      	bx	lr
    4ace:	bf00      	nop

00004ad0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4ad0:	b480      	push	{r7}
    4ad2:	b083      	sub	sp, #12
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	6078      	str	r0, [r7, #4]
    4ad8:	460b      	mov	r3, r1
    4ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4adc:	78fb      	ldrb	r3, [r7, #3]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d008      	beq.n	4af4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	889b      	ldrh	r3, [r3, #4]
    4ae6:	b29b      	uxth	r3, r3
    4ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4aec:	b29a      	uxth	r2, r3
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	809a      	strh	r2, [r3, #4]
    4af2:	e007      	b.n	4b04 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	889b      	ldrh	r3, [r3, #4]
    4af8:	b29b      	uxth	r3, r3
    4afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4afe:	b29a      	uxth	r2, r3
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	809a      	strh	r2, [r3, #4]
  }
}
    4b04:	f107 070c 	add.w	r7, r7, #12
    4b08:	46bd      	mov	sp, r7
    4b0a:	bc80      	pop	{r7}
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop

00004b10 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    4b10:	b480      	push	{r7}
    4b12:	b083      	sub	sp, #12
    4b14:	af00      	add	r7, sp, #0
    4b16:	6078      	str	r0, [r7, #4]
    4b18:	460b      	mov	r3, r1
    4b1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	881b      	ldrh	r3, [r3, #0]
    4b20:	b29b      	uxth	r3, r3
    4b22:	f023 0308 	bic.w	r3, r3, #8
    4b26:	b29a      	uxth	r2, r3
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	881b      	ldrh	r3, [r3, #0]
    4b30:	b29a      	uxth	r2, r3
    4b32:	887b      	ldrh	r3, [r7, #2]
    4b34:	4313      	orrs	r3, r2
    4b36:	b29a      	uxth	r2, r3
    4b38:	687b      	ldr	r3, [r7, #4]
    4b3a:	801a      	strh	r2, [r3, #0]
}
    4b3c:	f107 070c 	add.w	r7, r7, #12
    4b40:	46bd      	mov	sp, r7
    4b42:	bc80      	pop	{r7}
    4b44:	4770      	bx	lr
    4b46:	bf00      	nop

00004b48 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    4b48:	b480      	push	{r7}
    4b4a:	b083      	sub	sp, #12
    4b4c:	af00      	add	r7, sp, #0
    4b4e:	6078      	str	r0, [r7, #4]
    4b50:	460b      	mov	r3, r1
    4b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	889b      	ldrh	r3, [r3, #4]
    4b58:	b29b      	uxth	r3, r3
    4b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4b5e:	b29a      	uxth	r2, r3
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	889b      	ldrh	r3, [r3, #4]
    4b68:	b29a      	uxth	r2, r3
    4b6a:	887b      	ldrh	r3, [r7, #2]
    4b6c:	4313      	orrs	r3, r2
    4b6e:	b29a      	uxth	r2, r3
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	809a      	strh	r2, [r3, #4]
}
    4b74:	f107 070c 	add.w	r7, r7, #12
    4b78:	46bd      	mov	sp, r7
    4b7a:	bc80      	pop	{r7}
    4b7c:	4770      	bx	lr
    4b7e:	bf00      	nop

00004b80 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    4b80:	b480      	push	{r7}
    4b82:	b083      	sub	sp, #12
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
    4b88:	460b      	mov	r3, r1
    4b8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	891b      	ldrh	r3, [r3, #8]
    4b90:	b29b      	uxth	r3, r3
    4b92:	f023 0307 	bic.w	r3, r3, #7
    4b96:	b29a      	uxth	r2, r3
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	891b      	ldrh	r3, [r3, #8]
    4ba0:	b29a      	uxth	r2, r3
    4ba2:	887b      	ldrh	r3, [r7, #2]
    4ba4:	4313      	orrs	r3, r2
    4ba6:	b29a      	uxth	r2, r3
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	811a      	strh	r2, [r3, #8]
}
    4bac:	f107 070c 	add.w	r7, r7, #12
    4bb0:	46bd      	mov	sp, r7
    4bb2:	bc80      	pop	{r7}
    4bb4:	4770      	bx	lr
    4bb6:	bf00      	nop

00004bb8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    4bb8:	b480      	push	{r7}
    4bba:	b083      	sub	sp, #12
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	6078      	str	r0, [r7, #4]
    4bc0:	460b      	mov	r3, r1
    4bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	891b      	ldrh	r3, [r3, #8]
    4bc8:	b29b      	uxth	r3, r3
    4bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4bce:	b29a      	uxth	r2, r3
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	891b      	ldrh	r3, [r3, #8]
    4bd8:	b29a      	uxth	r2, r3
    4bda:	887b      	ldrh	r3, [r7, #2]
    4bdc:	4313      	orrs	r3, r2
    4bde:	b29a      	uxth	r2, r3
    4be0:	687b      	ldr	r3, [r7, #4]
    4be2:	811a      	strh	r2, [r3, #8]
}
    4be4:	f107 070c 	add.w	r7, r7, #12
    4be8:	46bd      	mov	sp, r7
    4bea:	bc80      	pop	{r7}
    4bec:	4770      	bx	lr
    4bee:	bf00      	nop

00004bf0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    4bf0:	b480      	push	{r7}
    4bf2:	b083      	sub	sp, #12
    4bf4:	af00      	add	r7, sp, #0
    4bf6:	6078      	str	r0, [r7, #4]
    4bf8:	460b      	mov	r3, r1
    4bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	887a      	ldrh	r2, [r7, #2]
    4c00:	849a      	strh	r2, [r3, #36]	; 0x24
}
    4c02:	f107 070c 	add.w	r7, r7, #12
    4c06:	46bd      	mov	sp, r7
    4c08:	bc80      	pop	{r7}
    4c0a:	4770      	bx	lr

00004c0c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    4c0c:	b480      	push	{r7}
    4c0e:	b083      	sub	sp, #12
    4c10:	af00      	add	r7, sp, #0
    4c12:	6078      	str	r0, [r7, #4]
    4c14:	460b      	mov	r3, r1
    4c16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	887a      	ldrh	r2, [r7, #2]
    4c1c:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    4c1e:	f107 070c 	add.w	r7, r7, #12
    4c22:	46bd      	mov	sp, r7
    4c24:	bc80      	pop	{r7}
    4c26:	4770      	bx	lr

00004c28 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    4c28:	b480      	push	{r7}
    4c2a:	b083      	sub	sp, #12
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	460b      	mov	r3, r1
    4c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    4c34:	687b      	ldr	r3, [r7, #4]
    4c36:	887a      	ldrh	r2, [r7, #2]
    4c38:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4c3a:	f107 070c 	add.w	r7, r7, #12
    4c3e:	46bd      	mov	sp, r7
    4c40:	bc80      	pop	{r7}
    4c42:	4770      	bx	lr

00004c44 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    4c44:	b480      	push	{r7}
    4c46:	b083      	sub	sp, #12
    4c48:	af00      	add	r7, sp, #0
    4c4a:	6078      	str	r0, [r7, #4]
    4c4c:	460b      	mov	r3, r1
    4c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	887a      	ldrh	r2, [r7, #2]
    4c54:	871a      	strh	r2, [r3, #56]	; 0x38
}
    4c56:	f107 070c 	add.w	r7, r7, #12
    4c5a:	46bd      	mov	sp, r7
    4c5c:	bc80      	pop	{r7}
    4c5e:	4770      	bx	lr

00004c60 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    4c60:	b480      	push	{r7}
    4c62:	b083      	sub	sp, #12
    4c64:	af00      	add	r7, sp, #0
    4c66:	6078      	str	r0, [r7, #4]
    4c68:	460b      	mov	r3, r1
    4c6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	887a      	ldrh	r2, [r7, #2]
    4c70:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    4c72:	f107 070c 	add.w	r7, r7, #12
    4c76:	46bd      	mov	sp, r7
    4c78:	bc80      	pop	{r7}
    4c7a:	4770      	bx	lr

00004c7c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    4c7c:	b480      	push	{r7}
    4c7e:	b083      	sub	sp, #12
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
    4c84:	460b      	mov	r3, r1
    4c86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	887a      	ldrh	r2, [r7, #2]
    4c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    4c90:	f107 070c 	add.w	r7, r7, #12
    4c94:	46bd      	mov	sp, r7
    4c96:	bc80      	pop	{r7}
    4c98:	4770      	bx	lr
    4c9a:	bf00      	nop

00004c9c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4c9c:	b480      	push	{r7}
    4c9e:	b083      	sub	sp, #12
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	6078      	str	r0, [r7, #4]
    4ca4:	460b      	mov	r3, r1
    4ca6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	8b1b      	ldrh	r3, [r3, #24]
    4cac:	b29b      	uxth	r3, r3
    4cae:	f023 030c 	bic.w	r3, r3, #12
    4cb2:	b29a      	uxth	r2, r3
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	8b1b      	ldrh	r3, [r3, #24]
    4cbc:	b29a      	uxth	r2, r3
    4cbe:	887b      	ldrh	r3, [r7, #2]
    4cc0:	4313      	orrs	r3, r2
    4cc2:	b29a      	uxth	r2, r3
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	831a      	strh	r2, [r3, #24]
}
    4cc8:	f107 070c 	add.w	r7, r7, #12
    4ccc:	46bd      	mov	sp, r7
    4cce:	bc80      	pop	{r7}
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop

00004cd4 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4cd4:	b480      	push	{r7}
    4cd6:	b083      	sub	sp, #12
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
    4cdc:	460b      	mov	r3, r1
    4cde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	8b1b      	ldrh	r3, [r3, #24]
    4ce4:	b29b      	uxth	r3, r3
    4ce6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4cea:	b29a      	uxth	r2, r3
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	8b1b      	ldrh	r3, [r3, #24]
    4cf4:	b29a      	uxth	r2, r3
    4cf6:	887b      	ldrh	r3, [r7, #2]
    4cf8:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4cfc:	b29b      	uxth	r3, r3
    4cfe:	4313      	orrs	r3, r2
    4d00:	b29a      	uxth	r2, r3
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	831a      	strh	r2, [r3, #24]
}
    4d06:	f107 070c 	add.w	r7, r7, #12
    4d0a:	46bd      	mov	sp, r7
    4d0c:	bc80      	pop	{r7}
    4d0e:	4770      	bx	lr

00004d10 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4d10:	b480      	push	{r7}
    4d12:	b083      	sub	sp, #12
    4d14:	af00      	add	r7, sp, #0
    4d16:	6078      	str	r0, [r7, #4]
    4d18:	460b      	mov	r3, r1
    4d1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	8b9b      	ldrh	r3, [r3, #28]
    4d20:	b29b      	uxth	r3, r3
    4d22:	f023 030c 	bic.w	r3, r3, #12
    4d26:	b29a      	uxth	r2, r3
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	8b9b      	ldrh	r3, [r3, #28]
    4d30:	b29a      	uxth	r2, r3
    4d32:	887b      	ldrh	r3, [r7, #2]
    4d34:	4313      	orrs	r3, r2
    4d36:	b29a      	uxth	r2, r3
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	839a      	strh	r2, [r3, #28]
}
    4d3c:	f107 070c 	add.w	r7, r7, #12
    4d40:	46bd      	mov	sp, r7
    4d42:	bc80      	pop	{r7}
    4d44:	4770      	bx	lr
    4d46:	bf00      	nop

00004d48 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    4d48:	b480      	push	{r7}
    4d4a:	b083      	sub	sp, #12
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
    4d50:	460b      	mov	r3, r1
    4d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	8b9b      	ldrh	r3, [r3, #28]
    4d58:	b29b      	uxth	r3, r3
    4d5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4d5e:	b29a      	uxth	r2, r3
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	8b9b      	ldrh	r3, [r3, #28]
    4d68:	b29a      	uxth	r2, r3
    4d6a:	887b      	ldrh	r3, [r7, #2]
    4d6c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4d70:	b29b      	uxth	r3, r3
    4d72:	4313      	orrs	r3, r2
    4d74:	b29a      	uxth	r2, r3
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	839a      	strh	r2, [r3, #28]
}
    4d7a:	f107 070c 	add.w	r7, r7, #12
    4d7e:	46bd      	mov	sp, r7
    4d80:	bc80      	pop	{r7}
    4d82:	4770      	bx	lr

00004d84 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    4d84:	b480      	push	{r7}
    4d86:	b083      	sub	sp, #12
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
    4d8c:	460b      	mov	r3, r1
    4d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	881b      	ldrh	r3, [r3, #0]
    4d94:	b29b      	uxth	r3, r3
    4d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4d9a:	b29a      	uxth	r2, r3
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	881b      	ldrh	r3, [r3, #0]
    4da4:	b29a      	uxth	r2, r3
    4da6:	887b      	ldrh	r3, [r7, #2]
    4da8:	4313      	orrs	r3, r2
    4daa:	b29a      	uxth	r2, r3
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	801a      	strh	r2, [r3, #0]
}
    4db0:	f107 070c 	add.w	r7, r7, #12
    4db4:	46bd      	mov	sp, r7
    4db6:	bc80      	pop	{r7}
    4db8:	4770      	bx	lr
    4dba:	bf00      	nop

00004dbc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4dbc:	b480      	push	{r7}
    4dbe:	b083      	sub	sp, #12
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4dc8:	b29b      	uxth	r3, r3
}
    4dca:	4618      	mov	r0, r3
    4dcc:	f107 070c 	add.w	r7, r7, #12
    4dd0:	46bd      	mov	sp, r7
    4dd2:	bc80      	pop	{r7}
    4dd4:	4770      	bx	lr
    4dd6:	bf00      	nop

00004dd8 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    4dd8:	b480      	push	{r7}
    4dda:	b083      	sub	sp, #12
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4de4:	b29b      	uxth	r3, r3
}
    4de6:	4618      	mov	r0, r3
    4de8:	f107 070c 	add.w	r7, r7, #12
    4dec:	46bd      	mov	sp, r7
    4dee:	bc80      	pop	{r7}
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop

00004df4 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4df4:	b480      	push	{r7}
    4df6:	b083      	sub	sp, #12
    4df8:	af00      	add	r7, sp, #0
    4dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4e00:	b29b      	uxth	r3, r3
}
    4e02:	4618      	mov	r0, r3
    4e04:	f107 070c 	add.w	r7, r7, #12
    4e08:	46bd      	mov	sp, r7
    4e0a:	bc80      	pop	{r7}
    4e0c:	4770      	bx	lr
    4e0e:	bf00      	nop

00004e10 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4e10:	b480      	push	{r7}
    4e12:	b083      	sub	sp, #12
    4e14:	af00      	add	r7, sp, #0
    4e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    4e1e:	b29b      	uxth	r3, r3
}
    4e20:	4618      	mov	r0, r3
    4e22:	f107 070c 	add.w	r7, r7, #12
    4e26:	46bd      	mov	sp, r7
    4e28:	bc80      	pop	{r7}
    4e2a:	4770      	bx	lr

00004e2c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4e2c:	b480      	push	{r7}
    4e2e:	b083      	sub	sp, #12
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4e38:	b29b      	uxth	r3, r3
}
    4e3a:	4618      	mov	r0, r3
    4e3c:	f107 070c 	add.w	r7, r7, #12
    4e40:	46bd      	mov	sp, r7
    4e42:	bc80      	pop	{r7}
    4e44:	4770      	bx	lr
    4e46:	bf00      	nop

00004e48 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    4e48:	b480      	push	{r7}
    4e4a:	b083      	sub	sp, #12
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e54:	b29b      	uxth	r3, r3
}
    4e56:	4618      	mov	r0, r3
    4e58:	f107 070c 	add.w	r7, r7, #12
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bc80      	pop	{r7}
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop

00004e64 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    4e64:	b480      	push	{r7}
    4e66:	b085      	sub	sp, #20
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
    4e6c:	460b      	mov	r3, r1
    4e6e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4e70:	f04f 0300 	mov.w	r3, #0
    4e74:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	8a1b      	ldrh	r3, [r3, #16]
    4e7a:	b29a      	uxth	r2, r3
    4e7c:	887b      	ldrh	r3, [r7, #2]
    4e7e:	4013      	ands	r3, r2
    4e80:	b29b      	uxth	r3, r3
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1
    4e8a:	73fb      	strb	r3, [r7, #15]
    4e8c:	e002      	b.n	4e94 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0
    4e92:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4e94:	7bfb      	ldrb	r3, [r7, #15]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 0714 	add.w	r7, r7, #20
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	bf00      	nop

00004ea4 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    4ea4:	b480      	push	{r7}
    4ea6:	b083      	sub	sp, #12
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4eb0:	887b      	ldrh	r3, [r7, #2]
    4eb2:	ea6f 0303 	mvn.w	r3, r3
    4eb6:	b29a      	uxth	r2, r3
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	821a      	strh	r2, [r3, #16]
}
    4ebc:	f107 070c 	add.w	r7, r7, #12
    4ec0:	46bd      	mov	sp, r7
    4ec2:	bc80      	pop	{r7}
    4ec4:	4770      	bx	lr
    4ec6:	bf00      	nop

00004ec8 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4ec8:	b480      	push	{r7}
    4eca:	b085      	sub	sp, #20
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
    4ed0:	460b      	mov	r3, r1
    4ed2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4ed4:	f04f 0300 	mov.w	r3, #0
    4ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    4eda:	f04f 0300 	mov.w	r3, #0
    4ede:	81bb      	strh	r3, [r7, #12]
    4ee0:	f04f 0300 	mov.w	r3, #0
    4ee4:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	8a1b      	ldrh	r3, [r3, #16]
    4eea:	b29a      	uxth	r2, r3
    4eec:	887b      	ldrh	r3, [r7, #2]
    4eee:	4013      	ands	r3, r2
    4ef0:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4ef2:	687b      	ldr	r3, [r7, #4]
    4ef4:	899b      	ldrh	r3, [r3, #12]
    4ef6:	b29a      	uxth	r2, r3
    4ef8:	887b      	ldrh	r3, [r7, #2]
    4efa:	4013      	ands	r3, r2
    4efc:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4efe:	89bb      	ldrh	r3, [r7, #12]
    4f00:	2b00      	cmp	r3, #0
    4f02:	d006      	beq.n	4f12 <TIM_GetITStatus+0x4a>
    4f04:	897b      	ldrh	r3, [r7, #10]
    4f06:	2b00      	cmp	r3, #0
    4f08:	d003      	beq.n	4f12 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
    4f0a:	f04f 0301 	mov.w	r3, #1
    4f0e:	73fb      	strb	r3, [r7, #15]
    4f10:	e002      	b.n	4f18 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
    4f12:	f04f 0300 	mov.w	r3, #0
    4f16:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4f18:	7bfb      	ldrb	r3, [r7, #15]
}
    4f1a:	4618      	mov	r0, r3
    4f1c:	f107 0714 	add.w	r7, r7, #20
    4f20:	46bd      	mov	sp, r7
    4f22:	bc80      	pop	{r7}
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop

00004f28 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4f28:	b480      	push	{r7}
    4f2a:	b083      	sub	sp, #12
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
    4f30:	460b      	mov	r3, r1
    4f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    4f34:	887b      	ldrh	r3, [r7, #2]
    4f36:	ea6f 0303 	mvn.w	r3, r3
    4f3a:	b29a      	uxth	r2, r3
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	821a      	strh	r2, [r3, #16]
}
    4f40:	f107 070c 	add.w	r7, r7, #12
    4f44:	46bd      	mov	sp, r7
    4f46:	bc80      	pop	{r7}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop

00004f4c <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4f4c:	b480      	push	{r7}
    4f4e:	b087      	sub	sp, #28
    4f50:	af00      	add	r7, sp, #0
    4f52:	60f8      	str	r0, [r7, #12]
    4f54:	8179      	strh	r1, [r7, #10]
    4f56:	813a      	strh	r2, [r7, #8]
    4f58:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    4f5a:	f04f 0300 	mov.w	r3, #0
    4f5e:	82bb      	strh	r3, [r7, #20]
    4f60:	f04f 0300 	mov.w	r3, #0
    4f64:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    4f66:	68fb      	ldr	r3, [r7, #12]
    4f68:	8c1b      	ldrh	r3, [r3, #32]
    4f6a:	b29b      	uxth	r3, r3
    4f6c:	f023 0301 	bic.w	r3, r3, #1
    4f70:	b29a      	uxth	r2, r3
    4f72:	68fb      	ldr	r3, [r7, #12]
    4f74:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    4f76:	68fb      	ldr	r3, [r7, #12]
    4f78:	8b1b      	ldrh	r3, [r3, #24]
    4f7a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	8c1b      	ldrh	r3, [r3, #32]
    4f80:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    4f82:	8abb      	ldrh	r3, [r7, #20]
    4f84:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4f88:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4f8a:	88fb      	ldrh	r3, [r7, #6]
    4f8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4f90:	b29a      	uxth	r2, r3
    4f92:	893b      	ldrh	r3, [r7, #8]
    4f94:	4313      	orrs	r3, r2
    4f96:	b29a      	uxth	r2, r3
    4f98:	8abb      	ldrh	r3, [r7, #20]
    4f9a:	4313      	orrs	r3, r2
    4f9c:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    4f9e:	68fa      	ldr	r2, [r7, #12]
    4fa0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    4fa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4fa8:	429a      	cmp	r2, r3
    4faa:	d01f      	beq.n	4fec <TI1_Config+0xa0>
    4fac:	68fa      	ldr	r2, [r7, #12]
    4fae:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    4fb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4fb6:	429a      	cmp	r2, r3
    4fb8:	d018      	beq.n	4fec <TI1_Config+0xa0>
    4fba:	68fb      	ldr	r3, [r7, #12]
    4fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4fc0:	d014      	beq.n	4fec <TI1_Config+0xa0>
    4fc2:	68fa      	ldr	r2, [r7, #12]
    4fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4fc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4fcc:	429a      	cmp	r2, r3
    4fce:	d00d      	beq.n	4fec <TI1_Config+0xa0>
    4fd0:	68fa      	ldr	r2, [r7, #12]
    4fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4fd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4fda:	429a      	cmp	r2, r3
    4fdc:	d006      	beq.n	4fec <TI1_Config+0xa0>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4fde:	68fa      	ldr	r2, [r7, #12]
    4fe0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    4fe4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4fe8:	429a      	cmp	r2, r3
    4fea:	d10b      	bne.n	5004 <TI1_Config+0xb8>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    4fec:	8afb      	ldrh	r3, [r7, #22]
    4fee:	f023 0302 	bic.w	r3, r3, #2
    4ff2:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4ff4:	897a      	ldrh	r2, [r7, #10]
    4ff6:	8afb      	ldrh	r3, [r7, #22]
    4ff8:	4313      	orrs	r3, r2
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	f043 0301 	orr.w	r3, r3, #1
    5000:	82fb      	strh	r3, [r7, #22]
    5002:	e00a      	b.n	501a <TI1_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    5004:	8afb      	ldrh	r3, [r7, #22]
    5006:	f023 030a 	bic.w	r3, r3, #10
    500a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    500c:	897a      	ldrh	r2, [r7, #10]
    500e:	8afb      	ldrh	r3, [r7, #22]
    5010:	4313      	orrs	r3, r2
    5012:	b29b      	uxth	r3, r3
    5014:	f043 0301 	orr.w	r3, r3, #1
    5018:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	8aba      	ldrh	r2, [r7, #20]
    501e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	8afa      	ldrh	r2, [r7, #22]
    5024:	841a      	strh	r2, [r3, #32]
}
    5026:	f107 071c 	add.w	r7, r7, #28
    502a:	46bd      	mov	sp, r7
    502c:	bc80      	pop	{r7}
    502e:	4770      	bx	lr

00005030 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5030:	b480      	push	{r7}
    5032:	b087      	sub	sp, #28
    5034:	af00      	add	r7, sp, #0
    5036:	60f8      	str	r0, [r7, #12]
    5038:	8179      	strh	r1, [r7, #10]
    503a:	813a      	strh	r2, [r7, #8]
    503c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    503e:	f04f 0300 	mov.w	r3, #0
    5042:	82bb      	strh	r3, [r7, #20]
    5044:	f04f 0300 	mov.w	r3, #0
    5048:	82fb      	strh	r3, [r7, #22]
    504a:	f04f 0300 	mov.w	r3, #0
    504e:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	8c1b      	ldrh	r3, [r3, #32]
    5054:	b29b      	uxth	r3, r3
    5056:	f023 0310 	bic.w	r3, r3, #16
    505a:	b29a      	uxth	r2, r3
    505c:	68fb      	ldr	r3, [r7, #12]
    505e:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    5060:	68fb      	ldr	r3, [r7, #12]
    5062:	8b1b      	ldrh	r3, [r3, #24]
    5064:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5066:	68fb      	ldr	r3, [r7, #12]
    5068:	8c1b      	ldrh	r3, [r3, #32]
    506a:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    506c:	897b      	ldrh	r3, [r7, #10]
    506e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5072:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    5074:	8abb      	ldrh	r3, [r7, #20]
    5076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    507a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    507e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    5082:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    5084:	88fb      	ldrh	r3, [r7, #6]
    5086:	ea4f 3303 	mov.w	r3, r3, lsl #12
    508a:	b29a      	uxth	r2, r3
    508c:	8abb      	ldrh	r3, [r7, #20]
    508e:	4313      	orrs	r3, r2
    5090:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    5092:	893b      	ldrh	r3, [r7, #8]
    5094:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5098:	b29a      	uxth	r2, r3
    509a:	8abb      	ldrh	r3, [r7, #20]
    509c:	4313      	orrs	r3, r2
    509e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    50a0:	68fa      	ldr	r2, [r7, #12]
    50a2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    50a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    50aa:	429a      	cmp	r2, r3
    50ac:	d01f      	beq.n	50ee <TI2_Config+0xbe>
    50ae:	68fa      	ldr	r2, [r7, #12]
    50b0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    50b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    50b8:	429a      	cmp	r2, r3
    50ba:	d018      	beq.n	50ee <TI2_Config+0xbe>
    50bc:	68fb      	ldr	r3, [r7, #12]
    50be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    50c2:	d014      	beq.n	50ee <TI2_Config+0xbe>
    50c4:	68fa      	ldr	r2, [r7, #12]
    50c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    50ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
    50ce:	429a      	cmp	r2, r3
    50d0:	d00d      	beq.n	50ee <TI2_Config+0xbe>
    50d2:	68fa      	ldr	r2, [r7, #12]
    50d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    50d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    50dc:	429a      	cmp	r2, r3
    50de:	d006      	beq.n	50ee <TI2_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
    50e0:	68fa      	ldr	r2, [r7, #12]
    50e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    50e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    50ea:	429a      	cmp	r2, r3
    50ec:	d10b      	bne.n	5106 <TI2_Config+0xd6>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    50ee:	8afb      	ldrh	r3, [r7, #22]
    50f0:	f023 0320 	bic.w	r3, r3, #32
    50f4:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    50f6:	8a7a      	ldrh	r2, [r7, #18]
    50f8:	8afb      	ldrh	r3, [r7, #22]
    50fa:	4313      	orrs	r3, r2
    50fc:	b29b      	uxth	r3, r3
    50fe:	f043 0310 	orr.w	r3, r3, #16
    5102:	82fb      	strh	r3, [r7, #22]
    5104:	e00a      	b.n	511c <TI2_Config+0xec>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    5106:	8afb      	ldrh	r3, [r7, #22]
    5108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    510c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    510e:	897a      	ldrh	r2, [r7, #10]
    5110:	8afb      	ldrh	r3, [r7, #22]
    5112:	4313      	orrs	r3, r2
    5114:	b29b      	uxth	r3, r3
    5116:	f043 0310 	orr.w	r3, r3, #16
    511a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    511c:	68fb      	ldr	r3, [r7, #12]
    511e:	8aba      	ldrh	r2, [r7, #20]
    5120:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	8afa      	ldrh	r2, [r7, #22]
    5126:	841a      	strh	r2, [r3, #32]
}
    5128:	f107 071c 	add.w	r7, r7, #28
    512c:	46bd      	mov	sp, r7
    512e:	bc80      	pop	{r7}
    5130:	4770      	bx	lr
    5132:	bf00      	nop

00005134 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5134:	b480      	push	{r7}
    5136:	b087      	sub	sp, #28
    5138:	af00      	add	r7, sp, #0
    513a:	60f8      	str	r0, [r7, #12]
    513c:	8179      	strh	r1, [r7, #10]
    513e:	813a      	strh	r2, [r7, #8]
    5140:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5142:	f04f 0300 	mov.w	r3, #0
    5146:	82bb      	strh	r3, [r7, #20]
    5148:	f04f 0300 	mov.w	r3, #0
    514c:	82fb      	strh	r3, [r7, #22]
    514e:	f04f 0300 	mov.w	r3, #0
    5152:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    5154:	68fb      	ldr	r3, [r7, #12]
    5156:	8c1b      	ldrh	r3, [r3, #32]
    5158:	b29b      	uxth	r3, r3
    515a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    515e:	b29a      	uxth	r2, r3
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5164:	68fb      	ldr	r3, [r7, #12]
    5166:	8b9b      	ldrh	r3, [r3, #28]
    5168:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    516a:	68fb      	ldr	r3, [r7, #12]
    516c:	8c1b      	ldrh	r3, [r3, #32]
    516e:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    5170:	897b      	ldrh	r3, [r7, #10]
    5172:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5176:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    5178:	8abb      	ldrh	r3, [r7, #20]
    517a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    517e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5180:	88fb      	ldrh	r3, [r7, #6]
    5182:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5186:	b29a      	uxth	r2, r3
    5188:	893b      	ldrh	r3, [r7, #8]
    518a:	4313      	orrs	r3, r2
    518c:	b29a      	uxth	r2, r3
    518e:	8abb      	ldrh	r3, [r7, #20]
    5190:	4313      	orrs	r3, r2
    5192:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5194:	68fa      	ldr	r2, [r7, #12]
    5196:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    519a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    519e:	429a      	cmp	r2, r3
    51a0:	d01f      	beq.n	51e2 <TI3_Config+0xae>
    51a2:	68fa      	ldr	r2, [r7, #12]
    51a4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    51a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    51ac:	429a      	cmp	r2, r3
    51ae:	d018      	beq.n	51e2 <TI3_Config+0xae>
    51b0:	68fb      	ldr	r3, [r7, #12]
    51b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    51b6:	d014      	beq.n	51e2 <TI3_Config+0xae>
    51b8:	68fa      	ldr	r2, [r7, #12]
    51ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    51be:	f2c4 0300 	movt	r3, #16384	; 0x4000
    51c2:	429a      	cmp	r2, r3
    51c4:	d00d      	beq.n	51e2 <TI3_Config+0xae>
    51c6:	68fa      	ldr	r2, [r7, #12]
    51c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    51cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    51d0:	429a      	cmp	r2, r3
    51d2:	d006      	beq.n	51e2 <TI3_Config+0xae>
     (TIMx == TIM4) ||(TIMx == TIM5))
    51d4:	68fa      	ldr	r2, [r7, #12]
    51d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    51da:	f2c4 0300 	movt	r3, #16384	; 0x4000
    51de:	429a      	cmp	r2, r3
    51e0:	d10b      	bne.n	51fa <TI3_Config+0xc6>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    51e2:	8afb      	ldrh	r3, [r7, #22]
    51e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    51e8:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    51ea:	8a7a      	ldrh	r2, [r7, #18]
    51ec:	8afb      	ldrh	r3, [r7, #22]
    51ee:	4313      	orrs	r3, r2
    51f0:	b29b      	uxth	r3, r3
    51f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    51f6:	82fb      	strh	r3, [r7, #22]
    51f8:	e00a      	b.n	5210 <TI3_Config+0xdc>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    51fa:	8afb      	ldrh	r3, [r7, #22]
    51fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    5200:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    5202:	897a      	ldrh	r2, [r7, #10]
    5204:	8afb      	ldrh	r3, [r7, #22]
    5206:	4313      	orrs	r3, r2
    5208:	b29b      	uxth	r3, r3
    520a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    520e:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    5210:	68fb      	ldr	r3, [r7, #12]
    5212:	8aba      	ldrh	r2, [r7, #20]
    5214:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5216:	68fb      	ldr	r3, [r7, #12]
    5218:	8afa      	ldrh	r2, [r7, #22]
    521a:	841a      	strh	r2, [r3, #32]
}
    521c:	f107 071c 	add.w	r7, r7, #28
    5220:	46bd      	mov	sp, r7
    5222:	bc80      	pop	{r7}
    5224:	4770      	bx	lr
    5226:	bf00      	nop

00005228 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5228:	b480      	push	{r7}
    522a:	b087      	sub	sp, #28
    522c:	af00      	add	r7, sp, #0
    522e:	60f8      	str	r0, [r7, #12]
    5230:	8179      	strh	r1, [r7, #10]
    5232:	813a      	strh	r2, [r7, #8]
    5234:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5236:	f04f 0300 	mov.w	r3, #0
    523a:	82bb      	strh	r3, [r7, #20]
    523c:	f04f 0300 	mov.w	r3, #0
    5240:	82fb      	strh	r3, [r7, #22]
    5242:	f04f 0300 	mov.w	r3, #0
    5246:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    5248:	68fb      	ldr	r3, [r7, #12]
    524a:	8c1b      	ldrh	r3, [r3, #32]
    524c:	b29b      	uxth	r3, r3
    524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5252:	b29a      	uxth	r2, r3
    5254:	68fb      	ldr	r3, [r7, #12]
    5256:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5258:	68fb      	ldr	r3, [r7, #12]
    525a:	8b9b      	ldrh	r3, [r3, #28]
    525c:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    525e:	68fb      	ldr	r3, [r7, #12]
    5260:	8c1b      	ldrh	r3, [r3, #32]
    5262:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    5264:	897b      	ldrh	r3, [r7, #10]
    5266:	ea4f 3303 	mov.w	r3, r3, lsl #12
    526a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    526c:	8abb      	ldrh	r3, [r7, #20]
    526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5272:	ea4f 5303 	mov.w	r3, r3, lsl #20
    5276:	ea4f 5313 	mov.w	r3, r3, lsr #20
    527a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    527c:	893b      	ldrh	r3, [r7, #8]
    527e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5282:	b29a      	uxth	r2, r3
    5284:	8abb      	ldrh	r3, [r7, #20]
    5286:	4313      	orrs	r3, r2
    5288:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    528a:	88fb      	ldrh	r3, [r7, #6]
    528c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5290:	b29a      	uxth	r2, r3
    5292:	8abb      	ldrh	r3, [r7, #20]
    5294:	4313      	orrs	r3, r2
    5296:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5298:	68fa      	ldr	r2, [r7, #12]
    529a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    529e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    52a2:	429a      	cmp	r2, r3
    52a4:	d01f      	beq.n	52e6 <TI4_Config+0xbe>
    52a6:	68fa      	ldr	r2, [r7, #12]
    52a8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    52ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    52b0:	429a      	cmp	r2, r3
    52b2:	d018      	beq.n	52e6 <TI4_Config+0xbe>
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    52ba:	d014      	beq.n	52e6 <TI4_Config+0xbe>
    52bc:	68fa      	ldr	r2, [r7, #12]
    52be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    52c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    52c6:	429a      	cmp	r2, r3
    52c8:	d00d      	beq.n	52e6 <TI4_Config+0xbe>
    52ca:	68fa      	ldr	r2, [r7, #12]
    52cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    52d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    52d4:	429a      	cmp	r2, r3
    52d6:	d006      	beq.n	52e6 <TI4_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
    52d8:	68fa      	ldr	r2, [r7, #12]
    52da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    52de:	f2c4 0300 	movt	r3, #16384	; 0x4000
    52e2:	429a      	cmp	r2, r3
    52e4:	d10b      	bne.n	52fe <TI4_Config+0xd6>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    52e6:	8afb      	ldrh	r3, [r7, #22]
    52e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    52ec:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    52ee:	8a7a      	ldrh	r2, [r7, #18]
    52f0:	8afb      	ldrh	r3, [r7, #22]
    52f2:	4313      	orrs	r3, r2
    52f4:	b29b      	uxth	r3, r3
    52f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    52fa:	82fb      	strh	r3, [r7, #22]
    52fc:	e00e      	b.n	531c <TI4_Config+0xf4>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    52fe:	8afb      	ldrh	r3, [r7, #22]
    5300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5304:	ea4f 4343 	mov.w	r3, r3, lsl #17
    5308:	ea4f 4353 	mov.w	r3, r3, lsr #17
    530c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    530e:	897a      	ldrh	r2, [r7, #10]
    5310:	8afb      	ldrh	r3, [r7, #22]
    5312:	4313      	orrs	r3, r2
    5314:	b29b      	uxth	r3, r3
    5316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    531a:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	8aba      	ldrh	r2, [r7, #20]
    5320:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5322:	68fb      	ldr	r3, [r7, #12]
    5324:	8afa      	ldrh	r2, [r7, #22]
    5326:	841a      	strh	r2, [r3, #32]
}
    5328:	f107 071c 	add.w	r7, r7, #28
    532c:	46bd      	mov	sp, r7
    532e:	bc80      	pop	{r7}
    5330:	4770      	bx	lr
    5332:	bf00      	nop

00005334 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    5334:	b480      	push	{r7}
    5336:	b083      	sub	sp, #12
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    533c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5340:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5344:	687a      	ldr	r2, [r7, #4]
    5346:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    534a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    534e:	60da      	str	r2, [r3, #12]
}
    5350:	f107 070c 	add.w	r7, r7, #12
    5354:	46bd      	mov	sp, r7
    5356:	bc80      	pop	{r7}
    5358:	4770      	bx	lr
    535a:	bf00      	nop

0000535c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    535c:	b480      	push	{r7}
    535e:	b087      	sub	sp, #28
    5360:	af00      	add	r7, sp, #0
    5362:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    5364:	f04f 0300 	mov.w	r3, #0
    5368:	617b      	str	r3, [r7, #20]
    536a:	f04f 0300 	mov.w	r3, #0
    536e:	613b      	str	r3, [r7, #16]
    5370:	f04f 030f 	mov.w	r3, #15
    5374:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	78db      	ldrb	r3, [r3, #3]
    537a:	2b00      	cmp	r3, #0
    537c:	d047      	beq.n	540e <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    537e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5382:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5386:	68db      	ldr	r3, [r3, #12]
    5388:	ea6f 0303 	mvn.w	r3, r3
    538c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5390:	ea4f 2313 	mov.w	r3, r3, lsr #8
    5394:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    5396:	697b      	ldr	r3, [r7, #20]
    5398:	f1c3 0304 	rsb	r3, r3, #4
    539c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    539e:	697b      	ldr	r3, [r7, #20]
    53a0:	68fa      	ldr	r2, [r7, #12]
    53a2:	fa22 f303 	lsr.w	r3, r2, r3
    53a6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	785b      	ldrb	r3, [r3, #1]
    53ac:	461a      	mov	r2, r3
    53ae:	693b      	ldr	r3, [r7, #16]
    53b0:	fa02 f303 	lsl.w	r3, r2, r3
    53b4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	789b      	ldrb	r3, [r3, #2]
    53ba:	461a      	mov	r2, r3
    53bc:	68fb      	ldr	r3, [r7, #12]
    53be:	4013      	ands	r3, r2
    53c0:	697a      	ldr	r2, [r7, #20]
    53c2:	4313      	orrs	r3, r2
    53c4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    53c6:	697b      	ldr	r3, [r7, #20]
    53c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    53cc:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    53ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    53d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    53d6:	687a      	ldr	r2, [r7, #4]
    53d8:	7812      	ldrb	r2, [r2, #0]
    53da:	4611      	mov	r1, r2
    53dc:	697a      	ldr	r2, [r7, #20]
    53de:	b2d2      	uxtb	r2, r2
    53e0:	185b      	adds	r3, r3, r1
    53e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    53e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    53ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    53ee:	687a      	ldr	r2, [r7, #4]
    53f0:	7812      	ldrb	r2, [r2, #0]
    53f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    53f6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    53f8:	6879      	ldr	r1, [r7, #4]
    53fa:	7809      	ldrb	r1, [r1, #0]
    53fc:	f001 011f 	and.w	r1, r1, #31
    5400:	f04f 0001 	mov.w	r0, #1
    5404:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    540c:	e014      	b.n	5438 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    540e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    5412:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5416:	687a      	ldr	r2, [r7, #4]
    5418:	7812      	ldrb	r2, [r2, #0]
    541a:	ea4f 1252 	mov.w	r2, r2, lsr #5
    541e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    5420:	6879      	ldr	r1, [r7, #4]
    5422:	7809      	ldrb	r1, [r1, #0]
    5424:	f001 011f 	and.w	r1, r1, #31
    5428:	f04f 0001 	mov.w	r0, #1
    542c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5430:	f102 0220 	add.w	r2, r2, #32
    5434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    5438:	f107 071c 	add.w	r7, r7, #28
    543c:	46bd      	mov	sp, r7
    543e:	bc80      	pop	{r7}
    5440:	4770      	bx	lr
    5442:	bf00      	nop

00005444 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    5444:	b480      	push	{r7}
    5446:	b083      	sub	sp, #12
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
    544c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    544e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5452:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5456:	683a      	ldr	r2, [r7, #0]
    5458:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    545c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5460:	6879      	ldr	r1, [r7, #4]
    5462:	430a      	orrs	r2, r1
    5464:	609a      	str	r2, [r3, #8]
}
    5466:	f107 070c 	add.w	r7, r7, #12
    546a:	46bd      	mov	sp, r7
    546c:	bc80      	pop	{r7}
    546e:	4770      	bx	lr

00005470 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    5470:	b480      	push	{r7}
    5472:	b083      	sub	sp, #12
    5474:	af00      	add	r7, sp, #0
    5476:	4602      	mov	r2, r0
    5478:	460b      	mov	r3, r1
    547a:	71fa      	strb	r2, [r7, #7]
    547c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    547e:	79bb      	ldrb	r3, [r7, #6]
    5480:	2b00      	cmp	r3, #0
    5482:	d00c      	beq.n	549e <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    5484:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5488:	f2ce 0300 	movt	r3, #57344	; 0xe000
    548c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    5490:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5494:	6911      	ldr	r1, [r2, #16]
    5496:	79fa      	ldrb	r2, [r7, #7]
    5498:	430a      	orrs	r2, r1
    549a:	611a      	str	r2, [r3, #16]
    549c:	e00d      	b.n	54ba <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    549e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    54a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    54a6:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    54aa:	f2ce 0200 	movt	r2, #57344	; 0xe000
    54ae:	6911      	ldr	r1, [r2, #16]
    54b0:	79fa      	ldrb	r2, [r7, #7]
    54b2:	ea6f 0202 	mvn.w	r2, r2
    54b6:	400a      	ands	r2, r1
    54b8:	611a      	str	r2, [r3, #16]
  }
}
    54ba:	f107 070c 	add.w	r7, r7, #12
    54be:	46bd      	mov	sp, r7
    54c0:	bc80      	pop	{r7}
    54c2:	4770      	bx	lr

000054c4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    54c4:	b480      	push	{r7}
    54c6:	b083      	sub	sp, #12
    54c8:	af00      	add	r7, sp, #0
    54ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    54cc:	687b      	ldr	r3, [r7, #4]
    54ce:	2b04      	cmp	r3, #4
    54d0:	d10c      	bne.n	54ec <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    54d2:	f24e 0310 	movw	r3, #57360	; 0xe010
    54d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    54da:	f24e 0210 	movw	r2, #57360	; 0xe010
    54de:	f2ce 0200 	movt	r2, #57344	; 0xe000
    54e2:	6812      	ldr	r2, [r2, #0]
    54e4:	f042 0204 	orr.w	r2, r2, #4
    54e8:	601a      	str	r2, [r3, #0]
    54ea:	e00b      	b.n	5504 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    54ec:	f24e 0310 	movw	r3, #57360	; 0xe010
    54f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    54f4:	f24e 0210 	movw	r2, #57360	; 0xe010
    54f8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    54fc:	6812      	ldr	r2, [r2, #0]
    54fe:	f022 0204 	bic.w	r2, r2, #4
    5502:	601a      	str	r2, [r3, #0]
  }
}
    5504:	f107 070c 	add.w	r7, r7, #12
    5508:	46bd      	mov	sp, r7
    550a:	bc80      	pop	{r7}
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <main>:
#define USE_STDPERIPH_DRIVER
#include "stm32f10x.h"

int main(void)
{
    5510:	b580      	push	{r7, lr}
    5512:	b082      	sub	sp, #8
    5514:	af00      	add	r7, sp, #0
    uint8_t b;

    init_led();
    5516:	f7fb f91d 	bl	754 <init_led>

    init_rs232();
    551a:	f7fb f99b 	bl	854 <init_rs232>
    USART_Cmd(USART2, ENABLE);
    551e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5522:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5526:	f04f 0101 	mov.w	r1, #1
    552a:	f7fc fcf9 	bl	1f20 <USART_Cmd>

    while(1) {
        /* Loop until the USART2 has received a byte. */
        while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET);
    552e:	bf00      	nop
    5530:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5534:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5538:	f04f 0120 	mov.w	r1, #32
    553c:	f7fc ff6c 	bl	2418 <USART_GetFlagStatus>
    5540:	4603      	mov	r3, r0
    5542:	2b00      	cmp	r3, #0
    5544:	d0f4      	beq.n	5530 <main+0x20>

        /* Capture the received byte and print it out. */
        b = (USART_ReceiveData(USART2) & 0x7F);
    5546:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    554a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    554e:	f7fc fe25 	bl	219c <USART_ReceiveData>
    5552:	4603      	mov	r3, r0
    5554:	b2db      	uxtb	r3, r3
    5556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    555a:	71fb      	strb	r3, [r7, #7]
        send_byte('G');
    555c:	f04f 0047 	mov.w	r0, #71	; 0x47
    5560:	f7fb fa46 	bl	9f0 <send_byte>
        send_byte('o');
    5564:	f04f 006f 	mov.w	r0, #111	; 0x6f
    5568:	f7fb fa42 	bl	9f0 <send_byte>
        send_byte('t');
    556c:	f04f 0074 	mov.w	r0, #116	; 0x74
    5570:	f7fb fa3e 	bl	9f0 <send_byte>
        send_byte(':');
    5574:	f04f 003a 	mov.w	r0, #58	; 0x3a
    5578:	f7fb fa3a 	bl	9f0 <send_byte>
        send_byte(b);
    557c:	79fb      	ldrb	r3, [r7, #7]
    557e:	4618      	mov	r0, r3
    5580:	f7fb fa36 	bl	9f0 <send_byte>
        send_byte('\n');
    5584:	f04f 000a 	mov.w	r0, #10
    5588:	f7fb fa32 	bl	9f0 <send_byte>
    }
    558c:	bf00      	nop
    init_rs232();
    USART_Cmd(USART2, ENABLE);

    while(1) {
        /* Loop until the USART2 has received a byte. */
        while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET);
    558e:	e7ce      	b.n	552e <main+0x1e>

00005590 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    5590:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    5592:	f000 b804 	b.w	559e <LoopCopyDataInit>

00005596 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    5596:	4b0c      	ldr	r3, [pc, #48]	; (55c8 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    5598:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    559a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    559c:	3104      	adds	r1, #4

0000559e <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    559e:	480b      	ldr	r0, [pc, #44]	; (55cc <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    55a0:	4b0b      	ldr	r3, [pc, #44]	; (55d0 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    55a2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    55a4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    55a6:	f4ff aff6 	bcc.w	5596 <CopyDataInit>
	ldr	r2, =_sbss
    55aa:	4a0a      	ldr	r2, [pc, #40]	; (55d4 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    55ac:	f000 b803 	b.w	55b6 <LoopFillZerobss>

000055b0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    55b0:	2300      	movs	r3, #0
	str	r3, [r2], #4
    55b2:	f842 3b04 	str.w	r3, [r2], #4

000055b6 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    55b6:	4b08      	ldr	r3, [pc, #32]	; (55d8 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    55b8:	429a      	cmp	r2, r3
	bcc	FillZerobss
    55ba:	f4ff aff9 	bcc.w	55b0 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    55be:	f7fa feeb 	bl	398 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    55c2:	f7ff ffa5 	bl	5510 <main>
	bx	lr    
    55c6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    55c8:	000055e0 	.word	0x000055e0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    55cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    55d0:	20000028 	.word	0x20000028
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    55d4:	20000028 	.word	0x20000028
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    55d8:	20000028 	.word	0x20000028

000055dc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    55dc:	f7ff bffe 	b.w	55dc <ADC1_2_IRQHandler>
